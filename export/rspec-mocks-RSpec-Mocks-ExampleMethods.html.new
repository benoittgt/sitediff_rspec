Module: RSpec::Mocks::ExampleMethods
  
  
  
Module: RSpec::Mocks::ExampleMethods
  
  
  


  

  
  
  
  
  
      Includes:Includes:
      ArgumentMatchersArgumentMatchers
  
      Includes:
      ArgumentMatchers
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/mocks/example_methods.rblib/rspec/mocks/example_methods.rb
  
    Defined in:
    lib/rspec/mocks/example_methods.rb
  
  

  

  
  
  
  
  
      Includes:
      ArgumentMatchers
  
  
  

  

  
  
    Defined in:
    lib/rspec/mocks/example_methods.rb
  
  


OverviewOverview
  
    Contains methods intended to be used from within code examples.
Mix this in to your test context (such as a test framework base class)
to use rspec-mocks with your test framework. If you're using rspec-core,
it'll take care of doing this for you.Contains methods intended to be used from within code examples.
Mix this in to your test context (such as a test framework base class)
to use rspec-mocks with your test framework. If you're using rspec-core,
it'll take care of doing this for you.


  
    Contains methods intended to be used from within code examples.
Mix this in to your test context (such as a test framework base class)
to use rspec-mocks with your test framework. If you're using rspec-core,
it'll take care of doing this for you.


  

  
    Contains methods intended to be used from within code examples.
Mix this in to your test context (such as a test framework base class)
to use rspec-mocks with your test framework. If you're using rspec-core,
it'll take care of doing this for you.


  


  


  

Defined Under NamespaceDefined Under Namespace

  
    
      Modules:Modules: ExpectHost
    
  
    
  

  
    
      Modules: ExpectHost
    
  
    
  








  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for stubbing a method on it.Used to wrap an object in preparation for stubbing a method on it.
Used to wrap an object in preparation for stubbing a method on it.
Used to wrap an object in preparation for stubbing a method on it.

  

  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for stubbing a method on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for stubbing a method on instances of it.Used to wrap a class in preparation for stubbing a method on instances of it.
Used to wrap a class in preparation for stubbing a method on instances of it.
Used to wrap a class in preparation for stubbing a method on instances of it.

  

  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for stubbing a method on instances of it.

  


      
        
  
  
  
  
  
  
  deprecateddeprecated
  

  
    Deprecated.Deprecated. Use Configuration#allow_message_expectations_on_nil instead.Use Configuration#allow_message_expectations_on_nil instead.
Use Configuration#allow_message_expectations_on_nil instead.
Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

  

  
  
  
  
  
  
  deprecated
  

  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.Constructs a test double against a specific class.
Constructs a test double against a specific class.
Constructs a test double against a specific class.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_receivedhave_received against a specific class.Constructs a test double that is optimized for use with have_received against a specific class.
Constructs a test double that is optimized for use with have_received against a specific class.
Constructs a test double that is optimized for use with have_received against a specific class.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs an instance of RSpec::Mocks::DoubleRSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.
Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.
Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.

  

  
  
  
  
  
  
  
  

  
    Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for setting a mock expectation on it.Used to wrap an object in preparation for setting a mock expectation on it.
Used to wrap an object in preparation for setting a mock expectation on it.
Used to wrap an object in preparation for setting a mock expectation on it.

  

  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for setting a mock expectation on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for setting a mock expectation on instances of it.Used to wrap a class in preparation for setting a mock expectation on instances of it.
Used to wrap a class in preparation for setting a mock expectation on instances of it.
Used to wrap a class in preparation for setting a mock expectation on instances of it.

  

  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for setting a mock expectation on instances of it.

  


      
        
  
  
  
  
  
  
  
  

  
    Verifies that the given object received the expected message during the course of the test.Verifies that the given object received the expected message during the course of the test.
Verifies that the given object received the expected message during the course of the test.
Verifies that the given object received the expected message during the course of the test.

  

  
  
  
  
  
  
  
  

  
    Verifies that the given object received the expected message during the course of the test.

  


      
        
  
  
  
  
  
  
  
  

  
    Hides the named constant with the given value.Hides the named constant with the given value.
Hides the named constant with the given value.
Hides the named constant with the given value.

  

  
  
  
  
  
  
  
  

  
    Hides the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.Constructs a test double against a specific class.
Constructs a test double against a specific class.
Constructs a test double against a specific class.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_receivedhave_received against a specific class.Constructs a test double that is optimized for use with have_received against a specific class.
Constructs a test double that is optimized for use with have_received against a specific class.
Constructs a test double that is optimized for use with have_received against a specific class.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific object.Constructs a test double against a specific object.
Constructs a test double against a specific object.
Constructs a test double against a specific object.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_receivedhave_received against a specific object.Constructs a test double that is optimized for use with have_received against a specific object.
Constructs a test double that is optimized for use with have_received against a specific object.
Constructs a test double that is optimized for use with have_received against a specific object.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to specify a message that you expect or allow an object to receive.Used to specify a message that you expect or allow an object to receive.
Used to specify a message that you expect or allow an object to receive.
Used to specify a message that you expect or allow an object to receive.

  

  
  
  
  
  
  
  
  

  
    Used to specify a message that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    stubs/mocks a chain of messages on an object or test double.stubs/mocks a chain of messages on an object or test double.
stubs/mocks a chain of messages on an object or test double.
stubs/mocks a chain of messages on an object or test double.

  

  
  
  
  
  
  
  
  

  
    stubs/mocks a chain of messages on an object or test double.

  


      
        
  
  
  
  
  
  
  
  

  
    Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.
Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.
Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.

  

  
  
  
  
  
  
  
  

  
    Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_receivedhave_received.Constructs a test double that is optimized for use with have_received.
Constructs a test double that is optimized for use with have_received.
Constructs a test double that is optimized for use with have_received.

  

  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received.

  


      
        
  
  
  
  
  
  
  
  

  
    Stubs the named constant with the given value.Stubs the named constant with the given value.
Stubs the named constant with the given value.
Stubs the named constant with the given value.

  

  
  
  
  
  
  
  
  

  
    Stubs the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.
Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.
Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.

  

  
  
  
  
  
  
  
  

  
    Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for stubbing a method on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for stubbing a method on instances of it.

  


      
        
  
  
  
  
  
  
  deprecated
  

  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for setting a mock expectation on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for setting a mock expectation on instances of it.

  


      
        
  
  
  
  
  
  
  
  

  
    Verifies that the given object received the expected message during the course of the test.

  


      
        
  
  
  
  
  
  
  
  

  
    Hides the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to specify a message that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    stubs/mocks a chain of messages on an object or test double.

  


      
        
  
  
  
  
  
  
  
  

  
    Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received.

  


      
        
  
  
  
  
  
  
  
  

  
    Stubs the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.

  


      
    
  


  
  
  
  
  
  
  
  
  Methods included from ArgumentMatchersMethods included from ArgumentMatchers
  #any_args, #anything, #array_including, #boolean, #duck_type, #hash_excluding, #hash_including, #instance_of, #kind_of, #no_args#any_args, #anything, #array_including, #boolean, #duck_type, #hash_excluding, #hash_including, #instance_of, #kind_of, #no_args


  
    Instance Method DetailsInstance Method Details

    
      
  
  
    
  
    Note:Note:
    If you disable the :expect:expect syntax this method will be undefined.If you disable the :expect syntax this method will be undefined.
If you disable the :expect syntax this method will be undefined.

  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.Used to wrap an object in preparation for stubbing a method
on it.


  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.


  

  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.


  


  
  
    Examples:Examples:
    
      
      allowallow((dbldbl))..toto receivereceive((:foo:foo))..withwith((55))..and_returnand_return((:return_value:return_value))allow(dbl).to receive(:foo).with(5).and_return(:return_value)allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  
    Examples:
    
      
      allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  



  
  
    Examples:
    
      
      allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309# File 'lib/rspec/mocks/example_methods.rb', line 309

# File 'lib/rspec/mocks/example_methods.rb', line 309


    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  


  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.


  


  
  
    Examples:
    
      
      allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  


    
      
  
  
    
  
    Note:Note:
    This is only available when you have enabled the expectexpect syntax.This is only available when you have enabled the expect syntax.
This is only available when you have enabled the expect syntax.

  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.Used to wrap a class in preparation for stubbing a method
on instances of it.


  
    
  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.


  

  
    
  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.


  


  
  
    Examples:Examples:
    
      
      allow_any_instance_ofallow_any_instance_of((MyClassMyClass))..toto receivereceive((:foo:foo))allow_any_instance_of(MyClass).to receive(:foo)allow_any_instance_of(MyClass).to receive(:foo)
    
  
    Examples:
    
      
      allow_any_instance_of(MyClass).to receive(:foo)
    
  



  
  
    Examples:
    
      
      allow_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327# File 'lib/rspec/mocks/example_methods.rb', line 327

# File 'lib/rspec/mocks/example_methods.rb', line 327


    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  


  
  
    
  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.


  


  
  
    Examples:
    
      
      allow_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  


    
      
  
  
    Deprecated.Deprecated. Use Configuration#allow_message_expectations_on_nil instead.Use Configuration#allow_message_expectations_on_nil instead.
Use Configuration#allow_message_expectations_on_nil instead.
Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  

  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  


  


  


  
    
      


201
202
203


201
202
203
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201# File 'lib/rspec/mocks/example_methods.rb', line 201

defdef allow_message_expectations_on_nilallow_message_expectations_on_nil
  RSpecRSpec::::MocksMocks..spacespace..proxy_forproxy_for((nilnil))..warn_about_expectationswarn_about_expectations == falsefalse
endend# File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  

  
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  


  
  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  


  


  
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
doubledouble.Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  

  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDoubleClassVerifyingDouble
ClassVerifyingDouble

      
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


79
80
81
82


79
80
81
82
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79# File 'lib/rspec/mocks/example_methods.rb', line 79

defdef class_doubleclass_double((doubled_classdoubled_class,, **argsargs))
  refref == ObjectReferenceObjectReference..forfor((doubled_classdoubled_class))
  ExampleMethodsExampleMethods..declare_verifying_doubledeclare_verifying_double((ClassVerifyingDoubleClassVerifyingDouble,, refref,, **argsargs))
endend# File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  

  
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  


  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_receivedhave_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  

  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ModuleModule)(String, Module)
      
      
      
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDoubleClassVerifyingDouble
ClassVerifyingDouble

      
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


191
192
193


191
192
193
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191# File 'lib/rspec/mocks/example_methods.rb', line 191

defdef class_spyclass_spy((**argsargs))
  class_doubleclass_double((**argsargs))..as_null_objectas_null_object
endend# File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  

  
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  


  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs an instance of RSpec::Mocks::DoubleRSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  
    Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  

  
    Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  


  
  
    Examples:Examples:
    
      
      bookbook == doubledouble((""bookbook"""book",, :title:title =>=> ""The RSpec BookThe RSpec Book"""The RSpec Book"))
bookbook..titletitle #=> "The RSpec Book"
#=> "The RSpec Book"

cardcard == doubledouble((""cardcard"""card",, :suit:suit =>=> ""SpadesSpades"""Spades",, :rank:rank =>=> ""AA"""A"))
cardcard..suitsuit  #=> "Spades"
#=> "Spades"
cardcard..rankrank  #=> "A"#=> "A"book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  
    Examples:
    
      
      book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  

  Overloads:Overloads:
  
    
      
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        (DoubleDouble)(Double)
      
      
      
    
      
      
        (Double)
      
      
      
    
  

  
    
      
      
        (Double)
      
      
      
    
  



  
  
    Examples:
    
      
      book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  

  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


34
35
36


34
35
36
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34# File 'lib/rspec/mocks/example_methods.rb', line 34

defdef doubledouble((**argsargs))
  ExampleMethodsExampleMethods..declare_doubledeclare_double((DoubleDouble,, **argsargs))
endend# File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  

  
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  


  
  
    Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  


  
  
    Examples:
    
      
      book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  

  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  


    
      
  
  
    
  
    Note:Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect:expect syntax
this method will be undefined.This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.
This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.Used to wrap an object in preparation for setting a mock expectation
on it.


  
    
  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.


  

  
    
  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto receivereceive((:foo:foo))..withwith((55))..and_returnand_return((:return_value:return_value))expect(obj).to receive(:foo).with(5).and_return(:return_value)expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  
    Examples:
    
      
      expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  



  
  
    Examples:
    
      
      expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297# File 'lib/rspec/mocks/example_methods.rb', line 297

# File 'lib/rspec/mocks/example_methods.rb', line 297


    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  


  
  
    
  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  


    
      
  
  
    
  
    Note:Note:
    If you disable the :expect:expect syntax this method will be undefined.If you disable the :expect syntax this method will be undefined.
If you disable the :expect syntax this method will be undefined.

  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  

  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  


  
  
    Examples:Examples:
    
      
      expect_any_instance_ofexpect_any_instance_of((MyClassMyClass))..toto receivereceive((:foo:foo))expect_any_instance_of(MyClass).to receive(:foo)expect_any_instance_of(MyClass).to receive(:foo)
    
  
    Examples:
    
      
      expect_any_instance_of(MyClass).to receive(:foo)
    
  



  
  
    Examples:
    
      
      expect_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318# File 'lib/rspec/mocks/example_methods.rb', line 318

# File 'lib/rspec/mocks/example_methods.rb', line 318


    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  


  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  


  
  
    Examples:
    
      
      expect_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  


    
      
  
  
    
  
    Note:Note:
    have_received(...).with(...)have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.
have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  
    
  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  

  
    
  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  


  
  
    Examples:Examples:
    
      
      invitationinvitation == doubledouble((''invitationinvitation'''invitation',, accept:accept: truetrue))
useruser..accept_invitationaccept_invitation((invitationinvitation))
expectexpect((invitationinvitation))..toto have_receivedhave_received((:accept:accept))

# You can also use most message expectations:
# You can also use most message expectations:
expectexpect((invitationinvitation))..toto have_receivedhave_received((:accept:accept))..withwith((mailermailer))..onceonceinvitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).onceinvitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
    Examples:
    
      
      invitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
Parameters:Parameters:

  
    
      
        method_namemethod_name
      
      
        (SymbolSymbol)(Symbol)
      
      
      
        —
        name of the method expected to have been
called.name of the method expected to have been
called.
name of the method expected to have been
called.

      
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  




  
  
    Examples:
    
      
      invitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  




  
    
      


281
282
283


281
282
283
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281# File 'lib/rspec/mocks/example_methods.rb', line 281

defdef have_receivedhave_received((method_namemethod_name,, &&blockblock))
  MatchersMatchers::::HaveReceivedHaveReceived..newnew((method_namemethod_name,, &&blockblock))
endend# File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  

  
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  


  
  
    
  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  


  
  
    Examples:
    
      
      invitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  




  
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  


    
      
  
  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.Like method stubs, the constant will be restored to its original value
when the example completes.


  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.


  

  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.


  


  
  
    Examples:Examples:
    
      
      hide_consthide_const((""MyClassMyClass"""MyClass")) # => MyClass is now an undefined constant# => MyClass is now an undefined constanthide_const("MyClass") # => MyClass is now an undefined constanthide_const("MyClass") # => MyClass is now an undefined constant
    
  
    Examples:
    
      
      hide_const("MyClass") # => MyClass is now an undefined constant
    
  
Parameters:Parameters:

  
    
      
        constant_nameconstant_name
      
      
        (StringString)(String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.
The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  




  
  
    Examples:
    
      
      hide_const("MyClass") # => MyClass is now an undefined constant
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  




  
    
      


256
257
258


256
257
258
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256# File 'lib/rspec/mocks/example_methods.rb', line 256

defdef hide_consthide_const((constant_nameconstant_name))
  ConstantMutatorConstantMutator..hidehide((constant_nameconstant_name))
endend# File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  

  
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  


  
  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.


  


  
  
    Examples:
    
      
      hide_const("MyClass") # => MyClass is now an undefined constant
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  




  
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
doubledouble.Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  

  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDoubleInstanceVerifyingDouble
InstanceVerifyingDouble

      
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


56
57
58
59


56
57
58
59
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56# File 'lib/rspec/mocks/example_methods.rb', line 56

defdef instance_doubleinstance_double((doubled_classdoubled_class,, **argsargs))
  refref == ObjectReferenceObjectReference..forfor((doubled_classdoubled_class))
  ExampleMethodsExampleMethods..declare_verifying_doubledeclare_verifying_double((InstanceVerifyingDoubleInstanceVerifyingDouble,, refref,, **argsargs))
endend# File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  

  
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  


  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_receivedhave_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  

  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        doubled_classdoubled_class
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDoubleInstanceVerifyingDouble
InstanceVerifyingDouble

      
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


144
145
146


144
145
146
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144# File 'lib/rspec/mocks/example_methods.rb', line 144

defdef instance_spyinstance_spy((**argsargs))
  instance_doubleinstance_double((**argsargs))..as_null_objectas_null_object
endend# File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  

  
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  


  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a doubledouble.Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  

  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDoubleObjectVerifyingDouble
ObjectVerifyingDouble

      
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


102
103
104
105


102
103
104
105
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102# File 'lib/rspec/mocks/example_methods.rb', line 102

defdef object_doubleobject_double((object_or_nameobject_or_name,, **argsargs))
  refref == ObjectReferenceObjectReference..forfor((object_or_nameobject_or_name,, :allow_direct_object_refs:allow_direct_object_refs))
  ExampleMethodsExampleMethods..declare_verifying_doubledeclare_verifying_double((ObjectVerifyingDoubleObjectVerifyingDouble,, refref,, **argsargs))
endend# File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  

  
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  


  
  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_receivedhave_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  
    Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  

  
    Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ObjectObject)(String, Object)
      
      
      
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        object_or_nameobject_or_name
      
      
        (StringString, ClassClass)(String, Class)
      
      
      
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDoubleObjectVerifyingDouble
ObjectVerifyingDouble

      
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


167
168
169


167
168
169
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167# File 'lib/rspec/mocks/example_methods.rb', line 167

defdef object_spyobject_spy((**argsargs))
  object_doubleobject_double((**argsargs))..as_null_objectas_null_object
endend# File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  

  
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  


  
  
    Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  


    
      
  
  
    
  
    Note:Note:
    If you disable the :expect:expect syntax this method will be undefined.If you disable the :expect syntax this method will be undefined.
If you disable the :expect syntax this method will be undefined.

  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receivereceive supports the same
fluent interface that should_receiveshould_receive and stubstub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  

  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto receivereceive((:hello:hello))..withwith((""worldworld"""world"))..exactlyexactly((33))..timestimesexpect(obj).to receive(:hello).with("world").exactly(3).timesexpect(obj).to receive(:hello).with("world").exactly(3).times
    
  
    Examples:
    
      
      expect(obj).to receive(:hello).with("world").exactly(3).times
    
  



  
  
    Examples:
    
      
      expect(obj).to receive(:hello).with("world").exactly(3).times
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336# File 'lib/rspec/mocks/example_methods.rb', line 336

# File 'lib/rspec/mocks/example_methods.rb', line 336


    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  


  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:hello).with("world").exactly(3).times
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  


    
      
  
  
    
  
    Note:Note:
    If you disable the :expect:expect syntax this method will be undefined.If you disable the :expect syntax this method will be undefined.
If you disable the :expect syntax this method will be undefined.

  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.stubs/mocks a chain of messages on an object or test double.

Warning:Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chainreceive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chainreceive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37)allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.barfoo.baz.bar, the stub will not work.Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.

Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  

  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.

Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  


  
  
    Examples:Examples:
    
      
      allowallow((doubledouble))..toto receive_message_chainreceive_message_chain((""foo.barfoo.bar"""foo.bar")) {{ :baz:baz }}
allowallow((doubledouble))..toto receive_message_chainreceive_message_chain((:foo:foo,, :bar:bar =>=> :baz:baz))
allowallow((doubledouble))..toto receive_message_chainreceive_message_chain((:foo:foo,, :bar:bar)) {{ :baz:baz }}

# Given any of ^^ these three forms ^^:
# Given any of ^^ these three forms ^^:
doubledouble..foofoo..barbar # => :baz
# => :baz

# Common use in Rails/ActiveRecord:
# Common use in Rails/ActiveRecord:
allowallow((ArticleArticle))..toto receive_message_chainreceive_message_chain((""recent.publishedrecent.published"""recent.published")) {{ [[ArticleArticle..newnew]] }}allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  
    Examples:
    
      
      allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  



  
  
    Examples:
    
      
      allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361# File 'lib/rspec/mocks/example_methods.rb', line 361

# File 'lib/rspec/mocks/example_methods.rb', line 361


    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  


  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.

Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  


  
  
    Examples:
    
      
      allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  


    
      
  
  
    
  
    Note:Note:
    If you disable the :expect:expect syntax this method will be undefined.If you disable the :expect syntax this method will be undefined.
If you disable the :expect syntax this method will be undefined.

  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receivereceive,
you cannot apply further customizations using a block or the fluent
interface.Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  

  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  


  
  
    Examples:Examples:
    
      
      allowallow((objobj))..toto receive_messagesreceive_messages((:speak:speak =>=> ""Hello WorldHello World"""Hello World"))
allowallow((objobj))..toto receive_messagesreceive_messages((:speak:speak =>=> ""HelloHello"""Hello",, :meow:meow =>=> ""MeowMeow"""Meow"))allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  
    Examples:
    
      
      allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  



  
  
    Examples:
    
      
      allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  



  
    
      






    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348# File 'lib/rspec/mocks/example_methods.rb', line 348

# File 'lib/rspec/mocks/example_methods.rb', line 348


    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  

  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  


  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  


  
  
    Examples:
    
      
      allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  


    
      
  
  
    Constructs a test double that is optimized for use with
have_receivedhave_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  
    Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  

  
    Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  


  
  Overloads:Overloads:
  
    
      
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        namename
      
      
        (String/SymbolString/Symbol)(String/Symbol)
      
      
      
        —
        name or description to be used in failure messagesname or description to be used in failure messages
name or description to be used in failure messages

      
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubsstubs
      
      
        (HashHash)(Hash)
      
      
      
        —
        hash of message/return-value pairshash of message/return-value pairs
hash of message/return-value pairs

      
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:Returns:

  
    
      
      
        (DoubleDouble)(Double)
      
      
      
    
      
      
        (Double)
      
      
      
    
  

  
    
      
      
        (Double)
      
      
      
    
  



  
  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


120
121
122


120
121
122
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120# File 'lib/rspec/mocks/example_methods.rb', line 120

defdef spyspy((**argsargs))
  doubledouble((**argsargs))..as_null_objectas_null_object
endend# File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  

  
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  


  
  
    Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  


  
  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  


    
      
  
  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  

  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  


  
  
    Examples:Examples:
    
      
      stub_conststub_const((""MyClassMyClass"""MyClass",, ClassClass..newnew)) # => Replaces (or defines) MyClass with a new class object.
# => Replaces (or defines) MyClass with a new class object.
stub_conststub_const((""SomeModel::PER_PAGESomeModel::PER_PAGE"""SomeModel::PER_PAGE",, 55)) # => Sets SomeModel::PER_PAGE to 5.
# => Sets SomeModel::PER_PAGE to 5.

classclass CardDeckCardDeck
  SUITSSUITS == [[:Spades:Spades,, :Diamonds:Diamonds,, :Clubs:Clubs,, :Hearts:Hearts]]
  NUM_CARDSNUM_CARDS == 5252
endend

stub_conststub_const((""CardDeckCardDeck"""CardDeck",, ClassClass..newnew))
CardDeckCardDeck::::SUITSSUITS # => uninitialized constant error
# => uninitialized constant error
CardDeckCardDeck::::NUM_CARDSNUM_CARDS # => uninitialized constant error
# => uninitialized constant error

stub_conststub_const((""CardDeckCardDeck"""CardDeck",, ClassClass..newnew,, :transfer_nested_constants:transfer_nested_constants =>=> truetrue))
CardDeckCardDeck::::SUITSSUITS # => our suits array
# => our suits array
CardDeckCardDeck::::NUM_CARDSNUM_CARDS # => 52
# => 52

stub_conststub_const((""CardDeckCardDeck"""CardDeck",, ClassClass..newnew,, :transfer_nested_constants:transfer_nested_constants =>=> [[:SUITS:SUITS]]))
CardDeckCardDeck::::SUITSSUITS # => our suits array
# => our suits array
CardDeckCardDeck::::NUM_CARDSNUM_CARDS # => uninitialized constant error# => uninitialized constant errorstub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant errorstub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
    Examples:
    
      
      stub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
Parameters:Parameters:

  
    
      
        constant_nameconstant_name
      
      
        (StringString)(String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.
The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        valuevalue
      
      
        (ObjectObject)(Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.
The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        optionsoptions
      
      
        (HashHash)(Hash)
      
      
        (defaults to: {}{})(defaults to: {})
      
      
        —
        Stubbing options.Stubbing options.
Stubbing options.

      
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  


  
    
    
    
    
    
    
    Options Hash (optionsoptions):Options Hash (options):
    
      
        
          :transfer_nested_constants:transfer_nested_constants
          (BooleanBoolean, Array<Symbol>Array<Symbol>)(Boolean, Array<Symbol>)
          
            
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).
Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
      
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
  

Returns:Returns:

  
    
      
      
        (ObjectObject)(Object)
      
      
      
        —
        the stubbed value of the constantthe stubbed value of the constant
the stubbed value of the constant

      
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  

  
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  



  
  
    Examples:
    
      
      stub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  


  
    
    
    
    
    
    
    Options Hash (options):
    
      
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
  

Returns:

  
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  



  
    
      


241
242
243


241
242
243
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241# File 'lib/rspec/mocks/example_methods.rb', line 241

defdef stub_conststub_const((constant_nameconstant_name,, valuevalue,, optionsoptions=={{}}))
  ConstantMutatorConstantMutator..stubstub((constant_nameconstant_name,, valuevalue,, optionsoptions))
endend# File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  

  
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  


  
  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  


  
  
    Examples:
    
      
      stub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  


  
    
    
    
    
    
    
    Options Hash (options):
    
      
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
  

Returns:

  
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  



  
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  


    
      
  
  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  

  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  


  


  


  
    
      


289
290
291
292
293
294
295


289
290
291
292
293
294
295
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289# File 'lib/rspec/mocks/example_methods.rb', line 289

defdef without_partial_double_verificationwithout_partial_double_verification
  original_stateoriginal_state == MocksMocks..configurationconfiguration..temporarily_suppress_partial_double_verificationtemporarily_suppress_partial_double_verification
  MocksMocks..configurationconfiguration..temporarily_suppress_partial_double_verificationtemporarily_suppress_partial_double_verification == truetrue
  yieldyield
ensureensure
  MocksMocks..configurationconfiguration..temporarily_suppress_partial_double_verificationtemporarily_suppress_partial_double_verification == original_stateoriginal_state
endend# File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  

  
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  


  
  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  


  


  
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  


    
  
    Instance Method Details

    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.


  


  
  
    Examples:
    
      
      allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  


    
      
  
  
    
  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.


  


  
  
    Examples:
    
      
      allow_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  


    
      
  
  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  


  


  
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  


  
  
    Examples:
    
      
      book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  

  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  


    
      
  
  
    
  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  


  
  
    Examples:
    
      
      expect_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  


    
      
  
  
    
  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  


  
  
    Examples:
    
      
      invitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  




  
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  


    
      
  
  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.


  


  
  
    Examples:
    
      
      hide_const("MyClass") # => MyClass is now an undefined constant
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  




  
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:hello).with("world").exactly(3).times
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.

Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  


  
  
    Examples:
    
      
      allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  


  
  
    Examples:
    
      
      allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  


    
      
  
  
    Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  


  
  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  


    
      
  
  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  


  
  
    Examples:
    
      
      stub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  


  
    
    
    
    
    
    
    Options Hash (options):
    
      
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
  

Returns:

  
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  



  
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  


    
      
  
  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  


  


  
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  


    
  

Module: RSpec::Mocks::ExampleMethods
  
  
  


  

  
  
  
  
  
      Includes:
      ArgumentMatchers
  
  
  

  

  
  
    Defined in:
    lib/rspec/mocks/example_methods.rb
  
  


Overview
  
    Contains methods intended to be used from within code examples.
Mix this in to your test context (such as a test framework base class)
to use rspec-mocks with your test framework. If you're using rspec-core,
it'll take care of doing this for you.


  


  

Defined Under Namespace

  
    
      Modules: ExpectHost
    
  
    
  








  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for stubbing a method on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for stubbing a method on instances of it.

  


      
        
  
  
  
  
  
  
  deprecated
  

  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs an instance of RSpec::Mocks::Double configured with an optional name, used for reporting in failure messages, and an optional hash of message/return-value pairs.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap an object in preparation for setting a mock expectation on it.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to wrap a class in preparation for setting a mock expectation on instances of it.

  


      
        
  
  
  
  
  
  
  
  

  
    Verifies that the given object received the expected message during the course of the test.

  


      
        
  
  
  
  
  
  
  
  

  
    Hides the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific class.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received against a specific object.

  


      
        
  
  
  
  
  
  
  
  

  
    Used to specify a message that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    stubs/mocks a chain of messages on an object or test double.

  


      
        
  
  
  
  
  
  
  
  

  
    Shorthand syntax used to setup message(s), and their return value(s), that you expect or allow an object to receive.

  


      
        
  
  
  
  
  
  
  
  

  
    Constructs a test double that is optimized for use with have_received.

  


      
        
  
  
  
  
  
  
  
  

  
    Stubs the named constant with the given value.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns off the verifying of partial doubles for the duration of the block, this is useful in situations where methods are defined at run time and you wish to define stubs for them but not turn off partial doubles for the entire run suite.

  


      
    
  


  
  
  
  
  
  
  
  
  Methods included from ArgumentMatchers
  #any_args, #anything, #array_including, #boolean, #duck_type, #hash_excluding, #hash_including, #instance_of, #kind_of, #no_args


  
    Instance Method Details

    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap an object in preparation for stubbing a method
on it.


  


  
  
    Examples:
    
      
      allow(dbl).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 309


    
  


    
      
  
  
    
  
    Note:
    This is only available when you have enabled the expect syntax.

  

Used to wrap a class in preparation for stubbing a method
on instances of it.


  


  
  
    Examples:
    
      
      allow_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 327


    
  


    
      
  
  
    Deprecated. Use Configuration#allow_message_expectations_on_nil instead.

Disables warning messages about expectations being set on nil.

By default warning messages are issued when expectations are set on
nil.  This is to prevent false-positives and to catch potential bugs
early on.


  


  


  
    
      


201
202
203
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 201

def allow_message_expectations_on_nil
  RSpec::Mocks.space.proxy_for(nil).warn_about_expectations = false
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only class methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


79
80
81
82
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 79

def class_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(ClassVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded,
only class methods defined on the class are allowed to be stubbed.
With a normal double one has to stub methods in order to be able to spy
them. An class_spy automatically spies on all class methods to which the
class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Module)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ClassVerifyingDouble

      
    
  



  
    
      


191
192
193
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 191

def class_spy(*args)
  class_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs an instance of RSpec::Mocks::Double configured
with an optional name, used for reporting in failure messages, and an optional
hash of message/return-value pairs.


  


  
  
    Examples:
    
      
      book = double("book", :title => "The RSpec Book")
book.title #=> "The RSpec Book"

card = double("card", :suit => "Spades", :rank => "A")
card.suit  #=> "Spades"
card.rank  #=> "A"
    
  

  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


34
35
36
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 34

def double(*args)
  ExampleMethods.declare_double(Double, *args)
end
    
  


    
      
  
  
    
  
    Note:
    This method is usually provided by rspec-expectations. However,
if you use rspec-mocks without rspec-expectations, there's a definition
of it that is made available here. If you disable the :expect syntax
this method will be undefined.

  

Used to wrap an object in preparation for setting a mock expectation
on it.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:foo).with(5).and_return(:return_value)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 297


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to wrap a class in preparation for setting a mock expectation
on instances of it.


  


  
  
    Examples:
    
      
      expect_any_instance_of(MyClass).to receive(:foo)
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 318


    
  


    
      
  
  
    
  
    Note:
    have_received(...).with(...) is unable to work properly when
passed arguments are mutated after the spy records the received message.

  

Verifies that the given object received the expected message during the
course of the test. On a spy objects or as null object doubles this
works for any method, on other objects the method must have
been stubbed beforehand in order for messages to be verified.

Stubbing and verifying messages received in this way implements the
Test Spy pattern.


  


  
  
    Examples:
    
      
      invitation = double('invitation', accept: true)
user.accept_invitation(invitation)
expect(invitation).to have_received(:accept)

# You can also use most message expectations:
expect(invitation).to have_received(:accept).with(mailer).once
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        name of the method expected to have been
called.

      
    
  




  
    
      


281
282
283
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 281

def have_received(method_name, &block)
  Matchers::HaveReceived.new(method_name, &block)
end
    
  


    
      
  
  
    Hides the named constant with the given value. The constant will be
undefined for the duration of the test.

Like method stubs, the constant will be restored to its original value
when the example completes.


  


  
  
    Examples:
    
      
      hide_const("MyClass") # => MyClass is now an undefined constant
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant.
The current constant scoping at the point of call is not considered.

      
    
  




  
    
      


256
257
258
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 256

def hide_const(constant_name)
  ConstantMutator.hide(constant_name)
end
    
  


    
      
  
  
    Constructs a test double against a specific class. If the given class
name has been loaded, only instance methods defined on the class are
allowed to be stubbed. In all other ways it behaves like a
double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


56
57
58
59
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 56

def instance_double(doubled_class, *args)
  ref = ObjectReference.for(doubled_class)
  ExampleMethods.declare_verifying_double(InstanceVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific class. If the given class name has been loaded, only
instance methods defined on the class are allowed to be stubbed.  With
a normal double one has to stub methods in order to be able to spy
them. An instance_spy automatically spies on all instance methods to
which the class responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        doubled_class
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        InstanceVerifyingDouble

      
    
  



  
    
      


144
145
146
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 144

def instance_spy(*args)
  instance_double(*args).as_null_object
end
    
  


    
      
  
  
    Constructs a test double against a specific object. Only the methods
the object responds to are allowed to be stubbed. If a String argument
is provided, it is assumed to reference a constant object which is used
for verification. In all other ways it behaves like a double.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


102
103
104
105
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 102

def object_double(object_or_name, *args)
  ref = ObjectReference.for(object_or_name, :allow_direct_object_refs)
  ExampleMethods.declare_verifying_double(ObjectVerifyingDouble, ref, *args)
end
    
  


    
      
  
  
    Constructs a test double that is optimized for use with have_received
against a specific object. Only instance methods defined on the object
are allowed to be stubbed.  With a normal double one has to stub
methods in order to be able to spy them. An object_spy automatically
spies on all methods to which the object responds.


  


  
  Overloads:
  
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Object)
      
      
      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        object_or_name
      
      
        (String, Class)
      
      
      
    
  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        
      
      
      
        
        ObjectVerifyingDouble

      
    
  



  
    
      


167
168
169
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 167

def object_spy(*args)
  object_double(*args).as_null_object
end
    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Used to specify a message that you expect or allow an object
to receive. The object returned by receive supports the same
fluent interface that should_receive and stub have always
supported, allowing you to constrain the arguments or number of
times, and configure how the object should respond to the message.


  


  
  
    Examples:
    
      
      expect(obj).to receive(:hello).with("world").exactly(3).times
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 336


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

stubs/mocks a chain of messages on an object or test double.

Warning:

Chains can be arbitrarily long, which makes it quite painless to
violate the Law of Demeter in violent ways, so you should consider any
use of receive_message_chain a code smell. Even though not all code smells
indicate real problems (think fluent interfaces), receive_message_chain still
results in brittle examples.  For example, if you write
allow(foo).to receive_message_chain(:bar, :baz => 37) in a spec and then the
implementation calls foo.baz.bar, the stub will not work.


  


  
  
    Examples:
    
      
      allow(double).to receive_message_chain("foo.bar") { :baz }
allow(double).to receive_message_chain(:foo, :bar => :baz)
allow(double).to receive_message_chain(:foo, :bar) { :baz }

# Given any of ^^ these three forms ^^:
double.foo.bar # => :baz

# Common use in Rails/ActiveRecord:
allow(Article).to receive_message_chain("recent.published") { [Article.new] }
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 361


    
  


    
      
  
  
    
  
    Note:
    If you disable the :expect syntax this method will be undefined.

  

Shorthand syntax used to setup message(s), and their return value(s),
that you expect or allow an object to receive. The method takes a hash
of messages and their respective return values. Unlike with receive,
you cannot apply further customizations using a block or the fluent
interface.


  


  
  
    Examples:
    
      
      allow(obj).to receive_messages(:speak => "Hello World")
allow(obj).to receive_messages(:speak => "Hello", :meow => "Meow")
    
  



  
    
      



    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 348


    
  


    
      
  
  
    Constructs a test double that is optimized for use with
have_received. With a normal double one has to stub methods in order
to be able to spy them. A spy automatically spies on all methods.


  


  
  Overloads:
  
    
      
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        name
      
      
        (String/Symbol)
      
      
      
        —
        name or description to be used in failure messages

      
    
  
    
      
        stubs
      
      
        (Hash)
      
      
      
        —
        hash of message/return-value pairs

      
    
  




      
    
  

Returns:

  
    
      
      
        (Double)
      
      
      
    
  



  
    
      


120
121
122
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 120

def spy(*args)
  double(*args).as_null_object
end
    
  


    
      
  
  
    Stubs the named constant with the given value.
Like method stubs, the constant will be restored
to its original value (or lack of one, if it was
undefined) when the example completes.


  


  
  
    Examples:
    
      
      stub_const("MyClass", Class.new) # => Replaces (or defines) MyClass with a new class object.
stub_const("SomeModel::PER_PAGE", 5) # => Sets SomeModel::PER_PAGE to 5.

class CardDeck
  SUITS = [:Spades, :Diamonds, :Clubs, :Hearts]
  NUM_CARDS = 52
end

stub_const("CardDeck", Class.new)
CardDeck::SUITS # => uninitialized constant error
CardDeck::NUM_CARDS # => uninitialized constant error

stub_const("CardDeck", Class.new, :transfer_nested_constants => true)
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => 52

stub_const("CardDeck", Class.new, :transfer_nested_constants => [:SUITS])
CardDeck::SUITS # => our suits array
CardDeck::NUM_CARDS # => uninitialized constant error
    
  
Parameters:

  
    
      
        constant_name
      
      
        (String)
      
      
      
        —
        The fully qualified name of the constant. The current
constant scoping at the point of call is not considered.

      
    
  
    
      
        value
      
      
        (Object)
      
      
      
        —
        The value to make the constant refer to. When the
example completes, the constant will be restored to its prior state.

      
    
  
    
      
        options
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        Stubbing options.

      
    
  


  
    
    
    
    
    
    
    Options Hash (options):
    
      
        
          :transfer_nested_constants
          (Boolean, Array<Symbol>)
          
            
          
          
            — Determines
what nested constants, if any, will be transferred from the original value
of the constant to the new value of the constant. This only works if both
the original and new values are modules (or classes).

          
        
      
    
  

Returns:

  
    
      
      
        (Object)
      
      
      
        —
        the stubbed value of the constant

      
    
  



  
    
      


241
242
243
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 241

def stub_const(constant_name, value, options={})
  ConstantMutator.stub(constant_name, value, options)
end
    
  


    
      
  
  
    Turns off the verifying of partial doubles for the duration of the
block, this is useful in situations where methods are defined at run
time and you wish to define stubs for them but not turn off partial
doubles for the entire run suite. (e.g. view specs in rspec-rails).


  


  


  
    
      


289
290
291
292
293
294
295
    
    
      # File 'lib/rspec/mocks/example_methods.rb', line 289

def without_partial_double_verification
  original_state = Mocks.configuration.temporarily_suppress_partial_double_verification
  Mocks.configuration.temporarily_suppress_partial_double_verification = true
  yield
ensure
  Mocks.configuration.temporarily_suppress_partial_double_verification = original_state
end
    
  


    
  

