Module: RSpec::Rails::ViewAssigns
  
  
  
Module: RSpec::Rails::ViewAssigns
  
  
  


  

  
  
  
  
  

  
  
    Included in:Included in:
    HelperExampleGroup, ViewExampleGroupHelperExampleGroup, ViewExampleGroup
  
    Included in:
    HelperExampleGroup, ViewExampleGroup
  
  

  
  
    Defined in:Defined in:
    lib/rspec/rails/view_assigns.rblib/rspec/rails/view_assigns.rb
  
    Defined in:
    lib/rspec/rails/view_assigns.rb
  
  

  

  
  
  
  
  

  
  
    Included in:
    HelperExampleGroup, ViewExampleGroup
  
  

  
  
    Defined in:
    lib/rspec/rails/view_assigns.rb
  
  


OverviewOverview
  
    Helpers for making instance variables available to views.Helpers for making instance variables available to views.


  
    Helpers for making instance variables available to views.


  

  
    Helpers for making instance variables available to views.


  


  


  








  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Assigns a value to an instance variable in the scope of the view being rendered.Assigns a value to an instance variable in the scope of the view being rendered.
Assigns a value to an instance variable in the scope of the view being rendered.
Assigns a value to an instance variable in the scope of the view being rendered.

  

  
  
  
  
  
  
  
  

  
    Assigns a value to an instance variable in the scope of the view being rendered.

  


      
        
  
  
  
  
  
  
  
  

  
    Compat-shim for AbstractController::Rendering#view_assigns.Compat-shim for AbstractController::Rendering#view_assigns.
Compat-shim for AbstractController::Rendering#view_assigns.
Compat-shim for AbstractController::Rendering#view_assigns.

  

  
  
  
  
  
  
  
  

  
    Compat-shim for AbstractController::Rendering#view_assigns.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Assigns a value to an instance variable in the scope of the view being rendered.

  


      
        
  
  
  
  
  
  
  
  

  
    Compat-shim for AbstractController::Rendering#view_assigns.

  


      
    
  



  
    Instance Method DetailsInstance Method Details

    
      
  
  
    Assigns a value to an instance variable in the scope of the view being rendered.Assigns a value to an instance variable in the scope of the view being rendered.


  
    Assigns a value to an instance variable in the scope of the view being rendered.


  

  
    Assigns a value to an instance variable in the scope of the view being rendered.


  


  
  
    Examples:Examples:
    
      
      
assignassign((:widget:widget,, stub_modelstub_model((WidgetWidget))))
assign(:widget, stub_model(Widget))
assign(:widget, stub_model(Widget))
    
  
    Examples:
    
      
      
assign(:widget, stub_model(Widget))
    
  



  
  
    Examples:
    
      
      
assign(:widget, stub_model(Widget))
    
  



  
    
      


11
12
13


11
12
13
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11# File 'lib/rspec/rails/view_assigns.rb', line 11

defdef assignassign((keykey,, valuevalue))
  _encapsulated_assigns_encapsulated_assigns[[keykey]] == valuevalue
endend# File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  

  
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  


  
  
    Assigns a value to an instance variable in the scope of the view being rendered.


  


  
  
    Examples:
    
      
      
assign(:widget, stub_model(Widget))
    
  



  
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  


    
      
  
  
    Compat-shim for AbstractController::Rendering#view_assigns.Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with._assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  
    Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  

  
    Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  


  


  


  
    
      


27
28
29
30
31


27
28
29
30
31
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27# File 'lib/rspec/rails/view_assigns.rb', line 27

defdef view_assignsview_assigns
  supersuper..mergemerge((_encapsulated_assigns_encapsulated_assigns))
rescuerescue
  _assigns_assigns
endend# File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  

  
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  


  
  
    Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  


  


  
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  


    
  
    Instance Method Details

    
      
  
  
    Assigns a value to an instance variable in the scope of the view being rendered.


  


  
  
    Examples:
    
      
      
assign(:widget, stub_model(Widget))
    
  



  
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  


    
      
  
  
    Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  


  


  
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  


    
  

Module: RSpec::Rails::ViewAssigns
  
  
  


  

  
  
  
  
  

  
  
    Included in:
    HelperExampleGroup, ViewExampleGroup
  
  

  
  
    Defined in:
    lib/rspec/rails/view_assigns.rb
  
  


Overview
  
    Helpers for making instance variables available to views.


  


  








  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Assigns a value to an instance variable in the scope of the view being rendered.

  


      
        
  
  
  
  
  
  
  
  

  
    Compat-shim for AbstractController::Rendering#view_assigns.

  


      
    
  



  
    Instance Method Details

    
      
  
  
    Assigns a value to an instance variable in the scope of the view being rendered.


  


  
  
    Examples:
    
      
      
assign(:widget, stub_model(Widget))
    
  



  
    
      


11
12
13
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 11

def assign(key, value)
  _encapsulated_assigns[key] = value
end
    
  


    
      
  
  
    Compat-shim for AbstractController::Rendering#view_assigns.

_assigns was deprecated in favor of view_assigns after Rails-3.0.0 was released. Since we are not able to predict when the _assigns/view_assigns patch will be released (I thought it would have been in 3.0.1, but 3.0.1 bypassed this change for a security fix), this bit ensures that we do the right thing without knowing anything about the Rails version we are dealing with.

Once that change is released, this can be changed to something that checks for the Rails version when the module is being interpreted, as it was before commit dd0095.


  


  


  
    
      


27
28
29
30
31
    
    
      # File 'lib/rspec/rails/view_assigns.rb', line 27

def view_assigns
  super.merge(_encapsulated_assigns)
rescue
  _assigns
end
    
  


    
  

