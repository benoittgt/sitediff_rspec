Module: RSpec::Core::Sandbox
  
  
  
Module: RSpec::Core::Sandbox
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/core/sandbox.rblib/rspec/core/sandbox.rb
  
    Defined in:
    lib/rspec/core/sandbox.rb
  
  

  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/sandbox.rb
  
  


OverviewOverview
  
    
  
    Note:Note:
    
This module is not normally available. You must require rspec/core/sandboxrspec/core/sandbox to load it.This module is not normally available. You must require rspec/core/sandbox to load it.

This module is not normally available. You must require rspec/core/sandbox to load it.

  
    Note:
    
This module is not normally available. You must require rspec/core/sandbox to load it.

  


A sandbox isolates the enclosed code into an environment that looks 'new' meaning globally accessed objects are reset for the duration of the sandbox.A sandbox isolates the enclosed code into an environment that looks 'new' meaning globally accessed objects are reset for the duration of the sandbox.


  
    
  
    Note:
    
This module is not normally available. You must require rspec/core/sandbox to load it.

  


A sandbox isolates the enclosed code into an environment that looks 'new' meaning globally accessed objects are reset for the duration of the sandbox.


  

  
    
  
    Note:
    
This module is not normally available. You must require rspec/core/sandbox to load it.

  


A sandbox isolates the enclosed code into an environment that looks 'new' meaning globally accessed objects are reset for the duration of the sandbox.


  


  


  








  
    
      Class Method Summary
      
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    
Execute a provided block with RSpec global objects (configuration, world) reset.Execute a provided block with RSpec global objects (configuration, world) reset.

Execute a provided block with RSpec global objects (configuration, world) reset.

Execute a provided block with RSpec global objects (configuration, world) reset.

  

  
  
  
  
  
  
  
  

  
    
Execute a provided block with RSpec global objects (configuration, world) reset.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    
Execute a provided block with RSpec global objects (configuration, world) reset.

  


      
    
  



  
    Class Method DetailsClass Method Details

    
      
  
  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

SandboxSandbox..sandboxedsandboxed dodo ||configconfig||
  configconfig..beforebefore((:context:context)) {{ RSpecRSpec..current_examplecurrent_example == nilnil }}
endend
Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end
Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  

  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  


  


  


  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21# File 'lib/rspec/core/sandbox.rb', line 21

defdef selfself..sandboxedsandboxed
  orig_configorig_config  == RSpecRSpec..configurationconfiguration
  orig_worldorig_world   == RSpecRSpec..worldworld
  orig_exampleorig_example == RSpecRSpec..current_examplecurrent_example

  RSpecRSpec..configurationconfiguration == RSpecRSpec::::CoreCore::::ConfigurationConfiguration..newnew
  RSpecRSpec..worldworld         == RSpecRSpec::::CoreCore::::WorldWorld..newnew((RSpecRSpec..configurationconfiguration))

  yieldyield RSpecRSpec..configurationconfiguration
ensureensure
  RSpecRSpec..configurationconfiguration   == orig_configorig_config
  RSpecRSpec..worldworld           == orig_worldorig_world
  RSpecRSpec..current_examplecurrent_example == orig_exampleorig_example
endend# File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  

  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  


  
  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  


  


  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  


    
  
    Class Method Details

    
      
  
  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  


  


  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  


    
  

Module: RSpec::Core::Sandbox
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/sandbox.rb
  
  


Overview
  
    
  
    Note:
    
This module is not normally available. You must require rspec/core/sandbox to load it.

  


A sandbox isolates the enclosed code into an environment that looks 'new' meaning globally accessed objects are reset for the duration of the sandbox.


  


  








  
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    
Execute a provided block with RSpec global objects (configuration, world) reset.

  


      
    
  



  
    Class Method Details

    
      
  
  
    
Execute a provided block with RSpec global objects (configuration, world) reset. This is used to test RSpec with RSpec.

When calling this the configuration is passed into the provided block. Use this to set custom configs for your sandboxed examples.

Sandbox.sandboxed do |config|
  config.before(:context) { RSpec.current_example = nil }
end



  


  


  
    
      


21
22
23
24
25
26
27
28
29
30
31
32
33
34
    
    
      # File 'lib/rspec/core/sandbox.rb', line 21

def self.sandboxed
  orig_config  = RSpec.configuration
  orig_world   = RSpec.world
  orig_example = RSpec.current_example

  RSpec.configuration = RSpec::Core::Configuration.new
  RSpec.world         = RSpec::Core::World.new(RSpec.configuration)

  yield RSpec.configuration
ensure
  RSpec.configuration   = orig_config
  RSpec.world           = orig_world
  RSpec.current_example = orig_example
end
    
  


    
  

