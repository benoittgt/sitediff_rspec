Class: RSpec::Matchers::BuiltIn::RespondTo
  
  
  PrivatePrivate
Class: RSpec::Matchers::BuiltIn::RespondTo
  
  
  Private


  
  
    Inherits:Inherits:
    
      BaseMatcherBaseMatcher
      
        
          ObjectObject
          
            BaseMatcherBaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondToRSpec::Matchers::BuiltIn::RespondTo
          
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondTo
          
        
        show allshow all
      
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondTo
          
        
        show all
      
    
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondTo
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/matchers/built_in/respond_to.rblib/rspec/matchers/built_in/respond_to.rb
  
    Defined in:
    lib/rspec/matchers/built_in/respond_to.rb
  
  

  
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondTo
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/matchers/built_in/respond_to.rb
  
  


OverviewOverview
  
    
  This class is part of a private API.This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for respond_torespond_to.
Not intended to be instantiated directly.Provides the implementation for respond_to.
Not intended to be instantiated directly.


  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for respond_to.
Not intended to be instantiated directly.


  

  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for respond_to.
Not intended to be instantiated directly.


  


  


  




  Constant SummaryConstant Summary
  
  Constants inherited
     from BaseMatcherConstants inherited
     from BaseMatcher
  BaseMatcher::UNDEFINEDBaseMatcher::UNDEFINED





  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    No-op.No-op.
No-op.
No-op.

  

  
  
  
  
  
  
  
  

  
    No-op.

  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
    constructorconstructor
  
  
  
  
  
  privateprivate

  
    A new instance of RespondTo.A new instance of RespondTo.
A new instance of RespondTo.
A new instance of RespondTo.

  

  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of RespondTo.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies the number of expected arguments.Specifies the number of expected arguments.
Specifies the number of expected arguments.
Specifies the number of expected arguments.

  

  
  
  
  
  
  
  
  

  
    Specifies the number of expected arguments.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the method accepts any keyword, i.e.Specifies that the method accepts any keyword, i.e.
Specifies that the method accepts any keyword, i.e.
Specifies that the method accepts any keyword, i.e.

  

  
  
  
  
  
  
  
  

  
    Specifies that the method accepts any keyword, i.e.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies keyword arguments, if any.Specifies keyword arguments, if any.
Specifies keyword arguments, if any.
Specifies keyword arguments, if any.

  

  
  
  
  
  
  
  
  

  
    Specifies keyword arguments, if any.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the number of arguments has no upper limit, i.e.Specifies that the number of arguments has no upper limit, i.e.
Specifies that the number of arguments has no upper limit, i.e.
Specifies that the number of arguments has no upper limit, i.e.

  

  
  
  
  
  
  
  
  

  
    Specifies that the number of arguments has no upper limit, i.e.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    No-op.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of RespondTo.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies the number of expected arguments.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the method accepts any keyword, i.e.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies keyword arguments, if any.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the number of arguments has no upper limit, i.e.

  


      
    
  


  
  
  
  
  
  
  
  
  Methods inherited from BaseMatcherMethods inherited from BaseMatcher
  #diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?#diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Methods included from ComposableMethods included from Composable
  #===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?#===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?

  Constructor DetailsConstructor Details
  
    
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondToReturns a new instance of RespondTo


  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondTo


  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondTo


  


  


  


  
    
      


10
11
12
13
14
15
16


10
11
12
13
14
15
16
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10# File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

defdef initializeinitialize((**namesnames))
  @names@names == namesnames
  @expected_arity@expected_arity == nilnil
  @expected_keywords@expected_keywords == [[]]
  @unlimited_arguments@unlimited_arguments == nilnil
  @arbitrary_keywords@arbitrary_keywords == nilnil
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  

  
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondTo


  


  


  
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  


  

  Constructor Details
  
    
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondTo


  


  


  
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  


  



  
    Instance Method DetailsInstance Method Details

    
      
  
  
    No-op. Intended to be used as syntactic sugar when using withwith.No-op. Intended to be used as syntactic sugar when using with.


  
    No-op. Intended to be used as syntactic sugar when using with.


  

  
    No-op. Intended to be used as syntactic sugar when using with.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..withwith((33))..argumentsargumentsexpect(obj).to respond_to(:message).with(3).argumentsexpect(obj).to respond_to(:message).with(3).arguments
    
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


70
71
72


70
71
72
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70# File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

defdef argumentargument
  selfself
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  

  
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  


  
  
    No-op. Intended to be used as syntactic sugar when using with.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


99
100
101


99
100
101
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99# File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

defdef descriptiondescription
  ""respond to respond to #{#{pp_namespp_names}}#{#{with_aritywith_arity}}"""respond to #{pp_names}#{with_arity}"
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  

  
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


87
88
89


87
88
89
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87# File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

defdef failure_messagefailure_message
  ""expected expected #{#{actual_formattedactual_formatted}} to respond to  to respond to #{#{@failing_method_names@failing_method_names..mapmap {{ ||namename|| description_ofdescription_of((namename)) }}..joinjoin(('', , ''', '))}}#{#{with_aritywith_arity}}"""expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  

  
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


93
94
95


93
94
95
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93# File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

defdef failure_message_when_negatedfailure_message_when_negated
  failure_messagefailure_message..subsub((//to respond toto respond to///to respond to/,, ''not to respond tonot to respond to'''not to respond to'))
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  

  
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  


    
      
  
  
    Specifies the number of expected arguments.Specifies the number of expected arguments.


  
    Specifies the number of expected arguments.


  

  
    Specifies the number of expected arguments.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..withwith((33))..argumentsargumentsexpect(obj).to respond_to(:message).with(3).argumentsexpect(obj).to respond_to(:message).with(3).arguments
    
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


23
24
25
26


23
24
25
26
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23# File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

defdef withwith((nn))
  @expected_arity@expected_arity == nn
  selfself
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  

  
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  


  
  
    Specifies the number of expected arguments.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  


    
      
  
  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  

  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..with_any_keywordswith_any_keywordsexpect(obj).to respond_to(:message).with_any_keywordsexpect(obj).to respond_to(:message).with_any_keywords
    
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_any_keywords
    
  



  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_any_keywords
    
  



  
    
      


47
48
49
50


47
48
49
50
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47# File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

defdef with_any_keywordswith_any_keywords
  @arbitrary_keywords@arbitrary_keywords == truetrue
  selfself
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  

  
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  


  
  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_any_keywords
    
  



  
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  


    
      
  
  
    Specifies keyword arguments, if any.Specifies keyword arguments, if any.


  
    Specifies keyword arguments, if any.


  

  
    Specifies keyword arguments, if any.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..with_keywordswith_keywords((:color:color,, :shape:shape))expect(obj).to respond_to(:message).with_keywords(:color, :shape)expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of argumentswith an expected number of arguments
with an expected number of arguments

      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..withwith((33))..argumentsarguments..and_keywordsand_keywords((:color:color,, :shape:shape))expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of arguments

      
      expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  



  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of arguments

      
      expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  



  
    
      


35
36
37
38


35
36
37
38
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35# File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

defdef with_keywordswith_keywords((**keywordskeywords))
  @expected_keywords@expected_keywords == keywordskeywords
  selfself
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  

  
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  


  
  
    Specifies keyword arguments, if any.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of arguments

      
      expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  



  
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  


    
      
  
  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  

  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  


  
  
    Examples:Examples:
    
      
      expectexpect((objobj))..toto respond_torespond_to((:message:message))..with_unlimited_argumentswith_unlimited_argumentsexpect(obj).to respond_to(:message).with_unlimited_argumentsexpect(obj).to respond_to(:message).with_unlimited_arguments
    
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_unlimited_arguments
    
  



  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_unlimited_arguments
    
  



  
    
      


59
60
61
62


59
60
61
62
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59# File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

defdef with_unlimited_argumentswith_unlimited_arguments
  @unlimited_arguments@unlimited_arguments == truetrue
  selfself
endend# File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  

  
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  


  
  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_unlimited_arguments
    
  



  
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  


    
  
    Instance Method Details

    
      
  
  
    No-op. Intended to be used as syntactic sugar when using with.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  


    
      
  
  
    Specifies the number of expected arguments.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  


    
      
  
  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_any_keywords
    
  



  
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  


    
      
  
  
    Specifies keyword arguments, if any.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of arguments

      
      expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  



  
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  


    
      
  
  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_unlimited_arguments
    
  



  
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  


    
  

Class: RSpec::Matchers::BuiltIn::RespondTo
  
  
  Private


  
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::RespondTo
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/matchers/built_in/respond_to.rb
  
  


Overview
  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for respond_to.
Not intended to be instantiated directly.


  


  




  Constant Summary
  
  Constants inherited
     from BaseMatcher
  BaseMatcher::UNDEFINED





  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    No-op.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of RespondTo.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies the number of expected arguments.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the method accepts any keyword, i.e.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies keyword arguments, if any.

  


      
        
  
  
  
  
  
  
  
  

  
    Specifies that the number of arguments has no upper limit, i.e.

  


      
    
  


  
  
  
  
  
  
  
  
  Methods inherited from BaseMatcher
  #diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Methods included from Composable
  #===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?

  Constructor Details
  
    
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of RespondTo


  


  


  
    
      


10
11
12
13
14
15
16
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 10

def initialize(*names)
  @names = names
  @expected_arity = nil
  @expected_keywords = []
  @unlimited_arguments = nil
  @arbitrary_keywords = nil
end
    
  


  



  
    Instance Method Details

    
      
  
  
    No-op. Intended to be used as syntactic sugar when using with.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


70
71
72
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 70

def argument
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


99
100
101
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 99

def description
  "respond to #{pp_names}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


87
88
89
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 87

def failure_message
  "expected #{actual_formatted} to respond to #{@failing_method_names.map { |name| description_of(name) }.join(', ')}#{with_arity}"
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


93
94
95
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 93

def failure_message_when_negated
  failure_message.sub(/to respond to/, 'not to respond to')
end
    
  


    
      
  
  
    Specifies the number of expected arguments.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with(3).arguments
    
  



  
    
      


23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 23

def with(n)
  @expected_arity = n
  self
end
    
  


    
      
  
  
    Specifies that the method accepts any keyword, i.e. the method has
  a splatted keyword parameter of the form **kw_args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_any_keywords
    
  



  
    
      


47
48
49
50
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 47

def with_any_keywords
  @arbitrary_keywords = true
  self
end
    
  


    
      
  
  
    Specifies keyword arguments, if any.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_keywords(:color, :shape)
    
      
        with an expected number of arguments

      
      expect(obj).to respond_to(:message).with(3).arguments.and_keywords(:color, :shape)
    
  



  
    
      


35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 35

def with_keywords(*keywords)
  @expected_keywords = keywords
  self
end
    
  


    
      
  
  
    Specifies that the number of arguments has no upper limit, i.e. the
  method has a splatted parameter of the form *args.


  


  
  
    Examples:
    
      
      expect(obj).to respond_to(:message).with_unlimited_arguments
    
  



  
    
      


59
60
61
62
    
    
      # File 'lib/rspec/matchers/built_in/respond_to.rb', line 59

def with_unlimited_arguments
  @unlimited_arguments = true
  self
end
    
  


    
  

