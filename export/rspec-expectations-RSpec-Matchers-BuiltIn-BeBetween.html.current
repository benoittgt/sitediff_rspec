Class: RSpec::Matchers::BuiltIn::BeBetween
  
  
  PrivatePrivate
Class: RSpec::Matchers::BuiltIn::BeBetween
  
  
  Private


  
  
    Inherits:Inherits:
    
      BaseMatcherBaseMatcher
      
        
          ObjectObject
          
            BaseMatcherBaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetweenRSpec::Matchers::BuiltIn::BeBetween
          
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetween
          
        
        show allshow all
      
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetween
          
        
        show all
      
    
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetween
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/matchers/built_in/be_between.rblib/rspec/matchers/built_in/be_between.rb
  
    Defined in:
    lib/rspec/matchers/built_in/be_between.rb
  
  

  
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetween
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/matchers/built_in/be_between.rb
  
  


OverviewOverview
  
    
  This class is part of a private API.This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for be_betweenbe_between.
Not intended to be instantiated directly.Provides the implementation for be_between.
Not intended to be instantiated directly.


  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for be_between.
Not intended to be instantiated directly.


  

  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for be_between.
Not intended to be instantiated directly.


  


  


  




  Constant SummaryConstant Summary
  
  Constants inherited
     from BaseMatcherConstants inherited
     from BaseMatcher
  RSpec::Matchers::BuiltIn::BaseMatcher::UNDEFINEDRSpec::Matchers::BuiltIn::BaseMatcher::UNDEFINED





  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison exclusive.Makes the between comparison exclusive.
Makes the between comparison exclusive.
Makes the between comparison exclusive.

  

  
  
  
  
  
  
  
  

  
    Makes the between comparison exclusive.

  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison inclusive.Makes the between comparison inclusive.
Makes the between comparison inclusive.
Makes the between comparison inclusive.

  

  
  
  
  
  
  
  
  

  
    Makes the between comparison inclusive.

  


      
        
  
  
  
    constructorconstructor
  
  
  
  
  
  privateprivate

  
    A new instance of BeBetween.A new instance of BeBetween.
A new instance of BeBetween.
A new instance of BeBetween.

  

  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of BeBetween.

  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    
  

  
  
  
  
  
  
  
  private

  
    
  


      
    
      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison exclusive.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison inclusive.

  


      
        
  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of BeBetween.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
    
  


  
  
  
  
  
  
  
  
  Methods inherited from BaseMatcherMethods inherited from BaseMatcher
  #diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?#diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?

  
  
  
  
  
  
  
  
  Methods included from RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessagesMethods included from RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  #failure_message_when_negated#failure_message_when_negated

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Methods included from ComposableMethods included from Composable
  #===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?#===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?

  Constructor DetailsConstructor Details
  
    
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.Returns a new instance of BeBetween.


  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.


  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.


  


  


  


  
    
      


8
9
10
11


8
9
10
11
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8# File 'lib/rspec/matchers/built_in/be_between.rb', line 8

defdef initializeinitialize((minmin,, maxmax))
  @min@min,, @max@max == minmin,, maxmax
  inclusiveinclusive
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  

  
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.


  


  


  
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  


  

  Constructor Details
  
    
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.


  


  


  
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  


  



  
    Instance Method DetailsInstance Method Details

    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


57
58
59


57
58
59
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57# File 'lib/rspec/matchers/built_in/be_between.rb', line 57

defdef descriptiondescription
  ""be between be between #{#{description_ofdescription_of @min@min}} and  and #{#{description_ofdescription_of @max@max}} ( (#{#{@mode@mode}}))"""be between #{description_of @min} and #{description_of @max} (#{@mode})"
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  

  
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  


    
      
  
  
    Makes the between comparison exclusive.Makes the between comparison exclusive.


  
    Makes the between comparison exclusive.


  

  
    Makes the between comparison exclusive.


  


  
  
    Examples:Examples:
    
      
      expectexpect((33))..toto be_betweenbe_between((22,, 44))..exclusiveexclusiveexpect(3).to be_between(2, 4).exclusiveexpect(3).to be_between(2, 4).exclusive
    
  
    Examples:
    
      
      expect(3).to be_between(2, 4).exclusive
    
  



  
  
    Examples:
    
      
      expect(3).to be_between(2, 4).exclusive
    
  



  
    
      


33
34
35
36
37
38


33
34
35
36
37
38
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33# File 'lib/rspec/matchers/built_in/be_between.rb', line 33

defdef exclusiveexclusive
  @less_than_operator@less_than_operator == :<:<
  @greater_than_operator@greater_than_operator == :>:>
  @mode@mode == :exclusive:exclusive
  selfself
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  

  
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  


  
  
    Makes the between comparison exclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 4).exclusive
    
  



  
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


51
52
53


51
52
53
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51# File 'lib/rspec/matchers/built_in/be_between.rb', line 51

defdef failure_messagefailure_message
  ""#{#{supersuper}}#{#{not_comparable_clausenot_comparable_clause}}"""#{super}#{not_comparable_clause}"
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  

  
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  


    
      
  
  
    
  
    Note:Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.The matcher is inclusive by default; this simply provides
a way to be more explicit about it.
The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.Makes the between comparison inclusive.


  
    
  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.


  

  
    
  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.


  


  
  
    Examples:Examples:
    
      
      expectexpect((33))..toto be_betweenbe_between((22,, 33))..inclusiveinclusiveexpect(3).to be_between(2, 3).inclusiveexpect(3).to be_between(2, 3).inclusive
    
  
    Examples:
    
      
      expect(3).to be_between(2, 3).inclusive
    
  



  
  
    Examples:
    
      
      expect(3).to be_between(2, 3).inclusive
    
  



  
    
      


21
22
23
24
25
26


21
22
23
24
25
26
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21# File 'lib/rspec/matchers/built_in/be_between.rb', line 21

defdef inclusiveinclusive
  @less_than_operator@less_than_operator == :<=:<=
  @greater_than_operator@greater_than_operator == :>=:>=
  @mode@mode == :inclusive:inclusive
  selfself
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  

  
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  


  
  
    
  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 3).inclusive
    
  



  
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


42
43
44
45
46
47


42
43
44
45
46
47
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42# File 'lib/rspec/matchers/built_in/be_between.rb', line 42

defdef matches?matches?((actualactual))
  @actual@actual == actualactual
  comparable?comparable? &&&& comparecompare
rescuerescue ArgumentErrorArgumentError
  falsefalse
endend# File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  

  
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  


    
  
    Instance Method Details

    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  


    
      
  
  
    Makes the between comparison exclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 4).exclusive
    
  



  
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  


    
      
  
  
    
  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 3).inclusive
    
  



  
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  


    
  

Class: RSpec::Matchers::BuiltIn::BeBetween
  
  
  Private


  
  
    Inherits:
    
      BaseMatcher
      
        
          Object
          
            BaseMatcher
          
            RSpec::Matchers::BuiltIn::BeBetween
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/matchers/built_in/be_between.rb
  
  


Overview
  
    
  This class is part of a private API.
  You should avoid using this class if possible, as it may be removed or be changed in the future.

Provides the implementation for be_between.
Not intended to be instantiated directly.


  


  




  Constant Summary
  
  Constants inherited
     from BaseMatcher
  RSpec::Matchers::BuiltIn::BaseMatcher::UNDEFINED





  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison exclusive.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
        
  
  
  
  
  
  
  
  

  
    Makes the between comparison inclusive.

  


      
        
  
  
  
    constructor
  
  
  
  
  
  private

  
    A new instance of BeBetween.

  


      
        
  
  
  
  
  
  
  
  private

  
    
  


      
    
  


  
  
  
  
  
  
  
  
  Methods inherited from BaseMatcher
  #diffable?, #expects_call_stack_jump?, #match_unless_raises, #supports_block_expectations?

  
  
  
  
  
  
  
  
  Methods included from RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages
  #failure_message_when_negated

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  Methods included from Composable
  #===, #and, #description_of, #or, should_enumerate?, surface_descriptions_in, unreadable_io?, #values_match?

  Constructor Details
  
    
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns a new instance of BeBetween.


  


  


  
    
      


8
9
10
11
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 8

def initialize(min, max)
  @min, @max = min, max
  inclusive
end
    
  


  



  
    Instance Method Details

    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


57
58
59
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 57

def description
  "be between #{description_of @min} and #{description_of @max} (#{@mode})"
end
    
  


    
      
  
  
    Makes the between comparison exclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 4).exclusive
    
  



  
    
      


33
34
35
36
37
38
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 33

def exclusive
  @less_than_operator = :<
  @greater_than_operator = :>
  @mode = :exclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


51
52
53
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 51

def failure_message
  "#{super}#{not_comparable_clause}"
end
    
  


    
      
  
  
    
  
    Note:
    The matcher is inclusive by default; this simply provides
a way to be more explicit about it.

  

Makes the between comparison inclusive.


  


  
  
    Examples:
    
      
      expect(3).to be_between(2, 3).inclusive
    
  



  
    
      


21
22
23
24
25
26
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 21

def inclusive
  @less_than_operator = :<=
  @greater_than_operator = :>=
  @mode = :inclusive
  self
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


42
43
44
45
46
47
    
    
      # File 'lib/rspec/matchers/built_in/be_between.rb', line 42

def matches?(actual)
  @actual = actual
  comparable? && compare
rescue ArgumentError
  false
end
    
  


    
  

