Class: RSpec::Mocks::MessageExpectation
  
  
  
Class: RSpec::Mocks::MessageExpectation
  
  
  


  
  
    Inherits:Inherits:
    
      ObjectObject
      
        
          ObjectObject
          
            RSpec::Mocks::MessageExpectationRSpec::Mocks::MessageExpectation
          
        
          Object
          
            RSpec::Mocks::MessageExpectation
          
        
        show allshow all
      
    
      Object
      
        
          Object
          
            RSpec::Mocks::MessageExpectation
          
        
        show all
      
    
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Mocks::MessageExpectation
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/mocks/message_expectation.rblib/rspec/mocks/message_expectation.rb
  
    Defined in:
    lib/rspec/mocks/message_expectation.rb
  
  

  
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Mocks::MessageExpectation
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/mocks/message_expectation.rb
  
  


OverviewOverview
  
    Represents an individual method stub or message expectation. The methods
defined here can be used to configure how it behaves. The methods return
selfself so that they can be chained together to form a fluent interface.Represents an individual method stub or message expectation. The methods
defined here can be used to configure how it behaves. The methods return
self so that they can be chained together to form a fluent interface.


  
    Represents an individual method stub or message expectation. The methods
defined here can be used to configure how it behaves. The methods return
self so that they can be chained together to form a fluent interface.


  

  
    Represents an individual method stub or message expectation. The methods
defined here can be used to configure how it behaves. The methods return
self so that they can be chained together to form a fluent interface.


  


  


  


  Direct Known SubclassesDirect Known Subclasses
  VerifyingMessageExpectationVerifyingMessageExpectation

  Direct Known Subclasses
  VerifyingMessageExpectation








  
    
      Configuring Responses
      
    
      Configuring Responses
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Tells the object to delegate to the original unmodified method when it receives the message.Tells the object to delegate to the original unmodified method when it receives the message.
Tells the object to delegate to the original unmodified method when it receives the message.
Tells the object to delegate to the original unmodified method when it receives the message.

  

  
  
  
  
  
  
  
  

  
    Tells the object to delegate to the original unmodified method when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to raise an exception when the message is received.Tells the object to raise an exception when the message is received.
Tells the object to raise an exception when the message is received.
Tells the object to raise an exception when the message is received.

  

  
  
  
  
  
  
  
  

  
    Tells the object to raise an exception when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to return a value when it receives the message.Tells the object to return a value when it receives the message.
Tells the object to return a value when it receives the message.
Tells the object to return a value when it receives the message.

  

  
  
  
  
  
  
  
  

  
    Tells the object to return a value when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to throw a symbol (with the object if that form is used) when the message is received.Tells the object to throw a symbol (with the object if that form is used) when the message is received.
Tells the object to throw a symbol (with the object if that form is used) when the message is received.
Tells the object to throw a symbol (with the object if that form is used) when the message is received.

  

  
  
  
  
  
  
  
  

  
    Tells the object to throw a symbol (with the object if that form is used) when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Decorates the stubbed method with the supplied block.Decorates the stubbed method with the supplied block.
Decorates the stubbed method with the supplied block.
Decorates the stubbed method with the supplied block.

  

  
  
  
  
  
  
  
  

  
    Decorates the stubbed method with the supplied block.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to yield one or more args to a block when the message is received.Tells the object to yield one or more args to a block when the message is received.
Tells the object to yield one or more args to a block when the message is received.
Tells the object to yield one or more args to a block when the message is received.

  

  
  
  
  
  
  
  
  

  
    Tells the object to yield one or more args to a block when the message is received.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Tells the object to delegate to the original unmodified method when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to raise an exception when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to return a value when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to throw a symbol (with the object if that form is used) when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Decorates the stubbed method with the supplied block.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to yield one or more args to a block when the message is received.

  


      
    
  
    
      Constraining Receive Counts
      
    
      Constraining Receive Counts
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at least a specific number of times.Constrain a message expectation to be received at least a specific number of times.
Constrain a message expectation to be received at least a specific number of times.
Constrain a message expectation to be received at least a specific number of times.

  

  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at least a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at most a specific number of times.Constrain a message expectation to be received at most a specific number of times.
Constrain a message expectation to be received at most a specific number of times.
Constrain a message expectation to be received at most a specific number of times.

  

  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at most a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received a specific number of times.Constrain a message expectation to be received a specific number of times.
Constrain a message expectation to be received a specific number of times.
Constrain a message expectation to be received a specific number of times.

  

  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message not to be received at all.Expect a message not to be received at all.
Expect a message not to be received at all.
Expect a message not to be received at all.

  

  
  
  
  
  
  
  
  

  
    Expect a message not to be received at all.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly one time.Expect a message to be received exactly one time.
Expect a message to be received exactly one time.
Expect a message to be received exactly one time.

  

  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly one time.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly three times.Expect a message to be received exactly three times.
Expect a message to be received exactly three times.
Expect a message to be received exactly three times.

  

  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly three times.

  


      
        
  
  
  
  
  
  
  
  

  
    Syntactic sugar for exactlyexactly, at_leastat_least and at_mostat_most.Syntactic sugar for exactly, at_least and at_most.
Syntactic sugar for exactly, at_least and at_most.
Syntactic sugar for exactly, at_least and at_most.

  

  
  
  
  
  
  
  
  

  
    Syntactic sugar for exactly, at_least and at_most.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly two times.Expect a message to be received exactly two times.
Expect a message to be received exactly two times.
Expect a message to be received exactly two times.

  

  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly two times.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at least a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at most a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message not to be received at all.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly one time.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly three times.

  


      
        
  
  
  
  
  
  
  
  

  
    Syntactic sugar for exactly, at_least and at_most.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly two times.

  


      
    
  
    
      Other Constraints
      
    
      Other Constraints
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Expect messages to be received in a specific order.Expect messages to be received in a specific order.
Expect messages to be received in a specific order.
Expect messages to be received in a specific order.

  

  
  
  
  
  
  
  
  

  
    Expect messages to be received in a specific order.

  


      
        
  
  
  
  
  
  
  
  

  
    A nice representation of the message expectation.A nice representation of the message expectation.
A nice representation of the message expectation.
A nice representation of the message expectation.

  

  
  
  
  
  
  
  
  

  
    A nice representation of the message expectation.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrains a stub or message expectation to invocations with specific arguments.Constrains a stub or message expectation to invocations with specific arguments.
Constrains a stub or message expectation to invocations with specific arguments.
Constrains a stub or message expectation to invocations with specific arguments.

  

  
  
  
  
  
  
  
  

  
    Constrains a stub or message expectation to invocations with specific arguments.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Expect messages to be received in a specific order.

  


      
        
  
  
  
  
  
  
  
  

  
    A nice representation of the message expectation.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrains a stub or message expectation to invocations with specific arguments.

  


      
    
  


  
  
  
  
  
  

  
    Instance Method DetailsInstance Method Details

    
      
  
  
    
  
    Note:Note:
    This is only available on partial doubles.This is only available on partial doubles.
This is only available on partial doubles.

  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.Tells the object to delegate to the original unmodified method
when it receives the message.


  
    
  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.


  

  
    
  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.


  


  
  
    Examples:Examples:
    
      
      expectexpect((countercounter))..toto receivereceive((:increment:increment))..and_call_originaland_call_original
original_countoriginal_count == countercounter..countcount
countercounter..incrementincrement
expectexpect((countercounter..countcount))..toto eqeq((original_countoriginal_count ++ 11))expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  
    Examples:
    
      
      expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  

Returns:Returns:

  
    
      
      
        (nilnil)(nil)
      
      
      
        —
        No further chaining is supported after this.No further chaining is supported after this.
No further chaining is supported after this.

      
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
  
    Examples:
    
      
      expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


99
100
101
102
103


99
100
101
102
103
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99# File 'lib/rspec/mocks/message_expectation.rb', line 99

defdef and_call_originaland_call_original
  wrap_originalwrap_original((__method____method__)) dodo ||originaloriginal,, **argsargs,, &&blockblock||
    originaloriginal..callcall((**argsargs,, &&blockblock))
  endend
endend# File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  

  
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  


  
  
    
  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.


  


  
  
    Examples:
    
      
      expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exceptionexception and passing messagemessage
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.
When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.Tells the object to raise an exception when the message is received.


  
    
  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.


  

  
    
  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.


  


  
  
    Examples:Examples:
    
      
      allowallow((carcar))..toto receivereceive((:go:go))..and_raiseand_raise
allowallow((carcar))..toto receivereceive((:go:go))..and_raiseand_raise((OutOfGasOutOfGas))
allowallow((carcar))..toto receivereceive((:go:go))..and_raiseand_raise((OutOfGasOutOfGas,, ""At least 2 oz of gas needed to driveAt least 2 oz of gas needed to drive"""At least 2 oz of gas needed to drive"))
allowallow((carcar))..toto receivereceive((:go:go))..and_raiseand_raise((OutOfGasOutOfGas..newnew((22,, :oz:oz))))allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  
    Examples:
    
      
      allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  

Returns:Returns:

  
    
      
      
        (nilnil)(nil)
      
      
      
        —
        No further chaining is supported after this.No further chaining is supported after this.
No further chaining is supported after this.

      
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
  
    Examples:
    
      
      allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


141
142
143
144
145


141
142
143
144
145
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141# File 'lib/rspec/mocks/message_expectation.rb', line 141

defdef and_raiseand_raise((**argsargs))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  selfself..terminal_implementation_actionterminal_implementation_action == ProcProc..newnew {{ raiseraise((**argsargs)) }}
  nilnil
endend# File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  

  
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  


  
  
    
  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  


    
      
  
  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.If the message is received more times than there are values, the last
value is received for every subsequent call.


  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.


  

  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.


  


  
  
    Examples:Examples:
    
      
      allowallow((countercounter))..toto receivereceive((:count:count))..and_returnand_return((11))
countercounter..countcount # => 1
# => 1
countercounter..countcount # => 1
# => 1

allowallow((countercounter))..toto receivereceive((:count:count))..and_returnand_return((11,,22,,33))
countercounter..countcount # => 1
# => 1
countercounter..countcount # => 2
# => 2
countercounter..countcount # => 3
# => 3
countercounter..countcount # => 3
# => 3
countercounter..countcount # => 3
# => 3
# etc# etcallow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etcallow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  
    Examples:
    
      
      allow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  

Returns:Returns:

  
    
      
      
        (nilnil)(nil)
      
      
      
        —
        No further chaining is supported after this.No further chaining is supported after this.
No further chaining is supported after this.

      
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
  
    Examples:
    
      
      allow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71# File 'lib/rspec/mocks/message_expectation.rb', line 71

defdef and_returnand_return((first_valuefirst_value,, **valuesvalues))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  ifif negative?negative?
    raiseraise ""`and_return` is not supported with negative message expectations`and_return` is not supported with negative message expectations"""`and_return` is not supported with negative message expectations"
  endend

  ifif block_given?block_given?
    raiseraise ArgumentErrorArgumentError,, ""Implementation blocks aren't supported with `and_return`Implementation blocks aren't supported with `and_return`"""Implementation blocks aren't supported with `and_return`"
  endend

  valuesvalues..unshiftunshift((first_valuefirst_value))
  @expected_received_count@expected_received_count == [[@expected_received_count@expected_received_count,, valuesvalues..sizesize]]..maxmax unlessunless ignoring_args?ignoring_args? |||| ((@expected_received_count@expected_received_count ==== 00 &&&& @at_least@at_least))
  selfself..terminal_implementation_actionterminal_implementation_action == AndReturnImplementationAndReturnImplementation..newnew((valuesvalues))

  nilnil
endend# File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  

  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  


  
  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.


  


  
  
    Examples:
    
      
      allow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  


    
      
  
  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  

  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  


  
  
    Examples:Examples:
    
      
      allowallow((carcar))..toto receivereceive((:go:go))..and_throwand_throw((:out_of_gas:out_of_gas))
allowallow((carcar))..toto receivereceive((:go:go))..and_throwand_throw((:out_of_gas:out_of_gas,, :level:level =>=> 0.10.1))allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  
    Examples:
    
      
      allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  

Returns:Returns:

  
    
      
      
        (nilnil)(nil)
      
      
      
        —
        No further chaining is supported after this.No further chaining is supported after this.
No further chaining is supported after this.

      
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
  
    Examples:
    
      
      allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


157
158
159
160
161


157
158
159
160
161
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157# File 'lib/rspec/mocks/message_expectation.rb', line 157

defdef and_throwand_throw((**argsargs))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  selfself..terminal_implementation_actionterminal_implementation_action == ProcProc..newnew {{ throwthrow((**argsargs)) }}
  nilnil
endend# File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  

  
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  


  
  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  


    
      
  
  
    
  
    Note:Note:
    This is only available on partial doubles.This is only available on partial doubles.
This is only available on partial doubles.

  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  
    
  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  

  
    
  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  


  
  
    Examples:Examples:
    
      
      expectexpect((apiapi))..toto receivereceive((:large_list:large_list))..and_wrap_originaland_wrap_original dodo ||original_methodoriginal_method,, **argsargs,, &&blockblock||
  original_methodoriginal_method..callcall((**argsargs,, &&blockblock))..firstfirst((1010))
endendexpect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
endexpect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  
    Examples:
    
      
      expect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  

Returns:Returns:

  
    
      
      
        (nilnil)(nil)
      
      
      
        —
        No further chaining is supported after this.No further chaining is supported after this.
No further chaining is supported after this.

      
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
  
    Examples:
    
      
      expect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


117
118
119


117
118
119
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117# File 'lib/rspec/mocks/message_expectation.rb', line 117

defdef and_wrap_originaland_wrap_original((&&blockblock))
  wrap_originalwrap_original((__method____method__,, &&blockblock))
endend# File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  

  
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  


  
  
    
  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  


  
  
    Examples:
    
      
      expect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  


    
      
  
  
    Tells the object to yield one or more args to a block when the message
is received.Tells the object to yield one or more args to a block when the message
is received.


  
    Tells the object to yield one or more args to a block when the message
is received.


  

  
    Tells the object to yield one or more args to a block when the message
is received.


  


  
  
    Examples:Examples:
    
      
      streamstream..stubstub((:open:open))..and_yieldand_yield((StringIOStringIO..newnew))stream.stub(:open).and_yield(StringIO.new)stream.stub(:open).and_yield(StringIO.new)
    
  
    Examples:
    
      
      stream.stub(:open).and_yield(StringIO.new)
    
  

Yields:Yields:

  
    
      
      
        (@eval_context = Object.new@eval_context = Object.new)(@eval_context = Object.new)
      
      
      
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

  
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      stream.stub(:open).and_yield(StringIO.new)
    
  

Yields:

  
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


169
170
171
172
173
174
175
176
177
178
179
180


169
170
171
172
173
174
175
176
177
178
179
180
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169# File 'lib/rspec/mocks/message_expectation.rb', line 169

defdef and_yieldand_yield((**argsargs,, &&blockblock))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  yieldyield @eval_context@eval_context == ObjectObject..newnew ifif blockblock

  # Initialize args to yield now that it's being used, see also: comment
# Initialize args to yield now that it's being used, see also: comment
  # in constructor.
# in constructor.
  @args_to_yield@args_to_yield ||=||= [[]]

  @args_to_yield@args_to_yield <<<< argsargs
  selfself..initial_implementation_actioninitial_implementation_action == AndYieldImplementationAndYieldImplementation..newnew((@args_to_yield@args_to_yield,, @eval_context@eval_context,, @error_generator@error_generator))
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  

  
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  


  
  
    Tells the object to yield one or more args to a block when the message
is received.


  


  
  
    Examples:
    
      
      stream.stub(:open).and_yield(StringIO.new)
    
  

Yields:

  
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at least a specific
number of times.Constrain a message expectation to be received at least a specific
number of times.


  
    Constrain a message expectation to be received at least a specific
number of times.


  

  
    Constrain a message expectation to be received at least a specific
number of times.


  


  
  
    Examples:Examples:
    
      
      expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..at_leastat_least((99))..timestimesexpect(dealer).to receive(:deal_card).at_least(9).timesexpect(dealer).to receive(:deal_card).at_least(9).times
    
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_least(9).times
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_least(9).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


204
205
206
207
208
209
210
211
212
213
214
215


204
205
206
207
208
209
210
211
212
213
214
215
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204# File 'lib/rspec/mocks/message_expectation.rb', line 204

defdef at_leastat_least((nn,, &&blockblock))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  set_expected_received_countset_expected_received_count :at_least:at_least,, nn

  ifif nn ==== 00
    raiseraise ""at_least(0) has been removed, use allow(...).to receive(:message) insteadat_least(0) has been removed, use allow(...).to receive(:message) instead"""at_least(0) has been removed, use allow(...).to receive(:message) instead"
  endend

  selfself..inner_implementation_actioninner_implementation_action == blockblock

  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  

  
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  


  
  
    Constrain a message expectation to be received at least a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_least(9).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at most a specific
number of times.Constrain a message expectation to be received at most a specific
number of times.


  
    Constrain a message expectation to be received at most a specific
number of times.


  

  
    Constrain a message expectation to be received at most a specific
number of times.


  


  
  
    Examples:Examples:
    
      
      expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..at_mostat_most((1010))..timestimesexpect(dealer).to receive(:deal_card).at_most(10).timesexpect(dealer).to receive(:deal_card).at_most(10).times
    
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


223
224
225
226
227
228


223
224
225
226
227
228
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223# File 'lib/rspec/mocks/message_expectation.rb', line 223

defdef at_mostat_most((nn,, &&blockblock))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  set_expected_received_countset_expected_received_count :at_most:at_most,, nn
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  

  
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  


  
  
    Constrain a message expectation to be received at most a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received a specific number of
times.Constrain a message expectation to be received a specific number of
times.


  
    Constrain a message expectation to be received a specific number of
times.


  

  
    Constrain a message expectation to be received a specific number of
times.


  


  
  
    Examples:Examples:
    
      
      expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..exactlyexactly((1010))..timestimesexpect(dealer).to receive(:deal_card).exactly(10).timesexpect(dealer).to receive(:deal_card).exactly(10).times
    
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


191
192
193
194
195
196


191
192
193
194
195
196
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191# File 'lib/rspec/mocks/message_expectation.rb', line 191

defdef exactlyexactly((nn,, &&blockblock))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  set_expected_received_countset_expected_received_count :exactly:exactly,, nn
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  

  
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  


  
  
    Constrain a message expectation to be received a specific number of
times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  


    
      
  
  
    Expect a message not to be received at all.Expect a message not to be received at all.


  
    Expect a message not to be received at all.


  

  
    Expect a message not to be received at all.


  


  
  
    Examples:Examples:
    
      
      expectexpect((carcar))..toto receivereceive((:stop:stop))..neverneverexpect(car).to receive(:stop).neverexpect(car).to receive(:stop).never
    
  
    Examples:
    
      
      expect(car).to receive(:stop).never
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(car).to receive(:stop).never
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


248
249
250
251
252


248
249
250
251
252
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248# File 'lib/rspec/mocks/message_expectation.rb', line 248

defdef nevernever
  error_generatorerror_generator..raise_double_negation_errorraise_double_negation_error((""expect(obj)expect(obj)"""expect(obj)")) ifif negative?negative?
  @expected_received_count@expected_received_count == 00
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  

  
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  


  
  
    Expect a message not to be received at all.


  


  
  
    Examples:
    
      
      expect(car).to receive(:stop).never
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly one time.Expect a message to be received exactly one time.


  
    Expect a message to be received exactly one time.


  

  
    Expect a message to be received exactly one time.


  


  
  
    Examples:Examples:
    
      
      expectexpect((carcar))..toto receivereceive((:go:go))..onceonceexpect(car).to receive(:go).onceexpect(car).to receive(:go).once
    
  
    Examples:
    
      
      expect(car).to receive(:go).once
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(car).to receive(:go).once
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


259
260
261
262
263


259
260
261
262
263
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259# File 'lib/rspec/mocks/message_expectation.rb', line 259

defdef onceonce((&&blockblock))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  set_expected_received_countset_expected_received_count :exactly:exactly,, 11
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  

  
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  


  
  
    Expect a message to be received exactly one time.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).once
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  


    
      
  
  
    Expect messages to be received in a specific order.Expect messages to be received in a specific order.


  
    Expect messages to be received in a specific order.


  

  
    Expect messages to be received in a specific order.


  


  
  
    Examples:Examples:
    
      
      expectexpect((apiapi))..toto receivereceive((:prepare:prepare))..orderedordered
expectexpect((apiapi))..toto receivereceive((:run:run))..orderedordered
expectexpect((apiapi))..toto receivereceive((:finish:finish))..orderedorderedexpect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).orderedexpect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  
    Examples:
    
      
      expect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333# File 'lib/rspec/mocks/message_expectation.rb', line 333

defdef orderedordered((&&blockblock))
  ifif typetype ==== :stub:stub
    RSpecRSpec..warningwarning((
      ""`allow(...).to receive(..).ordered` is not supported and will `allow(...).to receive(..).ordered` is not supported and will """`allow(...).to receive(..).ordered` is not supported and will " \
      ""have no effect, use `and_return(*ordered_values)` instead.have no effect, use `and_return(*ordered_values)` instead."""have no effect, use `and_return(*ordered_values)` instead."
    ))
  endend

  selfself..inner_implementation_actioninner_implementation_action == blockblock
  additional_expected_callsadditional_expected_calls..timestimes dodo
    @order_group@order_group..registerregister((selfself))
  endend
  @ordered@ordered == truetrue
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  

  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  


  
  
    Expect messages to be received in a specific order.


  


  
  
    Examples:
    
      
      expect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly three times.Expect a message to be received exactly three times.


  
    Expect a message to be received exactly three times.


  

  
    Expect a message to be received exactly three times.


  


  
  
    Examples:Examples:
    
      
      expectexpect((carcar))..toto receivereceive((:go:go))..thricethriceexpect(car).to receive(:go).thriceexpect(car).to receive(:go).thrice
    
  
    Examples:
    
      
      expect(car).to receive(:go).thrice
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(car).to receive(:go).thrice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


281
282
283
284
285


281
282
283
284
285
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281# File 'lib/rspec/mocks/message_expectation.rb', line 281

defdef thricethrice((&&blockblock))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  set_expected_received_countset_expected_received_count :exactly:exactly,, 33
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  

  
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  


  
  
    Expect a message to be received exactly three times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).thrice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  


    
      
  
  
    Syntactic sugar for exactly, at_least and at_most.Syntactic sugar for exactly, at_least and at_most.


  
    Syntactic sugar for exactly, at_least and at_most.


  

  
    Syntactic sugar for exactly, at_least and at_most.


  


  
  
    Examples:Examples:
    
      
      expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..exactlyexactly((1010))..timestimes
expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..at_leastat_least((1010))..timestimes
expectexpect((dealerdealer))..toto receivereceive((:deal_card:deal_card))..at_mostat_most((1010))..timestimesexpect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).timesexpect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


237
238
239
240


237
238
239
240
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237# File 'lib/rspec/mocks/message_expectation.rb', line 237

defdef timestimes((&&blockblock))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  

  
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  


  
  
    Syntactic sugar for exactly, at_least and at_most.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  


    
      
  
  
    Returns a nice representation of the message expectation.Returns a nice representation of the message expectation.


  
    Returns a nice representation of the message expectation.


  

  
    Returns a nice representation of the message expectation.


  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
        —
        a nice representation of the message expectationa nice representation of the message expectation
a nice representation of the message expectation

      
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  

  
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  



  
    
      


350
351
352
353
354


350
351
352
353
354
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350# File 'lib/rspec/mocks/message_expectation.rb', line 350

defdef to_sto_s
  args_descriptionargs_description == error_generatorerror_generator..method_call_args_descriptionmethod_call_args_description((@argument_list_matcher@argument_list_matcher..expected_argsexpected_args,, """""",, """""")) {{ truetrue }}
  args_descriptionargs_description == ""((#{#{args_descriptionargs_description}}))"""(#{args_description})" unlessunless args_descriptionargs_description..start_with?start_with?((""(("""("))
  ""#<#<#{#{selfself..classclass}}  #{#{error_generatorerror_generator..introintro}}..#{#{messagemessage}}#{#{args_descriptionargs_description}}>>"""#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
endend# File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  

  
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  


  
  
    Returns a nice representation of the message expectation.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  



  
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  


    
      
  
  
    Expect a message to be received exactly two times.Expect a message to be received exactly two times.


  
    Expect a message to be received exactly two times.


  

  
    Expect a message to be received exactly two times.


  


  
  
    Examples:Examples:
    
      
      expectexpect((carcar))..toto receivereceive((:go:go))..twicetwiceexpect(car).to receive(:go).twiceexpect(car).to receive(:go).twice
    
  
    Examples:
    
      
      expect(car).to receive(:go).twice
    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      expect(car).to receive(:go).twice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


270
271
272
273
274


270
271
272
273
274
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270# File 'lib/rspec/mocks/message_expectation.rb', line 270

defdef twicetwice((&&blockblock))
  selfself..inner_implementation_actioninner_implementation_action == blockblock
  set_expected_received_countset_expected_received_count :exactly:exactly,, 22
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  

  
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  


  
  
    Expect a message to be received exactly two times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).twice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  


    
      
  
  
    Constrains a stub or message expectation to invocations with specific
arguments.Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using withwith to constrain to specific arguments.With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.A message expectation will fail if the message is received with different
arguments.


  
    Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.


  

  
    Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.


  


  
  
    Examples:Examples:
    
      
      allowallow((cartcart))..toto receivereceive((:add:add)) {{ :failure:failure }}
allowallow((cartcart))..toto receivereceive((:add:add))..withwith((BookBook..newnew((:isbn:isbn =>=> 19343563791934356379)))) {{ :success:success }}
cartcart..addadd((BookBook..newnew((:isbn:isbn =>=> 12345678901234567890))))# => :failure
# => :failure

cartcart..addadd((BookBook..newnew((:isbn:isbn =>=> 19343563791934356379))))# => :success
# => :success


expectexpect((cartcart))..toto receivereceive((:add:add))..withwith((BookBook..newnew((:isbn:isbn =>=> 19343563791934356379)))) {{ :success:success }}
cartcart..addadd((BookBook..newnew((:isbn:isbn =>=> 12345678901234567890))))# => failed expectation
# => failed expectation

cartcart..addadd((BookBook..newnew((:isbn:isbn =>=> 19343563791934356379))))# => passes# => passes
allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes
allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  
    Examples:
    
      
      allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  

Returns:Returns:

  
    
      
      
        (MessageExpectationMessageExpectation)(MessageExpectation)
      
      
      
        —
        self, to support further chaining.self, to support further chaining.
self, to support further chaining.

      
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
  
    Examples:
    
      
      allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


314
315
316
317
318
319
320
321
322
323
324


314
315
316
317
318
319
320
321
322
323
324
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314# File 'lib/rspec/mocks/message_expectation.rb', line 314

defdef withwith((**argsargs,, &&blockblock))
  raise_already_invoked_error_if_necessaryraise_already_invoked_error_if_necessary((__method____method__))
  ifif argsargs..empty?empty?
    raiseraise ArgumentErrorArgumentError,,
          ""`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments.`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."""`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  endend

  selfself..inner_implementation_actioninner_implementation_action == blockblock
  @argument_list_matcher@argument_list_matcher == ArgumentListMatcherArgumentListMatcher..newnew((**argsargs))
  selfself
endend# File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  

  
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  


  
  
    Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.


  


  
  
    Examples:
    
      
      allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  


    
  
    Instance Method Details

    
      
  
  
    
  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.


  


  
  
    Examples:
    
      
      expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  


    
      
  
  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.


  


  
  
    Examples:
    
      
      allow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  


    
      
  
  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  


    
      
  
  
    
  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  


  
  
    Examples:
    
      
      expect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  


    
      
  
  
    Tells the object to yield one or more args to a block when the message
is received.


  


  
  
    Examples:
    
      
      stream.stub(:open).and_yield(StringIO.new)
    
  

Yields:

  
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at least a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_least(9).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at most a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received a specific number of
times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  


    
      
  
  
    Expect a message not to be received at all.


  


  
  
    Examples:
    
      
      expect(car).to receive(:stop).never
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly one time.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).once
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  


    
      
  
  
    Expect messages to be received in a specific order.


  


  
  
    Examples:
    
      
      expect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly three times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).thrice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  


    
      
  
  
    Syntactic sugar for exactly, at_least and at_most.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  


    
      
  
  
    Returns a nice representation of the message expectation.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  



  
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  


    
      
  
  
    Expect a message to be received exactly two times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).twice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  


    
      
  
  
    Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.


  


  
  
    Examples:
    
      
      allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  


    
  

Class: RSpec::Mocks::MessageExpectation
  
  
  


  
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Mocks::MessageExpectation
          
        
        show all
      
    
  
  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/mocks/message_expectation.rb
  
  


Overview
  
    Represents an individual method stub or message expectation. The methods
defined here can be used to configure how it behaves. The methods return
self so that they can be chained together to form a fluent interface.


  


  


  Direct Known Subclasses
  VerifyingMessageExpectation








  
    
      Configuring Responses
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Tells the object to delegate to the original unmodified method when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to raise an exception when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to return a value when it receives the message.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to throw a symbol (with the object if that form is used) when the message is received.

  


      
        
  
  
  
  
  
  
  
  

  
    Decorates the stubbed method with the supplied block.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to yield one or more args to a block when the message is received.

  


      
    
  
    
      Constraining Receive Counts
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at least a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received at most a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrain a message expectation to be received a specific number of times.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message not to be received at all.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly one time.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly three times.

  


      
        
  
  
  
  
  
  
  
  

  
    Syntactic sugar for exactly, at_least and at_most.

  


      
        
  
  
  
  
  
  
  
  

  
    Expect a message to be received exactly two times.

  


      
    
  
    
      Other Constraints
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Expect messages to be received in a specific order.

  


      
        
  
  
  
  
  
  
  
  

  
    A nice representation of the message expectation.

  


      
        
  
  
  
  
  
  
  
  

  
    Constrains a stub or message expectation to invocations with specific arguments.

  


      
    
  


  
  
  
  
  
  

  
    Instance Method Details

    
      
  
  
    
  
    Note:
    This is only available on partial doubles.

  

Tells the object to delegate to the original unmodified method
when it receives the message.


  


  
  
    Examples:
    
      
      expect(counter).to receive(:increment).and_call_original
original_count = counter.count
counter.increment
expect(counter.count).to eq(original_count + 1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 99

def and_call_original
  wrap_original(__method__) do |original, *args, &block|
    original.call(*args, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:
    When you pass an exception class, the MessageExpectation will raise
an instance of it, creating it with exception and passing message
if specified.  If the exception class initializer requires more than
one parameters, you must pass in an instance and not the class,
otherwise this method will raise an ArgumentError exception.

  

Tells the object to raise an exception when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_raise
allow(car).to receive(:go).and_raise(OutOfGas)
allow(car).to receive(:go).and_raise(OutOfGas, "At least 2 oz of gas needed to drive")
allow(car).to receive(:go).and_raise(OutOfGas.new(2, :oz))
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


141
142
143
144
145
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 141

def and_raise(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { raise(*args) }
  nil
end
    
  


    
      
  
  
    Tells the object to return a value when it receives the message.  Given
more than one value, the first value is returned the first time the
message is received, the second value is returned the next time, etc,
etc.

If the message is received more times than there are values, the last
value is received for every subsequent call.


  


  
  
    Examples:
    
      
      allow(counter).to receive(:count).and_return(1)
counter.count # => 1
counter.count # => 1

allow(counter).to receive(:count).and_return(1,2,3)
counter.count # => 1
counter.count # => 2
counter.count # => 3
counter.count # => 3
counter.count # => 3
# etc
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 71

def and_return(first_value, *values)
  raise_already_invoked_error_if_necessary(__method__)
  if negative?
    raise "`and_return` is not supported with negative message expectations"
  end

  if block_given?
    raise ArgumentError, "Implementation blocks aren't supported with `and_return`"
  end

  values.unshift(first_value)
  @expected_received_count = [@expected_received_count, values.size].max unless ignoring_args? || (@expected_received_count == 0 && @at_least)
  self.terminal_implementation_action = AndReturnImplementation.new(values)

  nil
end
    
  


    
      
  
  
    Tells the object to throw a symbol (with the object if that form is
used) when the message is received.


  


  
  
    Examples:
    
      
      allow(car).to receive(:go).and_throw(:out_of_gas)
allow(car).to receive(:go).and_throw(:out_of_gas, :level => 0.1)
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


157
158
159
160
161
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 157

def and_throw(*args)
  raise_already_invoked_error_if_necessary(__method__)
  self.terminal_implementation_action = Proc.new { throw(*args) }
  nil
end
    
  


    
      
  
  
    
  
    Note:
    This is only available on partial doubles.

  

Decorates the stubbed method with the supplied block. The original
unmodified method is passed to the block along with any method call
arguments so you can delegate to it, whilst still being able to
change what args are passed to it and/or change the return value.


  


  
  
    Examples:
    
      
      expect(api).to receive(:large_list).and_wrap_original do |original_method, *args, &block|
  original_method.call(*args, &block).first(10)
end
    
  

Returns:

  
    
      
      
        (nil)
      
      
      
        —
        No further chaining is supported after this.

      
    
  



  
    
      


117
118
119
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 117

def and_wrap_original(&block)
  wrap_original(__method__, &block)
end
    
  


    
      
  
  
    Tells the object to yield one or more args to a block when the message
is received.


  


  
  
    Examples:
    
      
      stream.stub(:open).and_yield(StringIO.new)
    
  

Yields:

  
    
      
      
        (@eval_context = Object.new)
      
      
      
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


169
170
171
172
173
174
175
176
177
178
179
180
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 169

def and_yield(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  yield @eval_context = Object.new if block

  # Initialize args to yield now that it's being used, see also: comment
  # in constructor.
  @args_to_yield ||= []

  @args_to_yield << args
  self.initial_implementation_action = AndYieldImplementation.new(@args_to_yield, @eval_context, @error_generator)
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at least a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_least(9).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


204
205
206
207
208
209
210
211
212
213
214
215
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 204

def at_least(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  set_expected_received_count :at_least, n

  if n == 0
    raise "at_least(0) has been removed, use allow(...).to receive(:message) instead"
  end

  self.inner_implementation_action = block

  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received at most a specific
number of times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


223
224
225
226
227
228
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 223

def at_most(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :at_most, n
  self
end
    
  


    
      
  
  
    Constrain a message expectation to be received a specific number of
times.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


191
192
193
194
195
196
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 191

def exactly(n, &block)
  raise_already_invoked_error_if_necessary(__method__)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, n
  self
end
    
  


    
      
  
  
    Expect a message not to be received at all.


  


  
  
    Examples:
    
      
      expect(car).to receive(:stop).never
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


248
249
250
251
252
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 248

def never
  error_generator.raise_double_negation_error("expect(obj)") if negative?
  @expected_received_count = 0
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly one time.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).once
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


259
260
261
262
263
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 259

def once(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 1
  self
end
    
  


    
      
  
  
    Expect messages to be received in a specific order.


  


  
  
    Examples:
    
      
      expect(api).to receive(:prepare).ordered
expect(api).to receive(:run).ordered
expect(api).to receive(:finish).ordered
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 333

def ordered(&block)
  if type == :stub
    RSpec.warning(
      "`allow(...).to receive(..).ordered` is not supported and will " \
      "have no effect, use `and_return(*ordered_values)` instead."
    )
  end

  self.inner_implementation_action = block
  additional_expected_calls.times do
    @order_group.register(self)
  end
  @ordered = true
  self
end
    
  


    
      
  
  
    Expect a message to be received exactly three times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).thrice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


281
282
283
284
285
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 281

def thrice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 3
  self
end
    
  


    
      
  
  
    Syntactic sugar for exactly, at_least and at_most.


  


  
  
    Examples:
    
      
      expect(dealer).to receive(:deal_card).exactly(10).times
expect(dealer).to receive(:deal_card).at_least(10).times
expect(dealer).to receive(:deal_card).at_most(10).times
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


237
238
239
240
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 237

def times(&block)
  self.inner_implementation_action = block
  self
end
    
  


    
      
  
  
    Returns a nice representation of the message expectation.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        a nice representation of the message expectation

      
    
  



  
    
      


350
351
352
353
354
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 350

def to_s
  args_description = error_generator.method_call_args_description(@argument_list_matcher.expected_args, "", "") { true }
  args_description = "(#{args_description})" unless args_description.start_with?("(")
  "#<#{self.class} #{error_generator.intro}.#{message}#{args_description}>"
end
    
  


    
      
  
  
    Expect a message to be received exactly two times.


  


  
  
    Examples:
    
      
      expect(car).to receive(:go).twice
    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


270
271
272
273
274
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 270

def twice(&block)
  self.inner_implementation_action = block
  set_expected_received_count :exactly, 2
  self
end
    
  


    
      
  
  
    Constrains a stub or message expectation to invocations with specific
arguments.

With a stub, if the message might be received with other args as well,
you should stub a default value first, and then stub or mock the same
message using with to constrain to specific arguments.

A message expectation will fail if the message is received with different
arguments.


  


  
  
    Examples:
    
      
      allow(cart).to receive(:add) { :failure }
allow(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => :failure

cart.add(Book.new(:isbn => 1934356379))# => :success


expect(cart).to receive(:add).with(Book.new(:isbn => 1934356379)) { :success }
cart.add(Book.new(:isbn => 1234567890))# => failed expectation

cart.add(Book.new(:isbn => 1934356379))# => passes

    
  

Returns:

  
    
      
      
        (MessageExpectation)
      
      
      
        —
        self, to support further chaining.

      
    
  



  
    
      


314
315
316
317
318
319
320
321
322
323
324
    
    
      # File 'lib/rspec/mocks/message_expectation.rb', line 314

def with(*args, &block)
  raise_already_invoked_error_if_necessary(__method__)
  if args.empty?
    raise ArgumentError,
          "`with` must have at least one argument. Use `no_args` matcher to set the expectation of receiving no arguments."
  end

  self.inner_implementation_action = block
  @argument_list_matcher = ArgumentListMatcher.new(*args)
  self
end
    
  


    
  

