Module: RSpec::Expectations
  
  
  
Module: RSpec::Expectations
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/expectations.rb
lib/rspec/expectations.rb

  
    Defined in:
    lib/rspec/expectations.rb

  
  

  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/expectations.rb

  
  


OverviewOverview
  
    RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. To express an expected outcome, wrap an object or block in expect, call to or to_not (aliased as not_to) and pass it a matcher object:.RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. To express an expected outcome, wrap an object or block in expect, call to or to_not (aliased as not_to) and pass it a matcher object:.

expectexpect((orderorder..totaltotal))..toto eqeq((MoneyMoney..newnew((5.555.55,, :USD:USD))))
expectexpect((listlist))..toto includeinclude((useruser))
expectexpect((messagemessage))..not_tonot_to matchmatch((//foofoo///foo/))
expectexpect {{ do_somethingdo_something }}..toto raise_errorraise_error
expect(order.total).to eq(Money.new(5.55, :USD))
expect(list).to include(user)
expect(message).not_to match(/foo/)
expect { do_something }.to raise_error
expect(order.total).to eq(Money.new(5.55, :USD))
expect(list).to include(user)
expect(message).not_to match(/foo/)
expect { do_something }.to raise_error


The last form (the block form) is needed to match against ruby constructs that are not objects, but can only be observed when executing a block of code. This includes raising errors, throwing symbols, yielding, and changing values.The last form (the block form) is needed to match against ruby constructs that are not objects, but can only be observed when executing a block of code. This includes raising errors, throwing symbols, yielding, and changing values.

When expect(...).to is invoked with a matcher, it turns around and calls matcher.matches?(<object wrapped by expect>).  For example, in the expression:.When expect(...).to is invoked with a matcher, it turns around and calls matcher.matches?(<object wrapped by expect>).  For example, in the expression:.

expectexpect((orderorder..totaltotal))..toto eqeq((MoneyMoney..newnew((5.555.55,, :USD:USD))))
expect(order.total).to eq(Money.new(5.55, :USD))
expect(order.total).to eq(Money.new(5.55, :USD))


...eq(Money.new(5.55, :USD)) returns a matcher object, and it results in the equivalent of eq.matches?(order.total). If matches? returns true, the expectation is met and execution continues. If false, then the spec fails with the message returned by eq.failure_message....eq(Money.new(5.55, :USD)) returns a matcher object, and it results in the equivalent of eq.matches?(order.total). If matches? returns true, the expectation is met and execution continues. If false, then the spec fails with the message returned by eq.failure_message.

Given the expression:.Given the expression:.

expectexpect((orderorder..entriesentries))..not_tonot_to includeinclude((entryentry))
expect(order.entries).not_to include(entry)
expect(order.entries).not_to include(entry)


...the not_to method (also available as to_not) invokes the equivalent of include.matches?(order.entries), but it interprets false as success, and true as a failure, using the message generated by include.failure_message_when_negated....the not_to method (also available as to_not) invokes the equivalent of include.matches?(order.entries), but it interprets false as success, and true as a failure, using the message generated by include.failure_message_when_negated.

rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.

See RSpec::Matchers for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.See RSpec::Matchers for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.


  
    RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. To express an expected outcome, wrap an object or block in expect, call to or to_not (aliased as not_to) and pass it a matcher object:.

expect(order.total).to eq(Money.new(5.55, :USD))
expect(list).to include(user)
expect(message).not_to match(/foo/)
expect { do_something }.to raise_error


The last form (the block form) is needed to match against ruby constructs that are not objects, but can only be observed when executing a block of code. This includes raising errors, throwing symbols, yielding, and changing values.

When expect(...).to is invoked with a matcher, it turns around and calls matcher.matches?(<object wrapped by expect>).  For example, in the expression:.

expect(order.total).to eq(Money.new(5.55, :USD))


...eq(Money.new(5.55, :USD)) returns a matcher object, and it results in the equivalent of eq.matches?(order.total). If matches? returns true, the expectation is met and execution continues. If false, then the spec fails with the message returned by eq.failure_message.

Given the expression:.

expect(order.entries).not_to include(entry)


...the not_to method (also available as to_not) invokes the equivalent of include.matches?(order.entries), but it interprets false as success, and true as a failure, using the message generated by include.failure_message_when_negated.

rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.

See RSpec::Matchers for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.


  

  
    RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. To express an expected outcome, wrap an object or block in expect, call to or to_not (aliased as not_to) and pass it a matcher object:.

expect(order.total).to eq(Money.new(5.55, :USD))
expect(list).to include(user)
expect(message).not_to match(/foo/)
expect { do_something }.to raise_error


The last form (the block form) is needed to match against ruby constructs that are not objects, but can only be observed when executing a block of code. This includes raising errors, throwing symbols, yielding, and changing values.

When expect(...).to is invoked with a matcher, it turns around and calls matcher.matches?(<object wrapped by expect>).  For example, in the expression:.

expect(order.total).to eq(Money.new(5.55, :USD))


...eq(Money.new(5.55, :USD)) returns a matcher object, and it results in the equivalent of eq.matches?(order.total). If matches? returns true, the expectation is met and execution continues. If false, then the spec fails with the message returned by eq.failure_message.

Given the expression:.

expect(order.entries).not_to include(entry)


...the not_to method (also available as to_not) invokes the equivalent of include.matches?(order.entries), but it interprets false as success, and true as a failure, using the message generated by include.failure_message_when_negated.

rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.

See RSpec::Matchers for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.


  


  


  

Defined Under NamespaceDefined Under Namespace

  
    
      Modules:Modules: Syntax
    
  
    
      Classes:Classes: Configuration, ExpectationNotMetError, ExpectationTarget, MultipleExpectationsNotMetError
    
  

  
    
      Modules: Syntax
    
  
    
      Classes: Configuration, ExpectationNotMetError, ExpectationTarget, MultipleExpectationsNotMetError
    
  








  
    
      Class Method Summary
      
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    The configuration object.The configuration object.
The configuration object.
The configuration object.

  

  
  
  
  
  
  
  
  

  
    The configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Raises an RSpec::Expectations::ExpectationNotMetError with message.Raises an RSpec::Expectations::ExpectationNotMetError with message.
Raises an RSpec::Expectations::ExpectationNotMetError with message.
Raises an RSpec::Expectations::ExpectationNotMetError with message.

  

  
  
  
  
  
  
  
  

  
    Raises an RSpec::Expectations::ExpectationNotMetError with message.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    The configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Raises an RSpec::Expectations::ExpectationNotMetError with message.

  


      
    
  



  
    Class Method DetailsClass Method Details

    
      
  
  
    The configuration object.The configuration object.


  
    The configuration object.


  

  
    The configuration object.


  


  
Returns:Returns:

  
    
      
      
        (RSpec::Expectations::ConfigurationRSpec::Expectations::Configuration)(RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration objectthe configuration object
the configuration object

      
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  

  
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  



  
Returns:

  
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  



  
    
      


208
209
210


208
209
210
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208# File 'lib/rspec/expectations/configuration.rb', line 208

defdef selfself..configurationconfiguration
  @configuration@configuration ||=||= ConfigurationConfiguration..newnew
endend# File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  

  
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  


  
  
    The configuration object.


  


  
Returns:

  
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  



  
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  


    
      
  
  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  

  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  


  Parameters:Parameters:

  
    
      
        messagemessage
      
      
        (StringString)(String)
      
      
      
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expectedexpected
      
      
        (ObjectObject)(Object)
      
      
        (defaults to: nilnil)(defaults to: nil)
      
      
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actualactual
      
      
        (ObjectObject)(Object)
      
      
        (defaults to: nilnil)(defaults to: nil)
      
      
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  

  
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  




  Parameters:

  
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  




  
    
      


27
28
29
30
31
32
33
34
35
36


27
28
29
30
31
32
33
34
35
36
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27# File 'lib/rspec/expectations/fail_with.rb', line 27

defdef fail_withfail_with((messagemessage,, expectedexpected==nilnil,, actualactual==nilnil))
  unlessunless messagemessage
    raiseraise ArgumentErrorArgumentError,, ""Failure message is nil. Does your matcher define the Failure message is nil. Does your matcher define the """Failure message is nil. Does your matcher define the " \
                         ""appropriate failure_message[_when_negated] method to return a string?appropriate failure_message[_when_negated] method to return a string?"""appropriate failure_message[_when_negated] method to return a string?"
  endend

  messagemessage == ::::RSpecRSpec::::MatchersMatchers::::ExpectedsForMultipleDiffsExpectedsForMultipleDiffs..fromfrom((expectedexpected))..message_with_diffmessage_with_diff((messagemessage,, differdiffer,, actualactual))

  RSpecRSpec::::SupportSupport..notify_failurenotify_failure((RSpecRSpec::::ExpectationsExpectations::::ExpectationNotMetErrorExpectationNotMetError..newnew messagemessage))
endend# File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  

  
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  


  
  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  


  Parameters:

  
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  




  
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  


    
  
    Class Method Details

    
      
  
  
    The configuration object.


  


  
Returns:

  
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  



  
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  


    
      
  
  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  


  Parameters:

  
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  




  
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  


    
  

Module: RSpec::Expectations
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/expectations.rb

  
  


Overview
  
    RSpec::Expectations provides a simple, readable API to express the expected outcomes in a code example. To express an expected outcome, wrap an object or block in expect, call to or to_not (aliased as not_to) and pass it a matcher object:.

expect(order.total).to eq(Money.new(5.55, :USD))
expect(list).to include(user)
expect(message).not_to match(/foo/)
expect { do_something }.to raise_error


The last form (the block form) is needed to match against ruby constructs that are not objects, but can only be observed when executing a block of code. This includes raising errors, throwing symbols, yielding, and changing values.

When expect(...).to is invoked with a matcher, it turns around and calls matcher.matches?(<object wrapped by expect>).  For example, in the expression:.

expect(order.total).to eq(Money.new(5.55, :USD))


...eq(Money.new(5.55, :USD)) returns a matcher object, and it results in the equivalent of eq.matches?(order.total). If matches? returns true, the expectation is met and execution continues. If false, then the spec fails with the message returned by eq.failure_message.

Given the expression:.

expect(order.entries).not_to include(entry)


...the not_to method (also available as to_not) invokes the equivalent of include.matches?(order.entries), but it interprets false as success, and true as a failure, using the message generated by include.failure_message_when_negated.

rspec-expectations ships with a standard set of useful matchers, and writing your own matchers is quite simple.

See RSpec::Matchers for more information about the built-in matchers that ship with rspec-expectations, and how to write your own custom matchers.


  


  

Defined Under Namespace

  
    
      Modules: Syntax
    
  
    
      Classes: Configuration, ExpectationNotMetError, ExpectationTarget, MultipleExpectationsNotMetError
    
  








  
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    The configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Raises an RSpec::Expectations::ExpectationNotMetError with message.

  


      
    
  



  
    Class Method Details

    
      
  
  
    The configuration object.


  


  
Returns:

  
    
      
      
        (RSpec::Expectations::Configuration)
      
      
      
        —
        the configuration object

      
    
  



  
    
      


208
209
210
    
    
      # File 'lib/rspec/expectations/configuration.rb', line 208

def self.configuration
  @configuration ||= Configuration.new
end
    
  


    
      
  
  
    Raises an RSpec::Expectations::ExpectationNotMetError with message. Adds a diff to the failure message when expected and actual are both present.


  


  Parameters:

  
    
      
        message
      
      
        (String)
      
      
      
    
  
    
      
        expected
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  
    
      
        actual
      
      
        (Object)
      
      
        (defaults to: nil)
      
      
    
  




  
    
      


27
28
29
30
31
32
33
34
35
36
    
    
      # File 'lib/rspec/expectations/fail_with.rb', line 27

def fail_with(message, expected=nil, actual=nil)
  unless message
    raise ArgumentError, "Failure message is nil. Does your matcher define the " \
                         "appropriate failure_message[_when_negated] method to return a string?"
  end

  message = ::RSpec::Matchers::ExpectedsForMultipleDiffs.from(expected).message_with_diff(message, differ, actual)

  RSpec::Support.notify_failure(RSpec::Expectations::ExpectationNotMetError.new message)
end
    
  


    
  

