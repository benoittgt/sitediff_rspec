Module: RSpec::Core::Formatters
  
  
  
Module: RSpec::Core::Formatters
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/core/formatters.rb
lib/rspec/core/formatters.rb

  
    Defined in:
    lib/rspec/core/formatters.rb

  
  

  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/formatters.rb

  
  


OverviewOverview
  
    Built-in FormattersBuilt-in Formatters


progress (default) - Prints dots for passing examples, FF for failures, **
                   for pending.progress (default) - Prints dots for passing examples, F for failures, *
                   for pending.
documentation - Prints the docstrings passed to describedescribe and itit methods
              (and their aliases).documentation - Prints the docstrings passed to describe and it methods
              (and their aliases).
htmlhtml
json - Useful for archiving data for subsequent analysis.json - Useful for archiving data for subsequent analysis.

progress (default) - Prints dots for passing examples, F for failures, *
                   for pending.
documentation - Prints the docstrings passed to describe and it methods
              (and their aliases).
html
json - Useful for archiving data for subsequent analysis.


The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the --format (or -f for short) command-line option, e.g.The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the --format (or -f for short) command-line option, e.g.

rspec --format documentation
rspec --format documentation
rspec --format documentation


You can also send the output of multiple formatters to different streams, e.g.You can also send the output of multiple formatters to different streams, e.g.

rspec --format documentation --format html --out results.html
rspec --format documentation --format html --out results.html
rspec --format documentation --format html --out results.html


This example sends the output of the documentation formatter to $stdout, and the output of the html formatter to results.html.This example sends the output of the documentation formatter to $stdout, and the output of the html formatter to results.html.

Custom FormattersCustom Formatters

You can tell RSpec to use a custom formatter by passing its path and name to the rspec command. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:.You can tell RSpec to use a custom formatter by passing its path and name to the rspec command. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:.

rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter
rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter
rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter


The reporter calls every formatter with this protocol:.The reporter calls every formatter with this protocol:.


To start


start(StartNotification)start(StartNotification)start(StartNotification)

start(StartNotification)
To start


start(StartNotification)

Once per example group


example_group_started(GroupNotification)example_group_started(GroupNotification)example_group_started(GroupNotification)

example_group_started(GroupNotification)
Once per example group


example_group_started(GroupNotification)

Once per example


example_started(ExampleNotification)example_started(ExampleNotification)example_started(ExampleNotification)

example_started(ExampleNotification)
Once per example


example_started(ExampleNotification)

One of these per example, depending on outcome


example_passed(ExampleNotification)example_passed(ExampleNotification)example_passed(ExampleNotification)
example_failed(FailedExampleNotification)example_failed(FailedExampleNotification)example_failed(FailedExampleNotification)
example_pending(ExampleNotification)example_pending(ExampleNotification)example_pending(ExampleNotification)

example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)
One of these per example, depending on outcome


example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)

Optionally at any time


message(MessageNotification)message(MessageNotification)message(MessageNotification)

message(MessageNotification)
Optionally at any time


message(MessageNotification)

At the end of the suite


stop(ExamplesNotification)stop(ExamplesNotification)stop(ExamplesNotification)
start_dump(NullNotification)start_dump(NullNotification)start_dump(NullNotification)
dump_pending(ExamplesNotification)dump_pending(ExamplesNotification)dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)dump_failures(ExamplesNotification)dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)dump_summary(SummaryNotification)dump_summary(SummaryNotification)
seed(SeedNotification)seed(SeedNotification)seed(SeedNotification)
close(NullNotification)close(NullNotification)close(NullNotification)

stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)
At the end of the suite


stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)


To start


start(StartNotification)

Once per example group


example_group_started(GroupNotification)

Once per example


example_started(ExampleNotification)

One of these per example, depending on outcome


example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)

Optionally at any time


message(MessageNotification)

At the end of the suite


stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)



Only the notifications to which you subscribe your formatter will be called on your formatter. To subscribe your formatter use: RSpec::Core::Formatters#register e.g.Only the notifications to which you subscribe your formatter will be called on your formatter. To subscribe your formatter use: RSpec::Core::Formatters#register e.g.

RSpec::Core::Formatters.register FormatterClassName, :example_passed, :example_failed.RSpec::Core::Formatters.register FormatterClassName, :example_passed, :example_failed.

We recommend you implement the methods yourself; for simplicity we provide the default formatter output via our notification objects but if you prefer you can subclass RSpec::Core::Formatters::BaseTextFormatter and override the methods you wish to enhance.We recommend you implement the methods yourself; for simplicity we provide the default formatter output via our notification objects but if you prefer you can subclass RSpec::Core::Formatters::BaseTextFormatter and override the methods you wish to enhance.


  
    Built-in Formatters


progress (default) - Prints dots for passing examples, F for failures, *
                   for pending.
documentation - Prints the docstrings passed to describe and it methods
              (and their aliases).
html
json - Useful for archiving data for subsequent analysis.


The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the --format (or -f for short) command-line option, e.g.

rspec --format documentation


You can also send the output of multiple formatters to different streams, e.g.

rspec --format documentation --format html --out results.html


This example sends the output of the documentation formatter to $stdout, and the output of the html formatter to results.html.

Custom Formatters

You can tell RSpec to use a custom formatter by passing its path and name to the rspec command. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:.

rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter


The reporter calls every formatter with this protocol:.


To start


start(StartNotification)

Once per example group


example_group_started(GroupNotification)

Once per example


example_started(ExampleNotification)

One of these per example, depending on outcome


example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)

Optionally at any time


message(MessageNotification)

At the end of the suite


stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)



Only the notifications to which you subscribe your formatter will be called on your formatter. To subscribe your formatter use: RSpec::Core::Formatters#register e.g.

RSpec::Core::Formatters.register FormatterClassName, :example_passed, :example_failed.

We recommend you implement the methods yourself; for simplicity we provide the default formatter output via our notification objects but if you prefer you can subclass RSpec::Core::Formatters::BaseTextFormatter and override the methods you wish to enhance.


  

  
    Built-in Formatters


progress (default) - Prints dots for passing examples, F for failures, *
                   for pending.
documentation - Prints the docstrings passed to describe and it methods
              (and their aliases).
html
json - Useful for archiving data for subsequent analysis.


The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the --format (or -f for short) command-line option, e.g.

rspec --format documentation


You can also send the output of multiple formatters to different streams, e.g.

rspec --format documentation --format html --out results.html


This example sends the output of the documentation formatter to $stdout, and the output of the html formatter to results.html.

Custom Formatters

You can tell RSpec to use a custom formatter by passing its path and name to the rspec command. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:.

rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter


The reporter calls every formatter with this protocol:.


To start


start(StartNotification)

Once per example group


example_group_started(GroupNotification)

Once per example


example_started(ExampleNotification)

One of these per example, depending on outcome


example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)

Optionally at any time


message(MessageNotification)

At the end of the suite


stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)



Only the notifications to which you subscribe your formatter will be called on your formatter. To subscribe your formatter use: RSpec::Core::Formatters#register e.g.

RSpec::Core::Formatters.register FormatterClassName, :example_passed, :example_failed.

We recommend you implement the methods yourself; for simplicity we provide the default formatter output via our notification objects but if you prefer you can subclass RSpec::Core::Formatters::BaseTextFormatter and override the methods you wish to enhance.


  


  

  See Also:See Also:
  
    
      BaseTextFormatterBaseTextFormatter
    
      ReporterReporter
    
  
    
      BaseTextFormatter
    
      Reporter
    
  


  

  See Also:
  
    
      BaseTextFormatter
    
      Reporter
    
  

Defined Under NamespaceDefined Under Namespace

  
    
      Modules:Modules: ConsoleCodes, Helpers
    
  
    
      Classes:Classes: BaseFormatter, BaseTextFormatter, FallbackMessageFormatter, HtmlSnippetExtractor, Loader, ProfileFormatter, Protocol
    
  

  
    
      Modules: ConsoleCodes, Helpers
    
  
    
      Classes: BaseFormatter, BaseTextFormatter, FallbackMessageFormatter, HtmlSnippetExtractor, Loader, ProfileFormatter, Protocol
    
  








  
    
      Class Method Summary
      
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Register the formatter class.Register the formatter class.
Register the formatter class.
Register the formatter class.

  

  
  
  
  
  
  
  
  

  
    Register the formatter class.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Register the formatter class.

  


      
    
  



  
    Class Method DetailsClass Method Details

    
      
  
  
    Register the formatter class.Register the formatter class.


  
    Register the formatter class.


  

  
    Register the formatter class.


  


  Parameters:Parameters:

  
    
      
        formatter_classformatter_class
      
      
        (ClassClass)(Class)
      
      
      
        —
        formatter class to registerformatter class to register
formatter class to register

      
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notificationsnotifications
      
      
        (SymbolSymbol, ......)(Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatterone or more notifications to be registered to the specified formatter
one or more notifications to be registered to the specified formatter

      
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  

  
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  



  See Also:See Also:
  
    
      BaseFormatterBaseFormatter
    
  
    
      BaseFormatter
    
  


  Parameters:

  
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  



  See Also:
  
    
      BaseFormatter
    
  


  
    
      


85
86
87


85
86
87
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85# File 'lib/rspec/core/formatters.rb', line 85

defdef selfself..registerregister((formatter_classformatter_class,, **notificationsnotifications))
  LoaderLoader..formattersformatters[[formatter_classformatter_class]] == notificationsnotifications
endend# File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  

  
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  


  
  
    Register the formatter class.


  


  Parameters:

  
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  



  See Also:
  
    
      BaseFormatter
    
  


  
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  


    
  
    Class Method Details

    
      
  
  
    Register the formatter class.


  


  Parameters:

  
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  



  See Also:
  
    
      BaseFormatter
    
  


  
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  


    
  

Module: RSpec::Core::Formatters
  
  
  


  

  
  
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/formatters.rb

  
  


Overview
  
    Built-in Formatters


progress (default) - Prints dots for passing examples, F for failures, *
                   for pending.
documentation - Prints the docstrings passed to describe and it methods
              (and their aliases).
html
json - Useful for archiving data for subsequent analysis.


The progress formatter is the default, but you can choose any one or more of the other formatters by passing with the --format (or -f for short) command-line option, e.g.

rspec --format documentation


You can also send the output of multiple formatters to different streams, e.g.

rspec --format documentation --format html --out results.html


This example sends the output of the documentation formatter to $stdout, and the output of the html formatter to results.html.

Custom Formatters

You can tell RSpec to use a custom formatter by passing its path and name to the rspec command. For example, if you define MyCustomFormatter in path/to/my_custom_formatter.rb, you would type this command:.

rspec --require path/to/my_custom_formatter.rb --format MyCustomFormatter


The reporter calls every formatter with this protocol:.


To start


start(StartNotification)

Once per example group


example_group_started(GroupNotification)

Once per example


example_started(ExampleNotification)

One of these per example, depending on outcome


example_passed(ExampleNotification)
example_failed(FailedExampleNotification)
example_pending(ExampleNotification)

Optionally at any time


message(MessageNotification)

At the end of the suite


stop(ExamplesNotification)
start_dump(NullNotification)
dump_pending(ExamplesNotification)
dump_failures(ExamplesNotification)
dump_summary(SummaryNotification)
seed(SeedNotification)
close(NullNotification)



Only the notifications to which you subscribe your formatter will be called on your formatter. To subscribe your formatter use: RSpec::Core::Formatters#register e.g.

RSpec::Core::Formatters.register FormatterClassName, :example_passed, :example_failed.

We recommend you implement the methods yourself; for simplicity we provide the default formatter output via our notification objects but if you prefer you can subclass RSpec::Core::Formatters::BaseTextFormatter and override the methods you wish to enhance.


  


  

  See Also:
  
    
      BaseTextFormatter
    
      Reporter
    
  

Defined Under Namespace

  
    
      Modules: ConsoleCodes, Helpers
    
  
    
      Classes: BaseFormatter, BaseTextFormatter, FallbackMessageFormatter, HtmlSnippetExtractor, Loader, ProfileFormatter, Protocol
    
  








  
    
      Class Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Register the formatter class.

  


      
    
  



  
    Class Method Details

    
      
  
  
    Register the formatter class.


  


  Parameters:

  
    
      
        formatter_class
      
      
        (Class)
      
      
      
        —
        formatter class to register

      
    
  
    
      
        notifications
      
      
        (Symbol, ...)
      
      
      
        —
        one or more notifications to be registered to the specified formatter

      
    
  



  See Also:
  
    
      BaseFormatter
    
  


  
    
      


85
86
87
    
    
      # File 'lib/rspec/core/formatters.rb', line 85

def self.register(formatter_class, *notifications)
  Loader.formatters[formatter_class] = notifications
end
    
  


    
  

