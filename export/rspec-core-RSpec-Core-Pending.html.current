Module: RSpec::Core::Pending
  
  
  
Module: RSpec::Core::Pending
  
  
  


  

  
  
  
  
  

  
  
    Included in:Included in:
    ExampleGroupExampleGroup
  
    Included in:
    ExampleGroup
  
  

  
  
    Defined in:Defined in:
    lib/rspec/core/pending.rblib/rspec/core/pending.rb
  
    Defined in:
    lib/rspec/core/pending.rb
  
  

  

  
  
  
  
  

  
  
    Included in:
    ExampleGroup
  
  

  
  
    Defined in:
    lib/rspec/core/pending.rb
  
  


OverviewOverview
  
    Provides methods to mark examples as pending. These methods are available
to be called from within any example or hook.Provides methods to mark examples as pending. These methods are available
to be called from within any example or hook.


  
    Provides methods to mark examples as pending. These methods are available
to be called from within any example or hook.


  

  
    Provides methods to mark examples as pending. These methods are available
to be called from within any example or hook.


  


  


  

Defined Under NamespaceDefined Under Namespace

  
    
  
    
      Classes:Classes: SkipDeclaredInExample
    
  

  
    
  
    
      Classes: SkipDeclaredInExample
    
  








  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending.Marks an example as pending.
Marks an example as pending.
Marks an example as pending.

  

  
  
  
  
  
  
  
  

  
    Marks an example as pending.

  


      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending and skips execution.Marks an example as pending and skips execution.
Marks an example as pending and skips execution.
Marks an example as pending and skips execution.

  

  
  
  
  
  
  
  
  

  
    Marks an example as pending and skips execution.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending.

  


      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending and skips execution.

  


      
    
  



  
    Instance Method DetailsInstance Method Details

    
      
  
  
    
  
    Note:Note:
    before(:example)before(:example) hooks are eval'd when you use the pendingpending
method within an example. If you want to declare an example pendingpending
and bypass the beforebefore hooks as well, you can pass :pending => true:pending => true
to the itit method:before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

itit ""does somethingdoes something"""does something",, :pending:pending =>=> truetrue dodo
  # ...
# ...
endend
it "does something", :pending => true do
  # ...
end
it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished":pending => "something else getting finished" to add a
message to the summary report:or pass :pending => "something else getting finished" to add a
message to the summary report:

itit ""does somethingdoes something"""does something",, :pending:pending =>=> ""something else getting finishedsomething else getting finished"""something else getting finished" dodo
  # ...
# ...
endend
it "does something", :pending => "something else getting finished" do
  # ...
end
it "does something", :pending => "something else getting finished" do
  # ...
end

before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  
    
  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  

  
    
  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  


  
  
    Examples:Examples:
    
      
      describedescribe ""an examplean example"""an example" dodo
  # reported as "Pending: no reason given"
# reported as "Pending: no reason given"
  itit ""is pending with no messageis pending with no message"""is pending with no message" dodo
    pendingpending
    raiseraise ""brokenbroken"""broken"
  endend

  # reported as "Pending: something else getting finished"
# reported as "Pending: something else getting finished"
  itit ""is pending with a custom messageis pending with a custom message"""is pending with a custom message" dodo
    pendingpending((""something else getting finishedsomething else getting finished"""something else getting finished"))
    raiseraise ""brokenbroken"""broken"
  endend
endenddescribe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
enddescribe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
Parameters:Parameters:

  
    
      
        messagemessage
      
      
        (StringString)(String)
      
      
        (defaults to: nilnil)(defaults to: nil)
      
      
        —
        optional message to add to the summary report.optional message to add to the summary report.
optional message to add to the summary report.

      
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  




  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  




  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70# File 'lib/rspec/core/pending.rb', line 70

defdef pendingpending((messagemessage==nilnil))
  current_examplecurrent_example == RSpecRSpec..current_examplecurrent_example

  ifif block_given?block_given?
    raiseraise ArgumentErrorArgumentError,, <<-EOS<<-EOS..gsubgsub((//^\s+\|^\s+\|///^\s+\|/,, ''''''))
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from       |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{#{CallerFilterCallerFilter..first_non_rspec_linefirst_non_rspec_line}}.
      |
.
      |
    EOS
    EOS
  elsifelsif current_examplecurrent_example
    PendingPending..mark_pending!mark_pending! current_examplecurrent_example,, messagemessage
  elseelse
    raiseraise ""`pending` may not be used outside of examples, such as in `pending` may not be used outside of examples, such as in """`pending` may not be used outside of examples, such as in " \
          ""before(:context). Maybe you want `skip`?before(:context). Maybe you want `skip`?"""before(:context). Maybe you want `skip`?"
  endend
endend# File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  

  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  


  
  
    
  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  




  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  


    
      
  
  
    Marks an example as pending and skips execution.Marks an example as pending and skips execution.


  
    Marks an example as pending and skips execution.


  

  
    Marks an example as pending and skips execution.


  


  
  
    Examples:Examples:
    
      
      describedescribe ""an examplean example"""an example" dodo
  # reported as "Pending: no reason given"
# reported as "Pending: no reason given"
  itit ""is skipped with no messageis skipped with no message"""is skipped with no message" dodo
    skipskip
  endend

  # reported as "Pending: something else getting finished"
# reported as "Pending: something else getting finished"
  itit ""is skipped with a custom messageis skipped with a custom message"""is skipped with a custom message" dodo
    skipskip ""something else getting finishedsomething else getting finished"""something else getting finished"
  endend
endenddescribe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
enddescribe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
Parameters:Parameters:

  
    
      
        messagemessage
      
      
        (StringString)(String)
      
      
        (defaults to: nilnil)(defaults to: nil)
      
      
        —
        optional message to add to the summary report.optional message to add to the summary report.
optional message to add to the summary report.

      
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  


Raises:Raises:

  
    
      
      
        (SkipDeclaredInExampleSkipDeclaredInExample)(SkipDeclaredInExample)
      
      
      
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  

  
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  



  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  


Raises:

  
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  



  
    
      


118
119
120
121
122
123
124


118
119
120
121
122
123
124
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118# File 'lib/rspec/core/pending.rb', line 118

defdef skipskip((messagemessage==nilnil))
  current_examplecurrent_example == RSpecRSpec..current_examplecurrent_example

  PendingPending..mark_skipped!mark_skipped!((current_examplecurrent_example,, messagemessage)) ifif current_examplecurrent_example

  raiseraise SkipDeclaredInExampleSkipDeclaredInExample..newnew((messagemessage))
endend# File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  

  
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  


  
  
    Marks an example as pending and skips execution.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  


Raises:

  
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  



  
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  


    
  
    Instance Method Details

    
      
  
  
    
  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  




  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  


    
      
  
  
    Marks an example as pending and skips execution.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  


Raises:

  
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  



  
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  


    
  

Module: RSpec::Core::Pending
  
  
  


  

  
  
  
  
  

  
  
    Included in:
    ExampleGroup
  
  

  
  
    Defined in:
    lib/rspec/core/pending.rb
  
  


Overview
  
    Provides methods to mark examples as pending. These methods are available
to be called from within any example or hook.


  


  

Defined Under Namespace

  
    
  
    
      Classes: SkipDeclaredInExample
    
  








  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending.

  


      
        
  
  
  
  
  
  
  
  

  
    Marks an example as pending and skips execution.

  


      
    
  



  
    Instance Method Details

    
      
  
  
    
  
    Note:
    before(:example) hooks are eval'd when you use the pending
method within an example. If you want to declare an example pending
and bypass the before hooks as well, you can pass :pending => true
to the it method:

it "does something", :pending => true do
  # ...
end


or pass :pending => "something else getting finished" to add a
message to the summary report:

it "does something", :pending => "something else getting finished" do
  # ...
end


  

Marks an example as pending. The rest of the example will still be
executed, and if it passes the example will fail to indicate that the
pending can be removed.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is pending with no message" do
    pending
    raise "broken"
  end

  # reported as "Pending: something else getting finished"
  it "is pending with a custom message" do
    pending("something else getting finished")
    raise "broken"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  




  
    
      


70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
    
    
      # File 'lib/rspec/core/pending.rb', line 70

def pending(message=nil)
  current_example = RSpec.current_example

  if block_given?
    raise ArgumentError, <<-EOS.gsub(/^\s+\|/, '')
      |The semantics of `RSpec::Core::Pending#pending` have changed in
      |RSpec 3. In RSpec 2.x, it caused the example to be skipped. In
      |RSpec 3, the rest of the example is still run but is expected to
      |fail, and will be marked as a failure (rather than as pending) if
      |the example passes.
      |
      |Passing a block within an example is now deprecated. Marking the
      |example as pending provides the same behavior in RSpec 3 which was
      |provided only by the block in RSpec 2.x.
      |
      |Move the code in the block provided to `pending` into the rest of
      |the example body.
      |
      |Called from #{CallerFilter.first_non_rspec_line}.
      |
    EOS
  elsif current_example
    Pending.mark_pending! current_example, message
  else
    raise "`pending` may not be used outside of examples, such as in " \
          "before(:context). Maybe you want `skip`?"
  end
end
    
  


    
      
  
  
    Marks an example as pending and skips execution.


  


  
  
    Examples:
    
      
      describe "an example" do
  # reported as "Pending: no reason given"
  it "is skipped with no message" do
    skip
  end

  # reported as "Pending: something else getting finished"
  it "is skipped with a custom message" do
    skip "something else getting finished"
  end
end
    
  
Parameters:

  
    
      
        message
      
      
        (String)
      
      
        (defaults to: nil)
      
      
        —
        optional message to add to the summary report.

      
    
  


Raises:

  
    
      
      
        (SkipDeclaredInExample)
      
      
      
    
  



  
    
      


118
119
120
121
122
123
124
    
    
      # File 'lib/rspec/core/pending.rb', line 118

def skip(message=nil)
  current_example = RSpec.current_example

  Pending.mark_skipped!(current_example, message) if current_example

  raise SkipDeclaredInExample.new(message)
end
    
  


    
  

