[1mdiff --git a/export/rspec-core-RSpec-Core-Example.html.current b/export/rspec-core-RSpec-Core-Example.html.new[m
[1mindex fa3f612..f245ed4 100644[m
[1m--- a/export/rspec-core-RSpec-Core-Example.html.current[m
[1m+++ b/export/rspec-core-RSpec-Core-Example.html.new[m
[36m@@ -5836,8 +5836,7 @@[m [mdefdef runrun((example_group_instanceexample_group_instance,, reporterreporter))[m
                   ''Expected example to fail since it is pending, but it passed.Expected example to fail since it is pending, but it passed.'''Expected example to fail since it is pending, but it passed.',,[m
                   [[locationlocation]][m
           endend[m
[31m-        rescuerescue PendingPending::::SkipDeclaredInExampleSkipDeclaredInExample =>=> __[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescuerescue PendingPending::::SkipDeclaredInExampleSkipDeclaredInExample =>=> __          # The "=> _" is normally useless but on JRuby it is a workaround[m
 # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
 # for a bug that prevents us from getting backtraces:[m
[36m@@ -5894,8 +5894,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -5947,8 +5947,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -6057,8 +6057,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -6169,8 +6169,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -6313,8 +6313,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -7247,8 +7247,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
[36m@@ -8800,8 +8800,7 @@[m [mdef run(example_group_instance, reporter)[m
                   'Expected example to fail since it is pending, but it passed.',[m
                   [location][m
           end[m
[31m-        rescue Pending::SkipDeclaredInExample => _[m
[31m-          # The "=> _" is normally useless but on JRuby it is a workaround[m
[32m+[m[32m        rescue Pending::SkipDeclaredInExample => _          # The "=> _" is normally useless but on JRuby it is a workaround[m
           # for a bug that prevents us from getting backtraces:[m
           # https://github.com/jruby/jruby/issues/4467[m
           #[m
