[1mdiff --git a/export/rspec-rails-RSpec-Rails-Matchers-HaveHttpStatus.html.current b/export/rspec-rails-RSpec-Rails-Matchers-HaveHttpStatus.html.new[m
[1mindex 811c4ae..73e797e 100644[m
[1m--- a/export/rspec-rails-RSpec-Rails-Matchers-HaveHttpStatus.html.current[m
[1m+++ b/export/rspec-rails-RSpec-Rails-Matchers-HaveHttpStatus.html.new[m
[36m@@ -19,11 +21,23 @@[m [mModule: RSpec::Rails::Matchers::HaveHttpStatus[m
     Included in:Included in:[m
     GenericStatus, NumericCode, SymbolicStatusGenericStatus, NumericCode, SymbolicStatus[m
   [m
[32m+[m[32m    Included in:[m
[32m+[m[32m    GenericStatus, NumericCode, SymbolicStatus[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m
   [m
   [m
     Defined in:Defined in:[m
     lib/rspec/rails/matchers/have_http_status.rblib/rspec/rails/matchers/have_http_status.rb[m
   [m
[32m+[m[32m    Defined in:[m
[32m+[m[32m    lib/rspec/rails/matchers/have_http_status.rb[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m
[32m+[m[41m  [m
[32m+[m
   [m
   [m
   [m
[36m@@ -504,8 +546,7 @@[m [mdefdef as_test_responseas_test_response((objobj))[m
     ::::ActionDispatchActionDispatch::::TestResponseTestResponse..from_responsefrom_response((objobj))[m
   elsifelsif ::::ActionDispatchActionDispatch::::TestResponseTestResponse ====== objobj[m
     objobj[m
[31m-  elsifelsif objobj..respond_to?respond_to?((:status_code:status_code)) &&&& objobj..respond_to?respond_to?((:response_headers:response_headers))[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsifelsif objobj..respond_to?respond_to?((:status_code:status_code)) &&&& objobj..respond_to?respond_to?((:response_headers:response_headers))    # Acts As Capybara Session[m
 # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
 # Hack to support `Capybara::Session` without having to load[m
[36m@@ -529,10 +571,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -553,10 +595,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -605,10 +647,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -659,10 +701,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -758,10 +802,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -1236,10 +1298,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
[36m@@ -1851,10 +1938,10 @@[m [mdef as_test_response(obj)[m
     ::ActionDispatch::TestResponse.from_response(obj)[m
   elsif ::ActionDispatch::TestResponse === obj[m
     obj[m
[31m-  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)[m
[31m-    # Acts As Capybara Session[m
[32m+[m[32m  elsif obj.respond_to?(:status_code) && obj.respond_to?(:response_headers)    # Acts As Capybara Session[m
     # Hack to support `Capybara::Session` without having to load[m
     # Capybara or catch `NameError`s for the undefined constants[m
[32m+[m
     obj = ActionDispatch::Response.new.tap do |resp|[m
       resp.status  = obj.status_code[m
       resp.headers.clear[m
