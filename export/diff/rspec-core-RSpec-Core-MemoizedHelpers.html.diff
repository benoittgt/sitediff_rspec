[1mdiff --git a/export/rspec-core-RSpec-Core-MemoizedHelpers.html.current b/export/rspec-core-RSpec-Core-MemoizedHelpers.html.new[m
[1mindex 0bced67..d0565b6 100644[m
[1m--- a/export/rspec-core-RSpec-Core-MemoizedHelpers.html.current[m
[1m+++ b/export/rspec-core-RSpec-Core-MemoizedHelpers.html.new[m
[36m@@ -1158,19 +1158,19 @@[m [mend[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpecRSpec..describedescribe WidgetWidget dodo[m
[31m-  itit {{ is_expectedis_expected..toto validate_presence_ofvalidate_presence_of((:name:name)) }}[m
[31m-  # or[m
[32m+[m[32m  itit {{ is_expectedis_expected..toto validate_presence_ofvalidate_presence_of((:name:name)) }}  # or[m
 # or[m
[32m+[m
   itit {{ shouldshould validate_presence_ofvalidate_presence_of((:name:name)) }}[m
 endend[m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1179,8 +1179,8 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
 subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1192,8 +1192,8 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1222,8 +1222,8 @@[m [mBecause subject is designed to create state that is reset between each example,[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1249,8 +1249,8 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1281,9 +1281,9 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
 RSpecRSpec..describedescribe PersonPerson dodo[m
   subjectsubject {{ PersonPerson..newnew((:birthdate:birthdate =>=> 1919..yearsyears..agoago)) }}[m
   itit ""should be eligible to voteshould be eligible to vote"""should be eligible to vote" dodo[m
[31m-    subjectsubject..shouldshould be_eligible_to_votebe_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subjectsubject..shouldshould be_eligible_to_votebe_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
 # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   endend[m
 endend[m
 [m
[36m@@ -1291,64 +1291,64 @@[m [mendend[m
 # Implicit subject => { Person.new }.[m
 RSpecRSpec..describedescribe PersonPerson dodo[m
   itit ""should be eligible to voteshould be eligible to vote"""should be eligible to vote" dodo[m
[31m-    subjectsubject..shouldshould be_eligible_to_votebe_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subjectsubject..shouldshould be_eligible_to_votebe_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
 # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   endend[m
 endend[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 # One-liner syntax - expectation is set on the subject.[m
 RSpecRSpec..describedescribe PersonPerson dodo[m
[31m-  itit {{ is_expectedis_expected..toto be_eligible_to_votebe_eligible_to_vote }}[m
[31m-  # or[m
[32m+[m[32m  itit {{ is_expectedis_expected..toto be_eligible_to_votebe_eligible_to_vote }}  # or[m
 # or[m
[32m+[m
   itit {{ shouldshould be_eligible_to_votebe_eligible_to_vote }}[m
 endend[m
 # Explicit declaration of subject.[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
 # Explicit declaration of subject.[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
[36m@@ -1361,23 +1361,23 @@[m [mend[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
[36m@@ -1414,23 +1414,23 @@[m [mend[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
[36m@@ -1562,8 +1562,8 @@[m [mend[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1593,23 +1593,23 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
[36m@@ -1859,8 +1859,8 @@[m [mend[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -1890,23 +1890,23 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
[36m@@ -2301,8 +2301,8 @@[m [mend[m
     subject was contributed by Joe Ferris to support the one-liner syntax embraced by shoulda matchers:.[m
 [m
 RSpec.describe Widget do[m
[31m-  it { is_expected.to validate_presence_of(:name) }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to validate_presence_of(:name) }  # or[m
[32m+[m
   it { should validate_presence_of(:name) }[m
 end[m
 [m
[36m@@ -2332,23 +2332,23 @@[m [mWhile the examples below demonstrate how to use subject explicitly in examples,[m
 RSpec.describe Person do[m
   subject { Person.new(:birthdate => 19.years.ago) }[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # Implicit subject => { Person.new }.[m
 RSpec.describe Person do[m
   it "should be eligible to vote" do[m
[31m-    subject.should be_eligible_to_vote[m
[31m-    # ^ ^ explicit reference to subject not recommended[m
[32m+[m[32m    subject.should be_eligible_to_vote    # ^ ^ explicit reference to subject not recommended[m
[32m+[m
   end[m
 end[m
 [m
 # One-liner syntax - expectation is set on the subject.[m
 RSpec.describe Person do[m
[31m-  it { is_expected.to be_eligible_to_vote }[m
[31m-  # or[m
[32m+[m[32m  it { is_expected.to be_eligible_to_vote }  # or[m
[32m+[m
   it { should be_eligible_to_vote }[m
 end[m
     [m
