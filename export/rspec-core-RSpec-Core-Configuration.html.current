Class: RSpec::Core::Configuration
  
  
  
Class: RSpec::Core::Configuration
  
  
  


  
  
    Inherits:Inherits:
    
      ObjectObject
      
        
          ObjectObject
          
            RSpec::Core::ConfigurationRSpec::Core::Configuration
          
        
          Object
          
            RSpec::Core::Configuration
          
        
        show allshow all
      
    
      Object
      
        
          Object
          
            RSpec::Core::Configuration
          
        
        show all
      
    
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Core::Configuration
          
        
        show all
      
    
  
  

  
  
  
  
  
      Includes:Includes:
      Module.new, HooksModule.new, Hooks
  
      Includes:
      Module.new, Hooks
  
  
  

  

  
  
    Defined in:Defined in:
    lib/rspec/core/configuration.rblib/rspec/core/configuration.rb
  
    Defined in:
    lib/rspec/core/configuration.rb
  
  

  
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Core::Configuration
          
        
        show all
      
    
  
  

  
  
  
  
  
      Includes:
      Module.new, Hooks
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/configuration.rb
  
  


OverviewOverview
  
    Stores runtime configuration information.Stores runtime configuration information.

Configuration options are loaded from multiple files and joined together
with command-line switches and the SPEC_OPTSSPEC_OPTS environment variable.Configuration options are loaded from multiple files and joined together
with command-line switches and the SPEC_OPTS environment variable.

Precedence order (where later entries overwrite earlier entries on
conflicts):Precedence order (where later entries overwrite earlier entries on
conflicts):


Global ($XDG_CONFIG_HOME/rspec/options$XDG_CONFIG_HOME/rspec/options, or ~/.rspec~/.rspec if it does
not exist)Global ($XDG_CONFIG_HOME/rspec/options, or ~/.rspec if it does
not exist)
Project-specific (./.rspec./.rspec)Project-specific (./.rspec)
Local (./.rspec-local./.rspec-local)Local (./.rspec-local)
Command-line optionsCommand-line options
SPEC_OPTSSPEC_OPTSSPEC_OPTS

Global ($XDG_CONFIG_HOME/rspec/options, or ~/.rspec if it does
not exist)
Project-specific (./.rspec)
Local (./.rspec-local)
Command-line options
SPEC_OPTS


For example, an option set in the local file will override an option set
in your global file.For example, an option set in the local file will override an option set
in your global file.

The global, project-specific and local files can all be overridden with a
separate custom file using the --options command-line parameter.The global, project-specific and local files can all be overridden with a
separate custom file using the --options command-line parameter.


  
    Stores runtime configuration information.

Configuration options are loaded from multiple files and joined together
with command-line switches and the SPEC_OPTS environment variable.

Precedence order (where later entries overwrite earlier entries on
conflicts):


Global ($XDG_CONFIG_HOME/rspec/options, or ~/.rspec if it does
not exist)
Project-specific (./.rspec)
Local (./.rspec-local)
Command-line options
SPEC_OPTS


For example, an option set in the local file will override an option set
in your global file.

The global, project-specific and local files can all be overridden with a
separate custom file using the --options command-line parameter.


  

  
    Stores runtime configuration information.

Configuration options are loaded from multiple files and joined together
with command-line switches and the SPEC_OPTS environment variable.

Precedence order (where later entries overwrite earlier entries on
conflicts):


Global ($XDG_CONFIG_HOME/rspec/options, or ~/.rspec if it does
not exist)
Project-specific (./.rspec)
Local (./.rspec-local)
Command-line options
SPEC_OPTS


For example, an option set in the local file will override an option set
in your global file.

The global, project-specific and local files can all be overridden with a
separate custom file using the --options command-line parameter.


  


  
  
    Examples:Examples:
    
      
        Standard settingsStandard settings
Standard settings

      
      RSpecRSpec..configureconfigure dodo ||cc||
  cc..drbdrb          == truetrue
  cc..drb_portdrb_port     == 12341234
  cc..default_pathdefault_path == ''behaviorbehavior'''behavior'
endendRSpec.configure do |c|
  c.drb          = true
  c.drb_port     = 1234
  c.default_path = 'behavior'
endRSpec.configure do |c|
  c.drb          = true
  c.drb_port     = 1234
  c.default_path = 'behavior'
end
    
      
        HooksHooks
Hooks

      
      RSpecRSpec..configureconfigure dodo ||cc||
  cc..beforebefore((:suite:suite))   {{ establish_connectionestablish_connection }}
  cc..beforebefore((:example:example)) {{ log_in_aslog_in_as :authorized:authorized }}
  cc..aroundaround((:example:example)) {{ ||exex|| DatabaseDatabase..transactiontransaction((&&exex)) }}
endendRSpec.configure do |c|
  c.before(:suite)   { establish_connection }
  c.before(:example) { log_in_as :authorized }
  c.around(:example) { |ex| Database.transaction(&ex) }
endRSpec.configure do |c|
  c.before(:suite)   { establish_connection }
  c.before(:example) { log_in_as :authorized }
  c.around(:example) { |ex| Database.transaction(&ex) }
end
    
  
    Examples:
    
      
        Standard settings

      
      RSpec.configure do |c|
  c.drb          = true
  c.drb_port     = 1234
  c.default_path = 'behavior'
end
    
      
        Hooks

      
      RSpec.configure do |c|
  c.before(:suite)   { establish_connection }
  c.before(:example) { log_in_as :authorized }
  c.around(:example) { |ex| Database.transaction(&ex) }
end
    
  


  See Also:See Also:
  
    
      RSpec.configureRSpec.configure
    
      HooksHooks
    
  
    
      RSpec.configure
    
      Hooks
    
  


  
  
    Examples:
    
      
        Standard settings

      
      RSpec.configure do |c|
  c.drb          = true
  c.drb_port     = 1234
  c.default_path = 'behavior'
end
    
      
        Hooks

      
      RSpec.configure do |c|
  c.before(:suite)   { establish_connection }
  c.before(:example) { log_in_as :authorized }
  c.around(:example) { |ex| Database.transaction(&ex) }
end
    
  


  See Also:
  
    
      RSpec.configure
    
      Hooks
    
  





  Instance Attribute Summary Instance Attribute Summary 
  
    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.
Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.
Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecateddeprecated
  

  
    Deprecated.Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.
No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.
Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

  

  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The mode for determining whether to display output in color.The mode for determining whether to display output in color.
The mode for determining whether to display output in color.
The mode for determining whether to display output in color.

  

  
  
  
  
    
    
  
  
  
  
  

  
    The mode for determining whether to display output in color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The default output color.The default output color.
The default output color.
The default output color.

  

  
  
  
  
    
    
  
  
  
  
  

  
    The default output color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Path to use if no path is provided to the rspecrspec command (default: "spec""spec").Path to use if no path is provided to the rspec command (default: "spec").
Path to use if no path is provided to the rspec command (default: "spec").
Path to use if no path is provided to the rspec command (default: "spec").

  

  
  
  
  
    
    
  
  
  
  
  

  
    Path to use if no path is provided to the rspec command (default: "spec").

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used to print details.Color used to print details.
Color used to print details.
Color used to print details.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Color used to print details.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Run examples over DRb (default: falsefalse).Run examples over DRb (default: false).
Run examples over DRb (default: false).
Run examples over DRb (default: false).

  

  
  
  
  
    
    
  
  
  
  
  

  
    Run examples over DRb (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The drb_port (default: nil).The drb_port (default: nil).
The drb_port (default: nil).
The drb_port (default: nil).

  

  
  
  
  
    
    
  
  
  
  
  

  
    The drb_port (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Prints the formatter output of your suite without running any examples or hooks.Prints the formatter output of your suite without running any examples or hooks.
Prints the formatter output of your suite without running any examples or hooks.
Prints the formatter output of your suite without running any examples or hooks.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Prints the formatter output of your suite without running any examples or hooks.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Default: $stderr$stderr.Default: $stderr.
Default: $stderr.
Default: $stderr.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Default: $stderr.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The file path to use for persisting example statuses.The file path to use for persisting example statuses.
The file path to use for persisting example statuses.
The file path to use for persisting example statuses.

  

  
  
  
  
    
    
  
  
  
  
  

  
    The file path to use for persisting example statuses.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Exclude files matching this pattern.Exclude files matching this pattern.
Exclude files matching this pattern.
Exclude files matching this pattern.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Exclude files matching this pattern.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    If specified, indicates the number of failures required before cleaning up and exit (default: nilnil).If specified, indicates the number of failures required before cleaning up and exit (default: nil).
If specified, indicates the number of failures required before cleaning up and exit (default: nil).
If specified, indicates the number of failures required before cleaning up and exit (default: nil).

  

  
  
  
  
    
    
  
  
  
  
  

  
    If specified, indicates the number of failures required before cleaning up and exit (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Whether or not to fail when there are no RSpec examples (default: false).Whether or not to fail when there are no RSpec examples (default: false).
Whether or not to fail when there are no RSpec examples (default: false).
Whether or not to fail when there are no RSpec examples (default: false).

  

  
  
  
  
    
    
  
  
  
  
  

  
    Whether or not to fail when there are no RSpec examples (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate failure.Color to use to indicate failure.
Color to use to indicate failure.
Color to use to indicate failure.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate failure.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The exit code to return if there are any failures (default: 1).The exit code to return if there are any failures (default: 1).
The exit code to return if there are any failures (default: 1).
The exit code to return if there are any failures (default: 1).

  

  
  
  
  
    
    
  
  
  
  
  

  
    The exit code to return if there are any failures (default: 1).

  


    
      
  
  
  
  
    
      readonlyreadonly
    
    
  
  
  
  
  

  
    The spec files RSpec will run.The spec files RSpec will run.
The spec files RSpec will run.
The spec files RSpec will run.

  

  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    The spec files RSpec will run.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used when a pending example is fixed.Color used when a pending example is fixed.
Color used when a pending example is fixed.
Color used when a pending example is fixed.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Color used when a pending example is fixed.

  


    
      
  
  
  
  
    
      readonlyreadonly
    
    
  
  
  
  
  

  
    Returns dirs that have been prepended to the load path by the -I-I command line option.Returns dirs that have been prepended to the load path by the -I command line option.
Returns dirs that have been prepended to the load path by the -I command line option.
Returns dirs that have been prepended to the load path by the -I command line option.

  

  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Returns dirs that have been prepended to the load path by the -I command line option.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Maximum count of failed source lines to display in the failure reports.Maximum count of failed source lines to display in the failure reports.
Maximum count of failed source lines to display in the failure reports.
Maximum count of failed source lines to display in the failure reports.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Maximum count of failed source lines to display in the failure reports.

  


    
      
  
  
  
  
    
      readonlyreadonly
    
    
  
  
  
  
  

  
    Indicates if the --only-failures--only-failures (or --next-failure--next-failure) flag is being used.Indicates if the --only-failures (or --next-failure) flag is being used.
Indicates if the --only-failures (or --next-failure) flag is being used.
Indicates if the --only-failures (or --next-failure) flag is being used.

  

  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates if the --only-failures (or --next-failure) flag is being used.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines where RSpec will send its output.Determines where RSpec will send its output.
Determines where RSpec will send its output.
Determines where RSpec will send its output.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Determines where RSpec will send its output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb''**{,/*/**}/*_spec.rb').Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').
Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').
Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').

  

  
  
  
  
    
    
  
  
  
  
  

  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to print pending examples.Color to use to print pending examples.
Color to use to print pending examples.
Color to use to print pending examples.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to print pending examples.

  


    
      
  
  
  
  
    
    
  
  
  
  
  privateprivate

  
    Defaults profile_examplesprofile_examples to 10 examples when @profile_examples@profile_examples is truetrue.Defaults profile_examples to 10 examples when @profile_examples is true.
Defaults profile_examples to 10 examples when @profile_examples is true.
Defaults profile_examples to 10 examples when @profile_examples is true.

  

  
  
  
  
    
    
  
  
  
  
  private

  
    Defaults profile_examples to 10 examples when @profile_examples is true.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Specifies which directories contain the source code for your project.Specifies which directories contain the source code for your project.
Specifies which directories contain the source code for your project.
Specifies which directories contain the source code for your project.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Specifies which directories contain the source code for your project.

  


    
      
  
  
  
  
    
      readonlyreadonly
    
    
  
  
  
  
  

  
    Indicates files configured to be required.Indicates files configured to be required.
Indicates files configured to be required.
Indicates files configured to be required.

  

  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates files configured to be required.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecateddeprecated
  

  
    Deprecated.Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.
Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.
Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

  

  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Configures how RSpec treats metadata passed as part of a shared example group definition.Configures how RSpec treats metadata passed as part of a shared example group definition.
Configures how RSpec treats metadata passed as part of a shared example group definition.
Configures how RSpec treats metadata passed as part of a shared example group definition.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Configures how RSpec treats metadata passed as part of a shared example group definition.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Don't print filter info i.e.Don't print filter info i.e.
Don't print filter info i.e.
Don't print filter info i.e.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Don't print filter info i.e.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate success.Color to use to indicate success.
Color to use to indicate success.
Color to use to indicate success.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate success.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Use threadsafe options where available.Use threadsafe options where available.
Use threadsafe options where available.
Use threadsafe options where available.

  

  
  
  
  
    
    
  
  
  
  
  

  
    Use threadsafe options where available.

  


    
  
    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The mode for determining whether to display output in color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The default output color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Path to use if no path is provided to the rspec command (default: "spec").

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used to print details.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Run examples over DRb (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The drb_port (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Prints the formatter output of your suite without running any examples or hooks.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Default: $stderr.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The file path to use for persisting example statuses.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Exclude files matching this pattern.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    If specified, indicates the number of failures required before cleaning up and exit (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Whether or not to fail when there are no RSpec examples (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate failure.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The exit code to return if there are any failures (default: 1).

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    The spec files RSpec will run.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used when a pending example is fixed.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Returns dirs that have been prepended to the load path by the -I command line option.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Maximum count of failed source lines to display in the failure reports.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates if the --only-failures (or --next-failure) flag is being used.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines where RSpec will send its output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to print pending examples.

  


    
      
  
  
  
  
    
    
  
  
  
  
  private

  
    Defaults profile_examples to 10 examples when @profile_examples is true.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Specifies which directories contain the source code for your project.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates files configured to be required.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Configures how RSpec treats metadata passed as part of a shared example group definition.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Don't print filter info i.e.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate success.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Use threadsafe options where available.

  


    
  




  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Adds a formatter to the set RSpec will use for this run.Adds a formatter to the set RSpec will use for this run.
Adds a formatter to the set RSpec will use for this run.
Adds a formatter to the set RSpec will use for this run.

  

  
  
  
  
  
  
  
  

  
    Adds a formatter to the set RSpec will use for this run.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds a custom setting to the RSpec.configuration object.Adds a custom setting to the RSpec.configuration object.
Adds a custom setting to the RSpec.configuration object.
Adds a custom setting to the RSpec.configuration object.

  

  
  
  
  
  
  
  
  

  
    Adds a custom setting to the RSpec.configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a afterafter hook.Defines a after hook.
Defines a after hook.
Defines a after hook.

  

  
  
  
  
  
  
  
  

  
    Defines a after hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that defines an example group with the provided metadata.Creates a method that defines an example group with the provided metadata.
Creates a method that defines an example group with the provided metadata.
Creates a method that defines an example group with the provided metadata.

  

  
  
  
  
  
  
  
  

  
    Creates a method that defines an example group with the provided metadata.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that delegates to exampleexample including the submitted argsargs.Creates a method that delegates to example including the submitted args.
Creates a method that delegates to example including the submitted args.
Creates a method that delegates to example including the submitted args.

  

  
  
  
  
  
  
  
  

  
    Creates a method that delegates to example including the submitted args.

  


      
        
  
  
  
  
  
  
  
  

  
    Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.
Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.
Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.

  

  
  
  
  
  
  
  
  

  
    Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds blockblock to the end of the list of afterafter blocks in the same scope (:example:example, :context:context, or :suite:suite), in contrast to #after, which adds the hook to the start of the list.Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.
Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.
Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.

  

  
  
  
  
  
  
  
  

  
    Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers blockblock as an aroundaround hook.Registers block as an around hook.
Registers block as an around hook.
Registers block as an around hook.

  

  
  
  
  
  
  
  
  

  
    Registers block as an around hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to exclude lines from backtraces.Regexps used to exclude lines from backtraces.
Regexps used to exclude lines from backtraces.
Regexps used to exclude lines from backtraces.

  

  
  
  
  
  
  
  
  

  
    Regexps used to exclude lines from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to exclude lines in backtrace.Set regular expressions used to exclude lines in backtrace.
Set regular expressions used to exclude lines in backtrace.
Set regular expressions used to exclude lines in backtrace.

  

  
  
  
  
  
  
  
  

  
    Set regular expressions used to exclude lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to include lines in backtraces.Regexps used to include lines in backtraces.
Regexps used to include lines in backtraces.
Regexps used to include lines in backtraces.

  

  
  
  
  
  
  
  
  

  
    Regexps used to include lines in backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to include lines in backtrace.Set regular expressions used to include lines in backtrace.
Set regular expressions used to include lines in backtrace.
Set regular expressions used to include lines in backtrace.

  

  
  
  
  
  
  
  
  

  
    Set regular expressions used to include lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a beforebefore hook.Defines a before hook.
Defines a before hook.
Defines a before hook.

  

  
  
  
  
  
  
  
  

  
    Defines a before hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if color is enabled for a particular output.Check if color is enabled for a particular output.
Check if color is enabled for a particular output.
Check if color is enabled for a particular output.

  

  
  
  
  
  
  
  
  

  
    Check if color is enabled for a particular output.

  


      
        
  
  
  
  
  
  
  
  

  
    The formatter that will be used if no formatter has been set.The formatter that will be used if no formatter has been set.
The formatter that will be used if no formatter has been set.
The formatter that will be used if no formatter has been set.

  

  
  
  
  
  
  
  
  

  
    The formatter that will be used if no formatter has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets a fallback formatter to use if none other has been set.Sets a fallback formatter to use if none other has been set.
Sets a fallback formatter to use if none other has been set.
Sets a fallback formatter to use if none other has been set.

  

  
  
  
  
  
  
  
  

  
    Sets a fallback formatter to use if none other has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that can assign derived metadata values.Defines a callback that can assign derived metadata values.
Defines a callback that can assign derived metadata values.
Defines a callback that can assign derived metadata values.

  

  
  
  
  
  
  
  
  

  
    Defines a callback that can assign derived metadata values.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.Determines where deprecation warnings are printed.
Determines where deprecation warnings are printed.
Determines where deprecation warnings are printed.

  

  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.Determines where deprecation warnings are printed.
Determines where deprecation warnings are printed.
Determines where deprecation warnings are printed.

  

  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Enables zero monkey patching mode for RSpec.Enables zero monkey patching mode for RSpec.
Enables zero monkey patching mode for RSpec.
Enables zero monkey patching mode for RSpec.

  

  
  
  
  
  
  
  
  

  
    Enables zero monkey patching mode for RSpec.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the exclusion_filterexclusion_filter.Returns the exclusion_filter.
Returns the exclusion_filter.
Returns the exclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Returns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the exclusion_filterexclusion_filter.Clears and reassigns the exclusion_filter.
Clears and reassigns the exclusion_filter.
Clears and reassigns the exclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Clears and reassigns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the expectation framework module(s) to be included in each example group.Sets the expectation framework module(s) to be included in each example group.
Sets the expectation framework module(s) to be included in each example group.
Sets the expectation framework module(s) to be included in each example group.

  

  
  
  
  
  
  
  
  

  
    Sets the expectation framework module(s) to be included in each example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to expect_with(framework).Delegates to expect_with(framework).
Delegates to expect_with(framework).
Delegates to expect_with(framework).

  

  
  
  
  
  
  
  
  

  
    Delegates to expect_with(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured expectation framework adapter module(s).Returns the configured expectation framework adapter module(s).
Returns the configured expectation framework adapter module(s).
Returns the configured expectation framework adapter module(s).

  

  
  
  
  
  
  
  
  

  
    Returns the configured expectation framework adapter module(s).

  


      
        
  
  
  
  
  
  
  
  

  
    Exposes the current running example via the named helper method.Exposes the current running example via the named helper method.
Exposes the current running example via the named helper method.
Exposes the current running example via the named helper method.

  

  
  
  
  
  
  
  
  

  
    Exposes the current running example via the named helper method.

  


      
        
  
  
  
  
  
  
  
  

  
    Use this to expose the core RSpec DSL via ModuleModule and the mainmain object.Use this to expose the core RSpec DSL via Module and the main object.
Use this to expose the core RSpec DSL via Module and the main object.
Use this to expose the core RSpec DSL via Module and the main object.

  

  
  
  
  
  
  
  
  

  
    Use this to expose the core RSpec DSL via Module and the main object.

  


      
        
  
  
  
  
  
  
  
  

  
    Indicates if the DSL has been exposed off of modules and mainmain.Indicates if the DSL has been exposed off of modules and main.
Indicates if the DSL has been exposed off of modules and main.
Indicates if the DSL has been exposed off of modules and main.

  

  
  
  
  
  
  
  
  

  
    Indicates if the DSL has been exposed off of modules and main.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to extend example groups with modmod.Tells RSpec to extend example groups with mod.
Tells RSpec to extend example groups with mod.
Tells RSpec to extend example groups with mod.

  

  
  
  
  
  
  
  
  

  
    Tells RSpec to extend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.
Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.
Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.

  

  
  
  
  
  
  
  
  

  
    Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the exclusion_filterexclusion_filter.Adds key/value pairs to the exclusion_filter.
Adds key/value pairs to the exclusion_filter.
Adds key/value pairs to the exclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the inclusion_filterinclusion_filter.Adds key/value pairs to the inclusion_filter.
Adds key/value pairs to the inclusion_filter.
Adds key/value pairs to the inclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.
Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.
Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.

  

  
  
  
  
  
  
  
  

  
    Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.

  


      
        
  
  
  
  
  
  
  
  

  
    Formats the docstring output using the block provided.Formats the docstring output using the block provided.
Formats the docstring output using the block provided.
Formats the docstring output using the block provided.

  

  
  
  
  
  
  
  
  

  
    Formats the docstring output using the block provided.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns a duplicate of the formatters currently loaded in the FormatterLoaderFormatterLoader for introspection.Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.
Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.
Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.

  

  
  
  
  
  
  
  
  

  
    Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.

  


      
        
  
  
  
  
  
  
  
  

  
    Toggle full backtrace.Toggle full backtrace.
Toggle full backtrace.
Toggle full backtrace.

  

  
  
  
  
  
  
  
  

  
    Toggle full backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if full backtrace is enabled.Check if full backtrace is enabled.
Check if full backtrace is enabled.
Check if full backtrace is enabled.

  

  
  
  
  
  
  
  
  

  
    Check if full backtrace is enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Full description filter.Full description filter.
Full description filter.
Full description filter.

  

  
  
  
  
  
  
  
  

  
    Full description filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Run examples matching on descriptiondescription in all files to run.Run examples matching on description in all files to run.
Run examples matching on description in all files to run.
Run examples matching on description in all files to run.

  

  
  
  
  
  
  
  
  

  
    Run examples matching on description in all files to run.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include modmod in example groups.Tells RSpec to include mod in example groups.
Tells RSpec to include mod in example groups.
Tells RSpec to include mod in example groups.

  

  
  
  
  
  
  
  
  

  
    Tells RSpec to include mod in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include the named shared example group in example groups.Tells RSpec to include the named shared example group in example groups.
Tells RSpec to include the named shared example group in example groups.
Tells RSpec to include the named shared example group in example groups.

  

  
  
  
  
  
  
  
  

  
    Tells RSpec to include the named shared example group in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the inclusion_filterinclusion_filter.Returns the inclusion_filter.
Returns the inclusion_filter.
Returns the inclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Returns the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the inclusion_filterinclusion_filter.Clears and reassigns the inclusion_filter.
Clears and reassigns the inclusion_filter.
Clears and reassigns the inclusion_filter.

  

  
  
  
  
  
  
  
  

  
    Clears and reassigns the inclusion_filter.

  


      
        
  
  
  
    constructorconstructor
  
  
  
  
  
  

  
    Build an object to store runtime configuration options and set defaults.Build an object to store runtime configuration options and set defaults.
Build an object to store runtime configuration options and set defaults.
Build an object to store runtime configuration options and set defaults.

  

  
  
  
    constructor
  
  
  
  
  
  

  
    Build an object to store runtime configuration options and set defaults.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured mock framework adapter module.Returns the configured mock framework adapter module.
Returns the configured mock framework adapter module.
Returns the configured mock framework adapter module.

  

  
  
  
  
  
  
  
  

  
    Returns the configured mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to mock_framework=(framework).Delegates to mock_framework=(framework).
Delegates to mock_framework=(framework).
Delegates to mock_framework=(framework).

  

  
  
  
  
  
  
  
  

  
    Delegates to mock_framework=(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the mock framework adapter module.Sets the mock framework adapter module.
Sets the mock framework adapter module.
Sets the mock framework adapter module.

  

  
  
  
  
  
  
  
  

  
    Sets the mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Invokes block before defining an example group.Invokes block before defining an example group.
Invokes block before defining an example group.
Invokes block before defining an example group.

  

  
  
  
  
  
  
  
  

  
    Invokes block before defining an example group.

  


      
        
  
  
  
  
  
  
  
  privateprivate

  
    Returns an array of blocks to call before defining an example group.Returns an array of blocks to call before defining an example group.
Returns an array of blocks to call before defining an example group.
Returns an array of blocks to call before defining an example group.

  

  
  
  
  
  
  
  
  private

  
    Returns an array of blocks to call before defining an example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the default global ordering strategy.Sets the default global ordering strategy.
Sets the default global ordering strategy.
Sets the default global ordering strategy.

  

  
  
  
  
  
  
  
  

  
    Sets the default global ordering strategy.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to prepend example groups with modmod.Tells RSpec to prepend example groups with mod.
Tells RSpec to prepend example groups with mod.
Tells RSpec to prepend example groups with mod.

  

  
  
  
  
  
  
  
  

  
    Tells RSpec to prepend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds blockblock to the start of the list of beforebefore blocks in the same scope (:example:example, :context:context, or :suite:suite), in contrast to #before, which adds the hook to the end of the list.Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.
Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.
Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.

  

  
  
  
  
  
  
  
  

  
    Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.
Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.
Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.

  

  
  
  
  
  
  
  
  

  
    Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns warnings into errors.Turns warnings into errors.
Turns warnings into errors.
Turns warnings into errors.

  

  
  
  
  
  
  
  
  

  
    Turns warnings into errors.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name>:order => <name> metadata to the example group.Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.
Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.
Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.

  

  
  
  
  
  
  
  
  

  
    Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.

  


      
        
  
  
  
  
  
  
  
  

  
    The currently configured reporter.The currently configured reporter.
The currently configured reporter.
The currently configured reporter.

  

  
  
  
  
  
  
  
  

  
    The currently configured reporter.

  


      
        
  
  
  
  
  
  
  
  

  
    Seed for random ordering (default: generated randomly each run).Seed for random ordering (default: generated randomly each run).
Seed for random ordering (default: generated randomly each run).
Seed for random ordering (default: generated randomly each run).

  

  
  
  
  
  
  
  
  

  
    Seed for random ordering (default: generated randomly each run).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the seed value and sets the default global ordering to random.Sets the seed value and sets the default global ordering to random.
Sets the seed value and sets the default global ordering to random.
Sets the seed value and sets the default global ordering to random.

  

  
  
  
  
  
  
  
  

  
    Sets the seed value and sets the default global ordering to random.

  


      
        
  
  
  
  
  
  
  deprecateddeprecated
  

  
    Deprecated.Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.
This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.
Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.

  

  
  
  
  
  
  
  deprecated
  

  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.

  


      
        
  
  
  
  
  
  
  
  

  
    Set Ruby warnings on or off.Set Ruby warnings on or off.
Set Ruby warnings on or off.
Set Ruby warnings on or off.

  

  
  
  
  
  
  
  
  

  
    Set Ruby warnings on or off.

  


      
        
  
  
  
  
  
  
  
  

  
    Whether or not ruby warnings are enabled.Whether or not ruby warnings are enabled.
Whether or not ruby warnings are enabled.
Whether or not ruby warnings are enabled.

  

  
  
  
  
  
  
  
  

  
    Whether or not ruby warnings are enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that runs after the first example with matching metadata is defined.Defines a callback that runs after the first example with matching metadata is defined.
Defines a callback that runs after the first example with matching metadata is defined.
Defines a callback that runs after the first example with matching metadata is defined.

  

  
  
  
  
  
  
  
  

  
    Defines a callback that runs after the first example with matching metadata is defined.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    Adds a formatter to the set RSpec will use for this run.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds a custom setting to the RSpec.configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a after hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that defines an example group with the provided metadata.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that delegates to example including the submitted args.

  


      
        
  
  
  
  
  
  
  
  

  
    Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers block as an around hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to exclude lines from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to exclude lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to include lines in backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to include lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a before hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if color is enabled for a particular output.

  


      
        
  
  
  
  
  
  
  
  

  
    The formatter that will be used if no formatter has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets a fallback formatter to use if none other has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that can assign derived metadata values.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Enables zero monkey patching mode for RSpec.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the expectation framework module(s) to be included in each example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to expect_with(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured expectation framework adapter module(s).

  


      
        
  
  
  
  
  
  
  
  

  
    Exposes the current running example via the named helper method.

  


      
        
  
  
  
  
  
  
  
  

  
    Use this to expose the core RSpec DSL via Module and the main object.

  


      
        
  
  
  
  
  
  
  
  

  
    Indicates if the DSL has been exposed off of modules and main.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to extend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.

  


      
        
  
  
  
  
  
  
  
  

  
    Formats the docstring output using the block provided.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.

  


      
        
  
  
  
  
  
  
  
  

  
    Toggle full backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if full backtrace is enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Full description filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Run examples matching on description in all files to run.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include mod in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include the named shared example group in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the inclusion_filter.

  


      
        
  
  
  
    constructor
  
  
  
  
  
  

  
    Build an object to store runtime configuration options and set defaults.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to mock_framework=(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Invokes block before defining an example group.

  


      
        
  
  
  
  
  
  
  
  private

  
    Returns an array of blocks to call before defining an example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the default global ordering strategy.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to prepend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns warnings into errors.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.

  


      
        
  
  
  
  
  
  
  
  

  
    The currently configured reporter.

  


      
        
  
  
  
  
  
  
  
  

  
    Seed for random ordering (default: generated randomly each run).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the seed value and sets the default global ordering to random.

  


      
        
  
  
  
  
  
  
  deprecated
  

  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.

  


      
        
  
  
  
  
  
  
  
  

  
    Set Ruby warnings on or off.

  


      
        
  
  
  
  
  
  
  
  

  
    Whether or not ruby warnings are enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that runs after the first example with matching metadata is defined.

  


      
    
  


  
  
  
  
  
  
  
  Constructor DetailsConstructor Details
  
    
  
  
    Build an object to store runtime configuration options and set defaultsBuild an object to store runtime configuration options and set defaults


  
    Build an object to store runtime configuration options and set defaults


  

  
    Build an object to store runtime configuration options and set defaults


  


  


  


  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500# File 'lib/rspec/core/configuration.rb', line 500

defdef initializeinitialize
  # rubocop:disable Style/GlobalVars
# rubocop:disable Style/GlobalVars
  @start_time@start_time == $_rspec_core_load_started_at$_rspec_core_load_started_at |||| ::::RSpecRSpec::::CoreCore::::TimeTime..nownow
  # rubocop:enable Style/GlobalVars
# rubocop:enable Style/GlobalVars
  @expectation_frameworks@expectation_frameworks == [[]]
  @include_modules@include_modules == FilterableItemRepositoryFilterableItemRepository::::QueryOptimizedQueryOptimized..newnew((:any?:any?))
  @extend_modules@extend_modules  == FilterableItemRepositoryFilterableItemRepository::::QueryOptimizedQueryOptimized..newnew((:any?:any?))
  @prepend_modules@prepend_modules == FilterableItemRepositoryFilterableItemRepository::::QueryOptimizedQueryOptimized..newnew((:any?:any?))

  @bisect_runner@bisect_runner == RSpecRSpec::::SupportSupport::::RubyFeaturesRubyFeatures..fork_supported?fork_supported? ?? :fork:fork :: :shell:shell
  @bisect_runner_class@bisect_runner_class == nilnil

  @before_suite_hooks@before_suite_hooks == [[]]
  @after_suite_hooks@after_suite_hooks  == [[]]

  @mock_framework@mock_framework == nilnil
  @files_or_directories_to_run@files_or_directories_to_run == [[]]
  @loaded_spec_files@loaded_spec_files == SetSet..newnew
  @color@color == falsefalse
  @color_mode@color_mode == :automatic:automatic
  @pattern@pattern == ''**{,/*/**}/*_spec.rb**{,/*/**}/*_spec.rb'''**{,/*/**}/*_spec.rb'
  @exclude_pattern@exclude_pattern == ''''''
  @failure_exit_code@failure_exit_code == 11
  @fail_if_no_examples@fail_if_no_examples == falsefalse
  @spec_files_loaded@spec_files_loaded == falsefalse

  @backtrace_formatter@backtrace_formatter == BacktraceFormatterBacktraceFormatter..newnew

  @default_path@default_path == ''specspec'''spec'
  @project_source_dirs@project_source_dirs == %w[%w[  specspec  liblib  appapp  ]]
  @deprecation_stream@deprecation_stream == $stderr$stderr
  @output_stream@output_stream == $stdout$stdout
  @reporter@reporter == nilnil
  @reporter_buffer@reporter_buffer == nilnil
  @filter_manager@filter_manager == FilterManagerFilterManager..newnew
  @static_config_filter_manager@static_config_filter_manager == FilterManagerFilterManager..newnew
  @ordering_manager@ordering_manager == OrderingOrdering::::ConfigurationManagerConfigurationManager..newnew
  @preferred_options@preferred_options == {{}}
  @failure_color@failure_color == :red:red
  @success_color@success_color == :green:green
  @pending_color@pending_color == :yellow:yellow
  @default_color@default_color == :white:white
  @fixed_color@fixed_color == :blue:blue
  @detail_color@detail_color == :cyan:cyan
  @profile_examples@profile_examples == falsefalse
  @requires@requires == [[]]
  @libs@libs == [[]]
  @derived_metadata_blocks@derived_metadata_blocks == FilterableItemRepositoryFilterableItemRepository::::QueryOptimizedQueryOptimized..newnew((:any?:any?))
  @threadsafe@threadsafe == truetrue
  @max_displayed_failure_line_count@max_displayed_failure_line_count == 1010
  @world@world == WorldWorld::::NullNull
  @shared_context_metadata_behavior@shared_context_metadata_behavior == :trigger_inclusion:trigger_inclusion

  define_built_in_hooksdefine_built_in_hooks
endend# File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  

  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  


  
  
    Build an object to store runtime configuration options and set defaults


  


  


  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  


  

  Constructor Details
  
    
  
  
    Build an object to store runtime configuration options and set defaults


  


  


  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  


  


  
    Instance Attribute DetailsInstance Attribute Details
    
      
      
      
  
  
    
  
    Note:Note:
    This option will only be used by --bisect--bisect if you set it in a file
loaded via --require--require.This option will only be used by --bisect if you set it in a file
loaded via --require.
This option will only be used by --bisect if you set it in a file
loaded via --require.

  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell:shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite)before(:suite) hook instead
of getting run at the top-level of a file loaded by --require--require.:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.

:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  
    
  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  

  
    
  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


472
473
474


472
473
474
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472# File 'lib/rspec/core/configuration.rb', line 472

defdef bisect_runnerbisect_runner
  @bisect_runner@bisect_runner
endend# File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  

  
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  


  
  
    
  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  


    
      
      
      
  
  
    Deprecated.Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.
No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.
Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  

  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:See Also:
  
    
      #color_mode#color_mode
    
      #color_enabled?#color_enabled?
    
  
    
      #color_mode
    
      #color_enabled?
    
  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_mode
    
      #color_enabled?
    
  


  
    
      


890
891
892


890
891
892
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890# File 'lib/rspec/core/configuration.rb', line 890

defdef colorcolor
  value_forvalue_for((:color:color)) {{ @color@color }}
endend# File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  

  
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  


  
  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_mode
    
      #color_enabled?
    
  


  
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  


    
      
      
      
  
  
    The mode for determining whether to display output in color. One of:The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default):automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color:off - the output will not be in color

:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  
    The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  

  
    The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:See Also:
  
    
      #color_enabled?#color_enabled?
    
  
    
      #color_enabled?
    
  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_enabled?
    
  


  
    
      


903
904
905


903
904
905
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903# File 'lib/rspec/core/configuration.rb', line 903

defdef color_modecolor_mode
  value_forvalue_for((:color_mode:color_mode)) {{ @color_mode@color_mode }}
endend# File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  

  
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  


  
  
    The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_enabled?
    
  


  
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  


    
      
      
      
  
  
    The default output color. Defaults to :white:white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan][:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  
    The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  

  
    The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


350


350
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350# File 'lib/rspec/core/configuration.rb', line 350

add_settingadd_setting :default_color:default_color# File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  

  
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  


  
  
    The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  


    
      
      
      
  
  
    
  
    Note:Note:
    Other scripts invoking rspecrspec indirectly will ignore this
setting.Other scripts invoking rspec indirectly will ignore this
setting.
Other scripts invoking rspec indirectly will ignore this
setting.

  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspecrspec command (default:
"spec""spec"). Allows you to just type rspecrspec instead of rspec specrspec spec to
run all the examples in the specspec directory.Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  
    
  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  

  
    
  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


118


118
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118# File 'lib/rspec/core/configuration.rb', line 118

add_read_only_settingadd_read_only_setting :default_path:default_path# File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  

  
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  


  
  
    
  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  


    
      
      
      
  
  
    Color used to print details.  Defaults to :cyan:cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan][:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  
    Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  

  
    Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


364


364
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364# File 'lib/rspec/core/configuration.rb', line 364

add_settingadd_setting :detail_color:detail_color# File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  

  
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  


  
  
    Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  


    
      
      
      
  
  
    Run examples over DRb (default: falsefalse). RSpec doesn't supply the DRb
server, but you can use tools like spork.Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  
    Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  

  
    Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


128


128
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128# File 'lib/rspec/core/configuration.rb', line 128

add_settingadd_setting :drb:drb# File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  

  
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  


  
  
    Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  


    
      
      
      
  
  
    The drb_port (default: nil).The drb_port (default: nil).


  
    The drb_port (default: nil).


  

  
    The drb_port (default: nil).


  


  


  


  
    
      


132


132
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132# File 'lib/rspec/core/configuration.rb', line 132

add_settingadd_setting :drb_port:drb_port# File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  

  
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  


  
  
    The drb_port (default: nil).


  


  


  
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  


    
      
      
      
  
  
    Prints the formatter output of your suite without running any
examples or hooks.Prints the formatter output of your suite without running any
examples or hooks.


  
    Prints the formatter output of your suite without running any
examples or hooks.


  

  
    Prints the formatter output of your suite without running any
examples or hooks.


  


  


  


  
    
      


236


236
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236# File 'lib/rspec/core/configuration.rb', line 236

add_settingadd_setting :dry_run:dry_run# File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  

  
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  


  
  
    Prints the formatter output of your suite without running any
examples or hooks.


  


  


  
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  


    
      
      
      
  
  
    Default: $stderr$stderr.Default: $stderr.


  
    Default: $stderr.


  

  
    Default: $stderr.


  


  


  


  
    
      


136


136
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136# File 'lib/rspec/core/configuration.rb', line 136

add_settingadd_setting :error_stream:error_stream# File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  

  
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  


  
  
    Default: $stderr.


  


  


  
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  


    
      
      
      
  
  
    The file path to use for persisting example statuses. Necessary for the
--only-failures--only-failures and --next-failure--next-failure CLI options.The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  
    The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  

  
    The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    Returns the file pathReturns the file path


  
    Returns the file path


  

  
    Returns the file path


  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
        —
        the file paththe file path
the file path

      
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        valuevalue
      
      
        (StringString)(String)
      
      
      
        —
        the file paththe file path
the file path

      
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  
    
      
      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  



  
    
      


186


186
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186# File 'lib/rspec/core/configuration.rb', line 186

define_readerdefine_reader :example_status_persistence_file_path:example_status_persistence_file_path# File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  

  
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  


  
  
    The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  



  
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  


    
      
      
      
  
  
    Exclude files matching this pattern.Exclude files matching this pattern.


  
    Exclude files matching this pattern.


  

  
    Exclude files matching this pattern.


  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


293


293
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293# File 'lib/rspec/core/configuration.rb', line 293

define_readerdefine_reader :exclude_pattern:exclude_pattern# File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  

  
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  


  
  
    Exclude files matching this pattern.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  


    
      
      
      
  
  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nilnil). Can also be truetrue to fail and exit on first
failureIf specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  

  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  


  


  


  
    
      


209


209
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209# File 'lib/rspec/core/configuration.rb', line 209

define_readerdefine_reader :fail_fast:fail_fast# File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  

  
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  


  
  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  


  


  
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  


    
      
      
      
  
  
    Whether or not to fail when there are no RSpec examples (default: false).Whether or not to fail when there are no RSpec examples (default: false).


  
    Whether or not to fail when there are no RSpec examples (default: false).


  

  
    Whether or not to fail when there are no RSpec examples (default: false).


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


246


246
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246# File 'lib/rspec/core/configuration.rb', line 246

add_settingadd_setting :fail_if_no_examples:fail_if_no_examples# File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  

  
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  


  
  
    Whether or not to fail when there are no RSpec examples (default: false).


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  


    
      
      
      
  
  
    Color to use to indicate failure.  Defaults to :red:red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan][:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  
    Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  

  
    Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


343


343
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343# File 'lib/rspec/core/configuration.rb', line 343

add_settingadd_setting :failure_color:failure_color# File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  

  
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  


  
  
    Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  


    
      
      
      
  
  
    The exit code to return if there are any failures (default: 1).The exit code to return if there are any failures (default: 1).


  
    The exit code to return if there are any failures (default: 1).


  

  
    The exit code to return if there are any failures (default: 1).


  


  
Returns:Returns:

  
    
      
      
        (IntegerInteger)(Integer)
      
      
      
    
      
      
        (Integer)
      
      
      
    
  

  
    
      
      
        (Integer)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Integer)
      
      
      
    
  



  
    
      


241


241
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241# File 'lib/rspec/core/configuration.rb', line 241

add_settingadd_setting :failure_exit_code:failure_exit_code# File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  

  
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  


  
  
    The exit code to return if there are any failures (default: 1).


  


  
Returns:

  
    
      
      
        (Integer)
      
      
      
    
  



  
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  


    
      
      
      
  
  
    The spec files RSpec will run.The spec files RSpec will run.


  
    The spec files RSpec will run.


  

  
    The spec files RSpec will run.


  


  
Returns:Returns:

  
    
      
      
        (ArrayArray)(Array)
      
      
      
        —
        specified files about to runspecified files about to run
specified files about to run

      
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  

  
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  



  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  



  
    
      


1064
1065
1066


1064
1065
1066
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064# File 'lib/rspec/core/configuration.rb', line 1064

defdef files_to_runfiles_to_run
  @files_to_run@files_to_run ||=||= get_files_to_runget_files_to_run((@files_or_directories_to_run@files_or_directories_to_run))
endend# File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  

  
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  


  
  
    The spec files RSpec will run.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  



  
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  


    
      
      
      
  
  
    Color used when a pending example is fixed. Defaults to :blue:blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan][:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  
    Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  

  
    Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


357


357
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357# File 'lib/rspec/core/configuration.rb', line 357

add_settingadd_setting :fixed_color:fixed_color# File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  

  
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  


  
  
    Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  


    
      
      
      
  
  
    Returns dirs that have been prepended to the load path by the -I-I
command line option.Returns dirs that have been prepended to the load path by the -I
command line option.


  
    Returns dirs that have been prepended to the load path by the -I
command line option.


  

  
    Returns dirs that have been prepended to the load path by the -I
command line option.


  


  
Returns:Returns:

  
    
      
      
        (Array<String>Array<String>)(Array<String>)
      
      
      
    
      
      
        (Array<String>)
      
      
      
    
  

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


257


257
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257# File 'lib/rspec/core/configuration.rb', line 257

define_readerdefine_reader :libs:libs# File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  

  
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  


  
  
    Returns dirs that have been prepended to the load path by the -I
command line option.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  


    
      
      
      
  
  
    Maximum count of failed source lines to display in the failure reports.
(default 1010).
return [Integer]Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  
    Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  

  
    Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  


  


  


  
    
      


451


451
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451# File 'lib/rspec/core/configuration.rb', line 451

add_settingadd_setting :max_displayed_failure_line_count:max_displayed_failure_line_count# File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  

  
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  


  
  
    Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  


  


  
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  


    
      
      
      
  
  
    Indicates if the --only-failures--only-failures (or --next-failure--next-failure) flag is being used.Indicates if the --only-failures (or --next-failure) flag is being used.


  
    Indicates if the --only-failures (or --next-failure) flag is being used.


  

  
    Indicates if the --only-failures (or --next-failure) flag is being used.


  


  


  


  
    
      


197


197
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197# File 'lib/rspec/core/configuration.rb', line 197

define_readerdefine_reader :only_failures:only_failures# File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  

  
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  


  
  
    Indicates if the --only-failures (or --next-failure) flag is being used.


  


  


  
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  


    
      
      
      
  
  
    Determines where RSpec will send its output.
Default: $stdout$stdout.Determines where RSpec will send its output.
Default: $stdout.


  
    Determines where RSpec will send its output.
Default: $stdout.


  

  
    Determines where RSpec will send its output.
Default: $stdout.


  


  
Returns:Returns:

  
    
      
      
        (IOIO, StringString)(IO, String)
      
      
      
    
      
      
        (IO, String)
      
      
      
    
  

  
    
      
      
        (IO, String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (IO, String)
      
      
      
    
  



  
    
      


263


263
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263# File 'lib/rspec/core/configuration.rb', line 263

define_readerdefine_reader :output_stream:output_stream# File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  

  
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  


  
  
    Determines where RSpec will send its output.
Default: $stdout.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
    
  



  
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  


    
      
      
      
  
  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb''**{,/*/**}/*_spec.rb').Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  

  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  


  
Returns:Returns:

  
    
      
      
        (StringString)(String)
      
      
      
    
      
      
        (String)
      
      
      
    
  

  
    
      
      
        (String)
      
      
      
    
  



  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


282


282
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282# File 'lib/rspec/core/configuration.rb', line 282

define_readerdefine_reader :pattern:pattern# File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  

  
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  


  
  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  


    
      
      
      
  
  
    Color to use to print pending examples.  Defaults to :yellow:yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan][:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  
    Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  

  
    Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


336


336
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336# File 'lib/rspec/core/configuration.rb', line 336

add_settingadd_setting :pending_color:pending_color# File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  

  
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  


  
  
    Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  


    
      
      
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examplesprofile_examples to 10 examples when @profile_examples@profile_examples is
truetrue.Defaults profile_examples to 10 examples when @profile_examples is
true.


  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examples to 10 examples when @profile_examples is
true.


  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examples to 10 examples when @profile_examples is
true.


  


  


  


  
    
      


315


315
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315# File 'lib/rspec/core/configuration.rb', line 315

add_settingadd_setting :profile_examples:profile_examples# File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  

  
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examples to 10 examples when @profile_examples is
true.


  


  


  
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  


    
      
      
      
  
  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  

  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  


  
Returns:Returns:

  
    
      
      
        (Array<String>Array<String>)(Array<String>)
      
      
      
    
      
      
        (Array<String>)
      
      
      
    
  

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


309


309
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309# File 'lib/rspec/core/configuration.rb', line 309

add_settingadd_setting :project_source_dirs:project_source_dirs# File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  

  
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  


  
  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  


    
      
      
      
  
  
    Indicates files configured to be required.Indicates files configured to be required.


  
    Indicates files configured to be required.


  

  
    Indicates files configured to be required.


  


  
Returns:Returns:

  
    
      
      
        (Array<String>Array<String>)(Array<String>)
      
      
      
    
      
      
        (Array<String>)
      
      
      
    
  

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


251


251
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251# File 'lib/rspec/core/configuration.rb', line 251

define_readerdefine_reader :requires:requires# File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  

  
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  


  
  
    Indicates files configured to be required.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  


    
      
      
      
  
  
    Deprecated.Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.
Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.
Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: falsefalse).Run all examples if none match the configured filters
(default: false).


  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: false).


  

  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: false).


  


  


  


  
    
      


322


322
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322# File 'lib/rspec/core/configuration.rb', line 322

add_settingadd_setting :run_all_when_everything_filtered:run_all_when_everything_filtered# File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  

  
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  


  
  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: false).


  


  


  
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  


    
      
      
      
  
  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpecRSpec..shared_contextshared_context ""uses DBuses DB"""uses DB",, :db:db =>=> truetrue dodo
  aroundaround((:example:example)) dodo ||exex||
    MyORMMyORM..transactiontransaction((:rollback:rollback =>=> truetrue,, &&exex))
  endend
endend
RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end
RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true:db => true metadata, each
of which has a corresponding config option:...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true:db => true metadata.:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.

:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_contextinclude_context::trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpecRSpec..describedescribe ""My modelMy model"""My model" dodo
  include_contextinclude_context ""uses DBuses DB"""uses DB"
endend
RSpec.describe "My model" do
  include_context "uses DB"
end
RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..include_contextinclude_context ""uses DBuses DB"""uses DB",, :db:db =>=> truetrue
endend
RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end
RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  

  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  


  
  Overloads:Overloads:
  
    
      
      
        
        
  
    Returns the configured behaviorReturns the configured behavior


  
    Returns the configured behavior


  

  
    Returns the configured behavior


  


  
Returns:Returns:

  
    
      
      
        (:trigger_inclusion:trigger_inclusion, :apply_to_host_groups:apply_to_host_groups)(:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behaviorthe configured behavior
the configured behavior

      
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  
    

  

  
    

  


  Parameters:Parameters:

  
    
      
        valuevalue
      
      
        (:trigger_inclusion:trigger_inclusion, :apply_to_host_groups:apply_to_host_groups)(:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behaviorsets the configured behavior
sets the configured behavior

      
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  
    
      
      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  



  
  Overloads:
  
    
      
      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  



  
    
      


424


424
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424# File 'lib/rspec/core/configuration.rb', line 424

define_readerdefine_reader :shared_context_metadata_behavior:shared_context_metadata_behavior# File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  

  
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  


  
  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  



  
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  


    
      
      
      
  
  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default falsefalse).
return [Boolean]Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  

  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  


  


  


  
    
      


370


370
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370# File 'lib/rspec/core/configuration.rb', line 370

add_settingadd_setting :silence_filter_announcements:silence_filter_announcements# File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  

  
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  


  
  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  


  


  
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  


    
      
      
      
  
  
    Color to use to indicate success.  Defaults to :green:green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan][:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  
    Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  

  
    Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


329


329
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329# File 'lib/rspec/core/configuration.rb', line 329

add_settingadd_setting :success_color:success_color# File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  

  
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  


  
  
    Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  


    
      
      
      
  
  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  

  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  


  


  


  
    
      


445


445
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445# File 'lib/rspec/core/configuration.rb', line 445

add_settingadd_setting :threadsafe:threadsafe# File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  

  
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  


  
  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  


  


  
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  


    
  
    Instance Attribute Details
    
      
      
      
  
  
    
  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  


    
      
      
      
  
  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_mode
    
      #color_enabled?
    
  


  
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  


    
      
      
      
  
  
    The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_enabled?
    
  


  
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  


    
      
      
      
  
  
    The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  


    
      
      
      
  
  
    
  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  


    
      
      
      
  
  
    Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  


    
      
      
      
  
  
    Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  


    
      
      
      
  
  
    The drb_port (default: nil).


  


  


  
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  


    
      
      
      
  
  
    Prints the formatter output of your suite without running any
examples or hooks.


  


  


  
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  


    
      
      
      
  
  
    Default: $stderr.


  


  


  
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  


    
      
      
      
  
  
    The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  



  
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  


    
      
      
      
  
  
    Exclude files matching this pattern.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  


    
      
      
      
  
  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  


  


  
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  


    
      
      
      
  
  
    Whether or not to fail when there are no RSpec examples (default: false).


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  


    
      
      
      
  
  
    Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  


    
      
      
      
  
  
    The exit code to return if there are any failures (default: 1).


  


  
Returns:

  
    
      
      
        (Integer)
      
      
      
    
  



  
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  


    
      
      
      
  
  
    The spec files RSpec will run.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  



  
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  


    
      
      
      
  
  
    Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  


    
      
      
      
  
  
    Returns dirs that have been prepended to the load path by the -I
command line option.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  


    
      
      
      
  
  
    Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  


  


  
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  


    
      
      
      
  
  
    Indicates if the --only-failures (or --next-failure) flag is being used.


  


  


  
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  


    
      
      
      
  
  
    Determines where RSpec will send its output.
Default: $stdout.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
    
  



  
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  


    
      
      
      
  
  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  


    
      
      
      
  
  
    Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  


    
      
      
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examples to 10 examples when @profile_examples is
true.


  


  


  
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  


    
      
      
      
  
  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  


    
      
      
      
  
  
    Indicates files configured to be required.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  


    
      
      
      
  
  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: false).


  


  


  
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  


    
      
      
      
  
  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  



  
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  


    
      
      
      
  
  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  


  


  
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  


    
      
      
      
  
  
    Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  


    
      
      
      
  
  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  


  


  
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  


    
  


  
    Instance Method DetailsInstance Method Details

    
      
  
  
    Adds a formatter to the set RSpec will use for this run.Adds a formatter to the set RSpec will use for this run.


  
    Adds a formatter to the set RSpec will use for this run.


  

  
    Adds a formatter to the set RSpec will use for this run.


  


  Parameters:Parameters:

  
    
      
        formatterformatter
      
      
        (ClassClass, StringString, ObjectObject)(Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (pp/progressprogress,
dd/docdoc/documentationdocumentation, hh/htmlhtml, or jj/jsonjson), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.
formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        outputoutput
      
      
        (StringString, IOIO)(String, IO)
      
      
        (defaults to: output_wrapperoutput_wrapper)(defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_streamoutput_stream ($stdout$stdout, by default) will be used.where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.
where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  

  
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  



  See Also:See Also:
  
    
      Formatters::ProtocolFormatters::Protocol
    
  
    
      Formatters::Protocol
    
  


  Parameters:

  
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  



  See Also:
  
    
      Formatters::Protocol
    
  


  
    
      


964
965
966


964
965
966
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964# File 'lib/rspec/core/configuration.rb', line 964

defdef add_formatteradd_formatter((formatterformatter,, outputoutput==output_wrapperoutput_wrapper))
  formatter_loaderformatter_loader..addadd((formatterformatter,, outputoutput))
endend# File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  

  
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  


  
  
    Adds a formatter to the set RSpec will use for this run.


  


  Parameters:

  
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  



  See Also:
  
    
      Formatters::Protocol
    
  


  
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  


    
      
  
  
    Adds a custom setting to the RSpec.configuration object.Adds a custom setting to the RSpec.configuration object.

RSpecRSpec..configurationconfiguration..add_settingadd_setting :foo:foo
RSpec.configuration.add_setting :foo
RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpecRSpec..configureconfigure dodo ||cc||
  cc..add_settingadd_setting :use_transactional_fixtures:use_transactional_fixtures,,
    :default:default =>=> truetrue,,
    :alias_with:alias_with =>=> :use_transactional_examples:use_transactional_examples
endend
RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end
RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_settingadd_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpecRSpec..configurationconfiguration..foofoo==((valuevalue))
RSpecRSpec..configurationconfiguration..foofoo
RSpecRSpec..configurationconfiguration..foo?foo? # Returns true if foo returns anything but nil or false.
# Returns true if foo returns anything but nil or false.
RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.
RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  
    Adds a custom setting to the RSpec.configuration object.

RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  

  
    Adds a custom setting to the RSpec.configuration object.

RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  


  Parameters:Parameters:

  
    
      
        optsopts
      
      
        (HashHash)(Hash)
      
      
        (defaults to: {}{})(defaults to: {})
      
      
        —
        a customizable set of optionsa customizable set of options
a customizable set of options

      
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  

  
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  


  
    
    
    
    
    Options Hash (optsopts):Options Hash (opts):
    
      
        
          :default:default
          (SymbolSymbol)(Symbol)
          
            
          
            
          
          
            — Set a default value for the generated getter and predicate methods:Set a default value for the generated getter and predicate methods:

add_settingadd_setting((:foo:foo,, :default:default =>=> ""default valuedefault value"""default value"))
add_setting(:foo, :default => "default value")
add_setting(:foo, :default => "default value")

Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with:alias_with
          (SymbolSymbol)(Symbol)
          
            
          
            
          
          
            — Use :alias_with:alias_with to alias the setter, getter, and predicate to
another name, or names:Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_settingadd_setting((:foo:foo,, :alias_with:alias_with =>=> :bar:bar))
add_settingadd_setting((:foo:foo,, :alias_with:alias_with =>=> [[:bar:bar,, :baz:baz]]))
add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])
add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])

Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
      
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
  



  Parameters:

  
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  


  
    
    
    
    
    Options Hash (opts):
    
      
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
  



  
    
      


627
628
629
630
631
632
633


627
628
629
630
631
632
633
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627# File 'lib/rspec/core/configuration.rb', line 627

defdef add_settingadd_setting((namename,, optsopts=={{}}))
  defaultdefault == optsopts..deletedelete((:default:default))
  ((classclass <<<< selfself;; selfself;; endend))..class_execclass_exec dodo
    add_settingadd_setting((namename,, optsopts))
  endend
  __send____send__((""#{#{namename}}=="""#{name}=",, defaultdefault)) ifif defaultdefault
endend# File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  

  
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  


  
  
    Adds a custom setting to the RSpec.configuration object.

RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  


  Parameters:

  
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  


  
    
    
    
    
    Options Hash (opts):
    
      
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
  



  
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  


    
      
  
  
    Defines a afterafter hook. See Hooks#after for full docs.Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite:suite scope. Hooks with the :suite:suite scope will be run once after
the last example of the entire suite is executed.This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  
    Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  

  
    Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:See Also:
  
    
      #append_after#append_after
    
      #before#before
    
      #prepend_before#prepend_before
    
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967# File 'lib/rspec/core/configuration.rb', line 1967

defdef afterafter((scopescope==nilnil,, **metameta,, &&blockblock))
  handle_suite_hookhandle_suite_hook((scopescope,, metameta)) dodo
    @after_suite_hooks@after_suite_hooks..unshiftunshift HooksHooks::::AfterHookAfterHook..newnew((blockblock,, {{}}))
  endend |||| beginbegin
    # defeat Ruby 2.5 lazy proc allocation to ensure
# defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
# the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
# so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
# https://bugs.ruby-lang.org/issues/14045#note-5
    blockblock..__id____id__

    add_hook_to_existing_matching_groupsadd_hook_to_existing_matching_groups((metameta,, scopescope)) {{ ||gg|| gg..afterafter((scopescope,, **metameta,, &&blockblock)) }}
    supersuper((scopescope,, **metameta,, &&blockblock))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  

  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


  
  
    Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    The defined aliased will also be added to the top level
(e.g. mainmain and from within modules) if
expose_dsl_globallyexpose_dsl_globally is set to true.The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.
The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  
    
  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  

  
    
  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..alias_example_group_toalias_example_group_to :describe_model:describe_model,, :type:type =>=> :model:model
endend

shared_context_forshared_context_for ""model testsmodel tests"""model tests",, :type:type =>=> :model:model dodo
  # define common model test helper methods, `let` declarations, etc
# define common model test helper methods, `let` declarations, etc
endend

# This lets you do this:
# This lets you do this:

RSpecRSpec..describe_modeldescribe_model UserUser dodo
endend

# ... which is the equivalent of
# ... which is the equivalent of

RSpecRSpec..describedescribe UserUser,, :type:type =>=> :model:model dodo
endendRSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
endRSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  


  See Also:See Also:
  
    
      #alias_example_to#alias_example_to
    
      #expose_dsl_globally=#expose_dsl_globally=
    
  
    
      #alias_example_to
    
      #expose_dsl_globally=
    
  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  


  See Also:
  
    
      #alias_example_to
    
      #expose_dsl_globally=
    
  


  
    
      


1177
1178
1179
1180


1177
1178
1179
1180
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177# File 'lib/rspec/core/configuration.rb', line 1177

defdef alias_example_group_toalias_example_group_to((new_namenew_name,, **argsargs))
  extra_optionsextra_options == MetadataMetadata..build_hash_frombuild_hash_from((argsargs))
  RSpecRSpec::::CoreCore::::ExampleGroupExampleGroup..define_example_group_methoddefine_example_group_method((new_namenew_name,, extra_optionsextra_options))
endend# File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  

  
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  


  
  
    
  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  


  See Also:
  
    
      #alias_example_to
    
      #expose_dsl_globally=
    
  


  
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:Note:
    The specific example alias below (pendingpending) is already
defined for you.The specific example alias below (pending) is already
defined for you.
The specific example alias below (pending) is already
defined for you.

  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focusfocus and xitxit, but we also add
docs for those methods.Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.
Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to exampleexample including the submitted
argsargs. Used internally to add variants of exampleexample like pendingpending:Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  
    
  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  

  
    
  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..alias_example_toalias_example_to :pending:pending,, :pending:pending =>=> truetrue
endend

# This lets you do this:
# This lets you do this:

RSpecRSpec..describedescribe ThingThing dodo
  pendingpending ""does somethingdoes something"""does something" dodo
    thingthing == ThingThing..newnew
  endend
endend

# ... which is the equivalent of
# ... which is the equivalent of

RSpecRSpec..describedescribe ThingThing dodo
  itit ""does somethingdoes something"""does something",, :pending:pending =>=> truetrue dodo
    thingthing == ThingThing..newnew
  endend
endendRSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
endRSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
Parameters:Parameters:

  
    
      
        namename
      
      
        (StringString)(String)
      
      
      
        —
        example name aliasexample name alias
example name alias

      
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        argsargs
      
      
        (Array<Symbol>Array<Symbol>, HashHash)(Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated examplemetadata for the generated example
metadata for the generated example

      
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  

  
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  




  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
Parameters:

  
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  




  
    
      


1145
1146
1147
1148


1145
1146
1147
1148
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145# File 'lib/rspec/core/configuration.rb', line 1145

defdef alias_example_toalias_example_to((namename,, **argsargs))
  extra_optionsextra_options == MetadataMetadata..build_hash_frombuild_hash_from((argsargs))
  RSpecRSpec::::CoreCore::::ExampleGroupExampleGroup..define_example_methoddefine_example_method((namename,, extra_optionsextra_options))
endend# File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  

  
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  


  
  
    
  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
Parameters:

  
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  




  
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_likeit_should_behave_like (for backward
compatibility), but we also add docs for that method.Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.
Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  
    
  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  

  
    
  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..alias_it_behaves_like_toalias_it_behaves_like_to((:it_has_behavior:it_has_behavior,, ''has behavior:has behavior:'''has behavior:'))
endend

# allows the user to include a shared example group like:
# allows the user to include a shared example group like:

RSpecRSpec..describedescribe EntityEntity dodo
  it_has_behaviorit_has_behavior ''sortabilitysortability'''sortability' dodo
    letlet((:sortable:sortable)) {{ EntityEntity..newnew }}
  endend
endend

# which is reported in the output as:
# which is reported in the output as:
# Entity
# Entity
#   has behavior: sortability
#   has behavior: sortability
#     ...sortability examples here#     ...sortability examples hereRSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples hereRSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  



  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  



  
    
      


1208
1209
1210


1208
1209
1210
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208# File 'lib/rspec/core/configuration.rb', line 1208

defdef alias_it_behaves_like_toalias_it_behaves_like_to((new_namenew_name,, report_labelreport_label==''''''))
  RSpecRSpec::::CoreCore::::ExampleGroupExampleGroup..define_nested_shared_group_methoddefine_nested_shared_group_method((new_namenew_name,, report_labelreport_label))
endend# File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  

  
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  


  
  
    
  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  



  
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  


    
      
  
  
    Adds blockblock to the end of the list of afterafter blocks in the same
scope (:example:example, :context:context, or :suite:suite), in contrast to #after,
which adds the hook to the start of the list.Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full afterafter hook docs.See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite:suite scope. Hooks with the :suite:suite scope will be run once after
the last example of the entire suite is executed.This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  
    Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  

  
    Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:See Also:
  
    
      #append_after#append_after
    
      #before#before
    
      #prepend_before#prepend_before
    
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996# File 'lib/rspec/core/configuration.rb', line 1996

defdef append_afterappend_after((scopescope==nilnil,, **metameta,, &&blockblock))
  handle_suite_hookhandle_suite_hook((scopescope,, metameta)) dodo
    @after_suite_hooks@after_suite_hooks <<<< HooksHooks::::AfterHookAfterHook..newnew((blockblock,, {{}}))
  endend |||| beginbegin
    # defeat Ruby 2.5 lazy proc allocation to ensure
# defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
# the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
# so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
# https://bugs.ruby-lang.org/issues/14045#note-5
    blockblock..__id____id__

    add_hook_to_existing_matching_groupsadd_hook_to_existing_matching_groups((metameta,, scopescope)) {{ ||gg|| gg..append_afterappend_after((scopescope,, **metameta,, &&blockblock)) }}
    supersuper((scopescope,, **metameta,, &&blockblock))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  

  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


  
  
    Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Registers blockblock as an aroundaround hook.Registers block as an around hook.

See Hooks#around for full aroundaround hook docs.See Hooks#around for full around hook docs.


  
    Registers block as an around hook.

See Hooks#around for full around hook docs.


  

  
    Registers block as an around hook.

See Hooks#around for full around hook docs.


  


  


  


  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014# File 'lib/rspec/core/configuration.rb', line 2014

defdef aroundaround((scopescope==nilnil,, **metameta,, &&blockblock))
  # defeat Ruby 2.5 lazy proc allocation to ensure
# defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
# the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
# so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
# https://bugs.ruby-lang.org/issues/14045#note-5
  blockblock..__id____id__

  add_hook_to_existing_matching_groupsadd_hook_to_existing_matching_groups((metameta,, scopescope)) {{ ||gg|| gg..aroundaround((scopescope,, **metameta,, &&blockblock)) }}
  supersuper((scopescope,, **metameta,, &&blockblock))
endend# File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  

  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  


  
  
    Registers block as an around hook.

See Hooks#around for full around hook docs.


  


  


  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  


    
      
  
  
    Regexps used to exclude lines from backtraces.Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace--backtrace on the command line, in a .rspec.rspec file, or in the
rspec_optionsrspec_options attribute of RSpec's rake task.To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  
    Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  

  
    Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  


  
Returns:Returns:

  
    
      
      
        (Array<Regexp>Array<Regexp>)(Array<Regexp>)
      
      
      
    
      
      
        (Array<Regexp>)
      
      
      
    
  

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


665
666
667


665
666
667
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665# File 'lib/rspec/core/configuration.rb', line 665

defdef backtrace_exclusion_patternsbacktrace_exclusion_patterns
  @backtrace_formatter@backtrace_formatter..exclusion_patternsexclusion_patterns
endend# File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  

  
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  


  
  
    Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to exclude lines in backtrace.Set regular expressions used to exclude lines in backtrace.


  
    Set regular expressions used to exclude lines in backtrace.


  

  
    Set regular expressions used to exclude lines in backtrace.


  


  Parameters:Parameters:

  
    
      
        patternspatterns
      
      
        (Array<Regexp>Array<Regexp>)(Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patternsset backtrace_formatter exlusion_patterns
set backtrace_formatter exlusion_patterns

      
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  

  
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  




  Parameters:

  
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  




  
    
      


671
672
673


671
672
673
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671# File 'lib/rspec/core/configuration.rb', line 671

defdef backtrace_exclusion_patterns=backtrace_exclusion_patterns=((patternspatterns))
  @backtrace_formatter@backtrace_formatter..exclusion_patternsexclusion_patterns == patternspatterns
endend# File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  

  
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  


  
  
    Set regular expressions used to exclude lines in backtrace.


  


  Parameters:

  
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  




  
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  


    
      
  
  
    Regexps used to include lines in backtraces.Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion andand an inclusion pattern
will be included.Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.You can modify the list via the getter, or replace it with the setter.


  
    Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.


  

  
    Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.


  


  
Returns:Returns:

  
    
      
      
        (Array<Regexp>Array<Regexp>)(Array<Regexp>)
      
      
      
    
      
      
        (Array<Regexp>)
      
      
      
    
  

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


684
685
686


684
685
686
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684# File 'lib/rspec/core/configuration.rb', line 684

defdef backtrace_inclusion_patternsbacktrace_inclusion_patterns
  @backtrace_formatter@backtrace_formatter..inclusion_patternsinclusion_patterns
endend# File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  

  
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  


  
  
    Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to include lines in backtrace.Set regular expressions used to include lines in backtrace.


  
    Set regular expressions used to include lines in backtrace.


  

  
    Set regular expressions used to include lines in backtrace.


  


  


  


  
    
      


690
691
692


690
691
692
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690# File 'lib/rspec/core/configuration.rb', line 690

defdef backtrace_inclusion_patterns=backtrace_inclusion_patterns=((patternspatterns))
  @backtrace_formatter@backtrace_formatter..inclusion_patternsinclusion_patterns == patternspatterns
endend# File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  

  
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  


  
  
    Set regular expressions used to include lines in backtrace.


  


  


  
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  


    
      
  
  
    Defines a beforebefore hook. See Hooks#before for full docs.Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite:suite scope. Hooks with the :suite:suite scope will be run once before
the first example of the entire suite is executed.This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  
    Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  

  
    Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:See Also:
  
    
      #prepend_before#prepend_before
    
      #after#after
    
      #append_after#append_after
    
  
    
      #prepend_before
    
      #after
    
      #append_after
    
  


  

  See Also:
  
    
      #prepend_before
    
      #after
    
      #append_after
    
  


  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914# File 'lib/rspec/core/configuration.rb', line 1914

defdef beforebefore((scopescope==nilnil,, **metameta,, &&blockblock))
  handle_suite_hookhandle_suite_hook((scopescope,, metameta)) dodo
    @before_suite_hooks@before_suite_hooks <<<< HooksHooks::::BeforeHookBeforeHook..newnew((blockblock,, {{}}))
  endend |||| beginbegin
    # defeat Ruby 2.5 lazy proc allocation to ensure
# defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
# the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
# so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
# https://bugs.ruby-lang.org/issues/14045#note-5
    blockblock..__id____id__

    add_hook_to_existing_matching_groupsadd_hook_to_existing_matching_groups((metameta,, scopescope)) {{ ||gg|| gg..beforebefore((scopescope,, **metameta,, &&blockblock)) }}
    supersuper((scopescope,, **metameta,, &&blockblock))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  

  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


  
  
    Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #prepend_before
    
      #after
    
      #append_after
    
  


  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Check if color is enabled for a particular output.Check if color is enabled for a particular output.


  
    Check if color is enabled for a particular output.


  

  
    Check if color is enabled for a particular output.


  


  Parameters:Parameters:

  
    
      
        outputoutput
      
      
        (IOIO)(IO)
      
      
        (defaults to: output_streamoutput_stream)(defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_streamoutput_streaman output stream to use, defaults to the current
output_stream
an output stream to use, defaults to the current
output_stream

      
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  

  
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  


Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  Parameters:

  
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  


Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


911
912
913
914
915
916
917
918


911
912
913
914
915
916
917
918
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911# File 'lib/rspec/core/configuration.rb', line 911

defdef color_enabled?color_enabled?((outputoutput==output_streamoutput_stream))
  casecase color_modecolor_mode
  whenwhen :on:on thenthen truetrue
  whenwhen :off:off thenthen falsefalse
  elseelse # automatic
# automatic
    output_to_tty?output_to_tty?((outputoutput)) |||| ((colorcolor &&&& tty?tty?))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  

  
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  


  
  
    Check if color is enabled for a particular output.


  


  Parameters:

  
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  


Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  


    
      
  
  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  

  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  


  


  


  
    
      


971
972
973


971
972
973
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971# File 'lib/rspec/core/configuration.rb', line 971

defdef default_formatterdefault_formatter
  formatter_loaderformatter_loader..default_formatterdefault_formatter
endend# File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  

  
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  


  
  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  


  


  
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  


    
      
  
  
    Sets a fallback formatter to use if none other has been set.Sets a fallback formatter to use if none other has been set.


  
    Sets a fallback formatter to use if none other has been set.


  

  
    Sets a fallback formatter to use if none other has been set.


  


  
  
    Examples:Examples:
    
      
      
RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..default_formatterdefault_formatter == ''docdoc'''doc'
endend
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  



  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  



  
    
      


982
983
984


982
983
984
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982# File 'lib/rspec/core/configuration.rb', line 982

defdef default_formatter=default_formatter=((valuevalue))
  formatter_loaderformatter_loader..default_formatterdefault_formatter == valuevalue
endend# File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  

  
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  


  
  
    Sets a fallback formatter to use if none other has been set.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  



  
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  


    
      
  
  
    Defines a callback that can assign derived metadata values.Defines a callback that can assign derived metadata values.


  
    Defines a callback that can assign derived metadata values.


  

  
    Defines a callback that can assign derived metadata values.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  # Tag all groups and examples in the spec/unit directory with
# Tag all groups and examples in the spec/unit directory with
  # :type => :unit
# :type => :unit
  configconfig..define_derived_metadatadefine_derived_metadata((:file_path:file_path =>=> %r{%r{/spec/unit//spec/unit/}}%r{/spec/unit/})) dodo ||metadatametadata||
    metadatametadata[[:type:type]] == :unit:unit
  endend
endendRSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
endRSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
    Examples:
    
      
      RSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
Parameters:Parameters:

  
    
      
        filtersfilters
      
      
        (Array<Symbol>Array<Symbol>, HashHash)(Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.
metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  

  
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  


Yield Parameters:Yield Parameters:

  
    
      
        metadatametadata
      
      
        (HashHash)(Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.original metadata hash from an example or
group. Mutate this in your block as needed.
original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  

  
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  



  
  
    Examples:
    
      
      RSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
Parameters:

  
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  


Yield Parameters:

  
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  



  
    
      


1839
1840
1841
1842


1839
1840
1841
1842
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839# File 'lib/rspec/core/configuration.rb', line 1839

defdef define_derived_metadatadefine_derived_metadata((**filtersfilters,, &&blockblock))
  metameta == MetadataMetadata..build_hash_frombuild_hash_from((filtersfilters,, :warn_about_example_group_filtering:warn_about_example_group_filtering))
  @derived_metadata_blocks@derived_metadata_blocks..appendappend((blockblock,, metameta))
endend# File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  

  
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  


  
  
    Defines a callback that can assign derived metadata values.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
Parameters:

  
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  


Yield Parameters:

  
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  



  
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  


    
      
  
  
    Determines where deprecation warnings are printed.
Defaults to $stderr$stderr.Determines where deprecation warnings are printed.
Defaults to $stderr.


  
    Determines where deprecation warnings are printed.
Defaults to $stderr.


  

  
    Determines where deprecation warnings are printed.
Defaults to $stderr.


  


  
Returns:Returns:

  
    
      
      
        (IOIO, StringString)(IO, String)
      
      
      
        —
        IO or filename to write toIO or filename to write to
IO or filename to write to

      
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  

  
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  



  
Returns:

  
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  



  
    
      


162


162
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162# File 'lib/rspec/core/configuration.rb', line 162

define_readerdefine_reader :deprecation_stream:deprecation_stream# File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  

  
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  


  
  
    Determines where deprecation warnings are printed.
Defaults to $stderr.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  



  
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  


    
      
  
  
    Determines where deprecation warnings are printed.Determines where deprecation warnings are printed.


  
    Determines where deprecation warnings are printed.


  

  
    Determines where deprecation warnings are printed.


  


  Parameters:Parameters:

  
    
      
        valuevalue
      
      
        (IOIO, StringString)(IO, String)
      
      
      
        —
        IO to write to or filename to write toIO to write to or filename to write to
IO to write to or filename to write to

      
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  

  
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  




  Parameters:

  
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  




  
    
      


166
167
168
169
170
171
172
173
174
175
176


166
167
168
169
170
171
172
173
174
175
176
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166# File 'lib/rspec/core/configuration.rb', line 166

defdef deprecation_stream=deprecation_stream=((valuevalue))
  ifif @reporter@reporter &&&& !!valuevalue..equal?equal?((@deprecation_stream@deprecation_stream))
    warnwarn ""RSpec's reporter has already been initialized with RSpec's reporter has already been initialized with """RSpec's reporter has already been initialized with " \
      ""#{#{deprecation_streamdeprecation_stream..inspectinspect}} as the deprecation stream, so your change to  as the deprecation stream, so your change to """#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      ""`deprecation_stream` will be ignored. You should configure it earlier for `deprecation_stream` will be ignored. You should configure it earlier for """`deprecation_stream` will be ignored. You should configure it earlier for " \
      ""it to take effect, or use the `--deprecation-out` CLI option. it to take effect, or use the `--deprecation-out` CLI option. """it to take effect, or use the `--deprecation-out` CLI option. " \
      ""(Called from (Called from #{#{CallerFilterCallerFilter..first_non_rspec_linefirst_non_rspec_line}}))"""(Called from #{CallerFilter.first_non_rspec_line})"
  elseelse
    @deprecation_stream@deprecation_stream == valuevalue
  endend
endend# File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  

  
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  


  
  
    Determines where deprecation warnings are printed.


  


  Parameters:

  
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  




  
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_withmock_with or expect_withexpect_with to anything else).It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).
It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:Note:
    If the user uses this options with mock_with :mochamock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.
If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describedescribe,
shared_examples_forshared_examples_for, etc) onto mainmain and ModuleModule, instead
requiring you to prefix these methods with RSpec.RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  
    
  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  

  
    
  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  


  
  
    Examples:Examples:
    
      
      
# It disables all monkey patching.
# It disables all monkey patching.
RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..disable_monkey_patching!disable_monkey_patching!
endend

# Is an equivalent to
# Is an equivalent to
RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..expose_dsl_globallyexpose_dsl_globally == falsefalse

  configconfig..mock_withmock_with :rspec:rspec dodo ||mocksmocks||
    mocksmocks..syntaxsyntax == :expect:expect
    mocksmocks..patch_marshal_to_support_partial_doublespatch_marshal_to_support_partial_doubles == falsefalse
  endend

  configconfig..expect_withexpect_with :rspec:rspec dodo ||expectationsexpectations||
    expectationsexpectations..syntaxsyntax == :expect:expect
  endend
endend
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  
    Examples:
    
      
      
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  



  
  
    Examples:
    
      
      
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  



  
    
      


1812
1813
1814
1815
1816
1817


1812
1813
1814
1815
1816
1817
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812# File 'lib/rspec/core/configuration.rb', line 1812

defdef disable_monkey_patching!disable_monkey_patching!
  selfself..expose_dsl_globallyexpose_dsl_globally == falsefalse
  selfself..disable_monkey_patchingdisable_monkey_patching == truetrue
  conditionally_disable_mocks_monkey_patchingconditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patchingconditionally_disable_expectations_monkey_patching
endend# File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  

  
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  


  
  
    
  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  


  
  
    Examples:
    
      
      
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  



  
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  


    
      
  
  
    Returns the exclusion_filterexclusion_filter. If none has been set, returns an empty
hash.Returns the exclusion_filter. If none has been set, returns an empty
hash.


  
    Returns the exclusion_filter. If none has been set, returns an empty
hash.


  

  
    Returns the exclusion_filter. If none has been set, returns an empty
hash.


  


  


  


  
    
      


1337
1338
1339


1337
1338
1339
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337# File 'lib/rspec/core/configuration.rb', line 1337

defdef exclusion_filterexclusion_filter
  filter_managerfilter_manager..exclusionsexclusions
endend# File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  

  
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  


  
  
    Returns the exclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  


    
      
  
  
    Clears and reassigns the exclusion_filterexclusion_filter. Set to nilnil if you don't
want any exclusion filter at all.Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

WarningWarning

This overrides any exclusion filters/tags set on the command line or in
configuration files.This overrides any exclusion filters/tags set on the command line or in
configuration files.


  
    Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

Warning

This overrides any exclusion filters/tags set on the command line or in
configuration files.


  

  
    Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

Warning

This overrides any exclusion filters/tags set on the command line or in
configuration files.


  


  


  


  
    
      


1330
1331
1332
1333


1330
1331
1332
1333
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330# File 'lib/rspec/core/configuration.rb', line 1330

defdef exclusion_filter=exclusion_filter=((filterfilter))
  metameta == MetadataMetadata..build_hash_frombuild_hash_from(([[filterfilter]],, :warn_about_example_group_filtering:warn_about_example_group_filtering))
  filter_managerfilter_manager..exclude_onlyexclude_only metameta
endend# File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  

  
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  


  
  
    Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

Warning

This overrides any exclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  


    
      
  
  
    Sets the expectation framework module(s) to be included in each example
group.Sets the expectation framework module(s) to be included in each example
group.

frameworksframeworks can be :rspec:rspec, :test_unit:test_unit, :minitest:minitest, a custom
module, or any combination thereof:frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

configconfig..expect_withexpect_with :rspec:rspec
configconfig..expect_withexpect_with :test_unit:test_unit
configconfig..expect_withexpect_with :minitest:minitest
configconfig..expect_withexpect_with :rspec:rspec,, :minitest:minitest
configconfig..expect_withexpect_with OtherExpectationFrameworkOtherExpectationFramework
config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework
config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec:rspec, :minitest:minitest, and :test_unit:test_unit into the
appropriate modules.RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

ConfigurationConfiguration

If the module responds to configurationconfiguration, expect_withexpect_with will
yield the configurationconfiguration object if given a block:If the module responds to configuration, expect_with will
yield the configuration object if given a block:

configconfig..expect_withexpect_with OtherExpectationFrameworkOtherExpectationFramework dodo ||custom_configcustom_config||
  custom_configcustom_config..custom_settingcustom_setting == truetrue
endend
config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end
config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  
    Sets the expectation framework module(s) to be included in each example
group.

frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

Configuration

If the module responds to configuration, expect_with will
yield the configuration object if given a block:

config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  

  
    Sets the expectation framework module(s) to be included in each example
group.

frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

Configuration

If the module responds to configuration, expect_with will
yield the configuration object if given a block:

config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  


  


  


  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826# File 'lib/rspec/core/configuration.rb', line 826

defdef expect_withexpect_with((**frameworksframeworks))
  modulesmodules == frameworksframeworks..mapmap dodo ||frameworkframework||
    casecase frameworkframework
    whenwhen ModuleModule
      frameworkframework
    whenwhen :rspec:rspec
      requirerequire ''rspec/expectationsrspec/expectations'''rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
# Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
# that it satisfies the `MultipleExceptionError` interface.
      ::::RSpecRSpec::::ExpectationsExpectations::::MultipleExpectationsNotMetErrorMultipleExpectationsNotMetError..__send____send__((
        :include:include,, MultipleExceptionErrorMultipleExceptionError::::InterfaceTagInterfaceTag
      ))

      ::::RSpecRSpec::::MatchersMatchers
    whenwhen :test_unit:test_unit
      requirerequire ''rspec/core/test_unit_assertions_adapterrspec/core/test_unit_assertions_adapter'''rspec/core/test_unit_assertions_adapter'
      ::::RSpecRSpec::::CoreCore::::TestUnitAssertionsAdapterTestUnitAssertionsAdapter
    whenwhen :minitest:minitest
      requirerequire ''rspec/core/minitest_assertions_adapterrspec/core/minitest_assertions_adapter'''rspec/core/minitest_assertions_adapter'
      ::::RSpecRSpec::::CoreCore::::MinitestAssertionsAdapterMinitestAssertionsAdapter
    elseelse
      raiseraise ArgumentErrorArgumentError,, ""#{#{frameworkframework..inspectinspect}} is not supported is not supported"""#{framework.inspect} is not supported"
    endend
  endend

  ifif ((modulesmodules -- @expectation_frameworks@expectation_frameworks))..any?any?
    assert_no_example_groups_definedassert_no_example_groups_defined((:expect_with:expect_with))
  endend

  ifif block_given?block_given?
    raiseraise ""expect_with only accepts a block with a single argument. expect_with only accepts a block with a single argument. """expect_with only accepts a block with a single argument. " \
          ""Call expect_with Call expect_with #{#{modulesmodules..lengthlength}} times,  times, """Call expect_with #{modules.length} times, " \
          ""once with each argument, instead.once with each argument, instead."""once with each argument, instead." ifif modulesmodules..lengthlength >> 11
    raiseraise ""#{#{modulesmodules..firstfirst}} must respond to `configuration` so that  must respond to `configuration` so that """#{modules.first} must respond to `configuration` so that " \
          ""expect_with can yield it.expect_with can yield it."""expect_with can yield it." unlessunless modulesmodules..firstfirst..respond_to?respond_to?((:configuration:configuration))
    yieldyield modulesmodules..firstfirst..configurationconfiguration
  endend

  @expectation_frameworks@expectation_frameworks..pushpush((**modulesmodules))
endend# File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  

  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  


  
  
    Sets the expectation framework module(s) to be included in each example
group.

frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

Configuration

If the module responds to configuration, expect_with will
yield the configuration object if given a block:

config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  


  


  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  


    
      
  
  
    Delegates to expect_with(framework).Delegates to expect_with(framework).


  
    Delegates to expect_with(framework).


  

  
    Delegates to expect_with(framework).


  


  


  


  
    
      


799
800
801


799
800
801
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799# File 'lib/rspec/core/configuration.rb', line 799

defdef expectation_framework=expectation_framework=((frameworkframework))
  expect_withexpect_with((frameworkframework))
endend# File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  

  
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  


  
  
    Delegates to expect_with(framework).


  


  


  
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  


    
      
  
  
    Returns the configured expectation framework adapter module(s)Returns the configured expectation framework adapter module(s)


  
    Returns the configured expectation framework adapter module(s)


  

  
    Returns the configured expectation framework adapter module(s)


  


  


  


  
    
      


787
788
789
790
791
792
793
794
795
796


787
788
789
790
791
792
793
794
795
796
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787# File 'lib/rspec/core/configuration.rb', line 787

defdef expectation_frameworksexpectation_frameworks
  ifif @expectation_frameworks@expectation_frameworks..empty?empty?
    beginbegin
      expect_withexpect_with :rspec:rspec
    rescuerescue LoadErrorLoadError
      expect_withexpect_with ModuleModule..newnew
    endend
  endend
  @expectation_frameworks@expectation_frameworks
endend# File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  

  
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  


  
  
    Returns the configured expectation framework adapter module(s)


  


  


  
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  


    
      
  
  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via exampleexample,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to itit, beforebefore, letlet, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's exampleexample method, so this config option
can be used to maintain compatibility.Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  

  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  


  
  
    Examples:Examples:
    
      
      
RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..expose_current_running_example_asexpose_current_running_example_as :example:example
endend

RSpecRSpec..describedescribe MyClassMyClass dodo
  beforebefore dodo
    # `example` can be used here because of the above config.
# `example` can be used here because of the above config.
    do_somethingdo_something ifif exampleexample..metadatametadata[[:type:type]] ==== ""foofoo"""foo"
  endend
endend
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
Parameters:Parameters:

  
    
      
        method_namemethod_name
      
      
        (SymbolSymbol)(Symbol)
      
      
      
        —
        the name of the helper methodthe name of the helper method
the name of the helper method

      
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  




  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  




  
    
      


1750
1751
1752
1753
1754
1755
1756
1757


1750
1751
1752
1753
1754
1755
1756
1757
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750# File 'lib/rspec/core/configuration.rb', line 1750

defdef expose_current_running_example_asexpose_current_running_example_as((method_namemethod_name))
  ExposeCurrentExampleExposeCurrentExample..module_execmodule_exec dodo
    extendextend RSpecRSpec::::SharedContextSharedContext
    letlet((method_namemethod_name)) {{ ||exex|| exex }}
  endend

  includeinclude ExposeCurrentExampleExposeCurrentExample
endend# File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  

  
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  


  
  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  




  
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  


    
      
  
  
    Use this to expose the core RSpec DSL via ModuleModule and the mainmain
object. It will be set automatically but you can override it to
remove the DSL.
Default: trueUse this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  
    Use this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  

  
    Use this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  


  


  


  
    
      


149
150
151
152
153
154
155
156
157


149
150
151
152
153
154
155
156
157
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149# File 'lib/rspec/core/configuration.rb', line 149

defdef expose_dsl_globally=expose_dsl_globally=((valuevalue))
  ifif valuevalue
    CoreCore::::DSLDSL..expose_globally!expose_globally!
    CoreCore::::SharedExampleGroupSharedExampleGroup::::TopLevelDSLTopLevelDSL..expose_globally!expose_globally!
  elseelse
    CoreCore::::DSLDSL..remove_globally!remove_globally!
    CoreCore::::SharedExampleGroupSharedExampleGroup::::TopLevelDSLTopLevelDSL..remove_globally!remove_globally!
  endend
endend# File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  

  
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  


  
  
    Use this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  


  


  
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  


    
      
  
  
    Indicates if the DSL has been exposed off of modules and mainmain.
Default: trueIndicates if the DSL has been exposed off of modules and main.
Default: true


  
    Indicates if the DSL has been exposed off of modules and main.
Default: true


  

  
    Indicates if the DSL has been exposed off of modules and main.
Default: true


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


141
142
143


141
142
143
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141# File 'lib/rspec/core/configuration.rb', line 141

defdef expose_dsl_globally?expose_dsl_globally?
  CoreCore::::DSLDSL..exposed_globally?exposed_globally?
endend# File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  

  
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  


  
  
    Indicates if the DSL has been exposed off of modules and main.
Default: true


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  


    
      
  
  
    Tells RSpec to extend example groups with modmod. Methods defined in
modmod are exposed to example groups (not examples). Use filtersfilters to
constrain the groups to extend.Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to includeinclude, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  
    Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  

  
    Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  


  
  
    Examples:Examples:
    
      
      
modulemodule UiHelpersUiHelpers
  defdef run_in_browserrun_in_browser
    # ...
# ...
  endend
endend

RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..extendextend((UiHelpersUiHelpers,, :type:type =>=> :request:request))
endend

describedescribe ""edit profileedit profile"""edit profile",, :type:type =>=> :request:request dodo
  run_in_browserrun_in_browser

  itit ""does stuff in the clientdoes stuff in the client"""does stuff in the client" dodo
    # ...
# ...
  endend
endend
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  
    Examples:
    
      
      
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  


  See Also:See Also:
  
    
      #include#include
    
      #prepend#prepend
    
  
    
      #include
    
      #prepend
    
  


  
  
    Examples:
    
      
      
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #prepend
    
  


  
    
      


1460
1461
1462
1463
1464


1460
1461
1462
1463
1464
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460# File 'lib/rspec/core/configuration.rb', line 1460

defdef extendextend((modmod,, **filtersfilters))
  define_mixed_in_moduledefine_mixed_in_module((modmod,, filtersfilters,, @extend_modules@extend_modules,, :extend:extend)) dodo ||groupgroup||
    safe_extendsafe_extend((modmod,, groupgroup))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  

  
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  


  
  
    Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  


  
  
    Examples:
    
      
      
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #prepend
    
  


  
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.
The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  
    
  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  

  
    
  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..filter_gems_from_backtracefilter_gems_from_backtrace ""rackrack"""rack",, ""rakerake"""rake"
endendRSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
endRSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
    Examples:
    
      
      RSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
Parameters:Parameters:

  
    
      
        gem_namesgem_names
      
      
        (Array<String>Array<String>)(Array<String>)
      
      
      
        —
        Names of the gems to filterNames of the gems to filter
Names of the gems to filter

      
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  

  
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  




  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
Parameters:

  
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  




  
    
      


710
711
712
713
714


710
711
712
713
714
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710# File 'lib/rspec/core/configuration.rb', line 710

defdef filter_gems_from_backtracefilter_gems_from_backtrace((**gem_namesgem_names))
  gem_namesgem_names..eacheach dodo ||namename||
    @backtrace_formatter@backtrace_formatter..filter_gemfilter_gem((namename))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  

  
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  


  
  
    
  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
Parameters:

  
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  




  
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  


    
      
  
  
    Adds key/value pairs to the exclusion_filterexclusion_filter. If argsargs
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value truetrue.Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

NoteNote

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec.rspec).Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  
    Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  

  
    Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:Examples:
    
      
      # Given this declaration.
# Given this declaration.
describedescribe ""somethingsomething"""something",, :foo:foo =>=> ''barbar'''bar' dodo
  # ...
# ...
endend

# Any of the following will exclude that group.
# Any of the following will exclude that group.
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> ''barbar'''bar'
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> //^ba^ba///^ba/
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> lambdalambda {{||vv|| vv ==== ''barbar'''bar'}}
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> lambdalambda {{||vv,,mm|| mm[[:foo:foo]] ==== ''barbar'''bar'}}

# Given a proc with an arity of 1, the lambda is passed the value
# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
# related to the key, e.g.
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> lambdalambda {{||vv|| vv ==== ''barbar'''bar'}}

# Given a proc with an arity of 2, the lambda is passed the value
# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
# related to the key, and the metadata itself e.g.
configconfig..filter_run_excludingfilter_run_excluding :foo:foo =>=> lambdalambda {{||vv,,mm|| mm[[:foo:foo]] ==== ''barbar'''bar'}}

filter_run_excludingfilter_run_excluding :foo:foo # same as filter_run_excluding :foo => true# same as filter_run_excluding :foo => true# Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true# Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  



  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  



  
    
      


1317
1318
1319
1320
1321


1317
1318
1319
1320
1321
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317# File 'lib/rspec/core/configuration.rb', line 1317

defdef filter_run_excludingfilter_run_excluding((**argsargs))
  metameta == MetadataMetadata..build_hash_frombuild_hash_from((argsargs,, :warn_about_example_group_filtering:warn_about_example_group_filtering))
  filter_managerfilter_manager..exclude_with_low_priorityexclude_with_low_priority metameta
  static_config_filter_managerstatic_config_filter_manager..exclude_with_low_priorityexclude_with_low_priority MetadataMetadata..deep_hash_dupdeep_hash_dup((metameta))
endend# File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  

  
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


  
  
    Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  



  
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Adds key/value pairs to the inclusion_filterinclusion_filter. If argsargs
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value truetrue.Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

NoteNote

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec.rspec).Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  
    Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  

  
    Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:Examples:
    
      
      # Given this declaration.
# Given this declaration.
describedescribe ""somethingsomething"""something",, :foo:foo =>=> ''barbar'''bar' dodo
  # ...
# ...
endend

# Any of the following will include that group.
# Any of the following will include that group.
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> ''barbar'''bar'
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> //^ba^ba///^ba/
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> lambdalambda {{||vv|| vv ==== ''barbar'''bar'}}
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> lambdalambda {{||vv,,mm|| mm[[:foo:foo]] ==== ''barbar'''bar'}}

# Given a proc with an arity of 1, the lambda is passed the value
# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
# related to the key, e.g.
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> lambdalambda {{||vv|| vv ==== ''barbar'''bar'}}

# Given a proc with an arity of 2, the lambda is passed the value
# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
# related to the key, and the metadata itself e.g.
configconfig..filter_run_includingfilter_run_including :foo:foo =>=> lambdalambda {{||vv,,mm|| mm[[:foo:foo]] ==== ''barbar'''bar'}}

filter_run_includingfilter_run_including :foo:foo # same as filter_run_including :foo => true# same as filter_run_including :foo => true# Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true# Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  



  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  



  
    
      


1243
1244
1245
1246
1247


1243
1244
1245
1246
1247
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243# File 'lib/rspec/core/configuration.rb', line 1243

defdef filter_run_includingfilter_run_including((**argsargs))
  metameta == MetadataMetadata..build_hash_frombuild_hash_from((argsargs,, :warn_about_example_group_filtering:warn_about_example_group_filtering))
  filter_managerfilter_manager..include_with_low_priorityinclude_with_low_priority metameta
  static_config_filter_managerstatic_config_filter_manager..include_with_low_priorityinclude_with_low_priority MetadataMetadata..deep_hash_dupdeep_hash_dup((metameta))
endend# File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  

  
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


  
  
    Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  



  
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focusconfig.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus:focus metadata, or prefixing it with an ff
(as in fdescribefdescribe, fcontextfcontext and fitfit) since those are aliases for
describedescribe/contextcontext/itit with :focus:focus metadata.Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  

  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  


  


  


  
    
      


1259
1260
1261
1262
1263


1259
1260
1261
1262
1263
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259# File 'lib/rspec/core/configuration.rb', line 1259

defdef filter_run_when_matchingfilter_run_when_matching((**argsargs))
  when_first_matching_example_definedwhen_first_matching_example_defined((**argsargs)) dodo
    filter_runfilter_run((**argsargs))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  

  
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  


  
  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  


  


  
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  


    
      
  
  
    Formats the docstring output using the block provided.Formats the docstring output using the block provided.


  
    Formats the docstring output using the block provided.


  

  
    Formats the docstring output using the block provided.


  


  
  
    Examples:Examples:
    
      
      # This will strip the descriptions of both examples and example
# This will strip the descriptions of both examples and example
# groups.
# groups.
RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..format_docstringsformat_docstrings {{ ||ss|| ss..stripstrip }}
endend# This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end# This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  
    Examples:
    
      
      # This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  



  
  
    Examples:
    
      
      # This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  



  
    
      


1601
1602
1603


1601
1602
1603
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601# File 'lib/rspec/core/configuration.rb', line 1601

defdef format_docstringsformat_docstrings((&&blockblock))
  @format_docstrings_block@format_docstrings_block == block_given?block_given? ?? blockblock :: DEFAULT_FORMATTERDEFAULT_FORMATTER
endend# File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  

  
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  


  
  
    Formats the docstring output using the block provided.


  


  
  
    Examples:
    
      
      # This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  



  
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  


    
      
  
  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoaderFormatterLoader for introspection.Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.Note as this is a duplicate, any mutations will be disregarded.


  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.


  

  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.


  


  
Returns:Returns:

  
    
      
      
        (ArrayArray)(Array)
      
      
      
        —
        the formatters currently loadedthe formatters currently loaded
the formatters currently loaded

      
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  

  
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  



  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  



  
    
      


992
993
994


992
993
994
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992# File 'lib/rspec/core/configuration.rb', line 992

defdef formattersformatters
  formatter_loaderformatter_loader..formattersformatters..dupdup
endend# File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  

  
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  


  
  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  



  
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  


    
      
  
  
    Toggle full backtrace.Toggle full backtrace.


  
    Toggle full backtrace.


  

  
    Toggle full backtrace.


  


  


  


  
    
      


876
877
878


876
877
878
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876# File 'lib/rspec/core/configuration.rb', line 876

defdef full_backtrace=full_backtrace=((true_or_falsetrue_or_false))
  @backtrace_formatter@backtrace_formatter..full_backtracefull_backtrace == true_or_falsetrue_or_false
endend# File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  

  
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  


  
  
    Toggle full backtrace.


  


  


  
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  


    
      
  
  
    Check if full backtrace is enabled.Check if full backtrace is enabled.


  
    Check if full backtrace is enabled.


  

  
    Check if full backtrace is enabled.


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
        —
        is full backtrace enabledis full backtrace enabled
is full backtrace enabled

      
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  

  
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  



  
    
      


870
871
872


870
871
872
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870# File 'lib/rspec/core/configuration.rb', line 870

defdef full_backtrace?full_backtrace?
  @backtrace_formatter@backtrace_formatter..full_backtrace?full_backtrace?
endend# File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  

  
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  


  
  
    Check if full backtrace is enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  



  
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  


    
      
  
  
    Returns full description filterReturns full description filter


  
    Returns full description filter


  

  
    Returns full description filter


  


  
Returns:Returns:

  
    
      
      
        (ArrayArray)(Array)
      
      
      
        —
        full description filterfull description filter
full description filter

      
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  

  
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  



  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  



  
    
      


945
946
947


945
946
947
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945# File 'lib/rspec/core/configuration.rb', line 945

defdef full_descriptionfull_description
  filterfilter..fetchfetch :full_description:full_description,, nilnil
endend# File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  

  
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  


  
  
    Returns full description filter


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  



  
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  


    
      
  
  
    Run examples matching on descriptiondescription in all files to run.Run examples matching on description in all files to run.


  
    Run examples matching on description in all files to run.


  

  
    Run examples matching on description in all files to run.


  


  Parameters:Parameters:

  
    
      
        descriptiondescription
      
      
        (StringString, RegexpRegexp)(String, Regexp)
      
      
      
        —
        the pattern to filter onthe pattern to filter on
the pattern to filter on

      
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  

  
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  




  Parameters:

  
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  




  
    
      


940
941
942


940
941
942
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940# File 'lib/rspec/core/configuration.rb', line 940

defdef full_description=full_description=((descriptiondescription))
  filter_runfilter_run :full_description:full_description =>=> RegexpRegexp..unionunion((**ArrayArray((descriptiondescription))..mapmap {{ ||dd|| RegexpRegexp..newnew((dd)) }}))
endend# File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  

  
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  


  
  
    Run examples matching on description in all files to run.


  


  Parameters:

  
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  




  
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  


    
      
  
  
    
  
    Note:Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.
Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include modmod in example groups. Methods defined in
modmod are exposed to examples (not example groups). Use filtersfilters to
constrain the groups or examples in which to include the module.Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  
    
  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  

  
    
  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  


  
  
    Examples:Examples:
    
      
      
modulemodule AuthenticationHelpersAuthenticationHelpers
  defdef login_aslogin_as((useruser))
    # ...
# ...
  endend
endend

modulemodule UserHelpersUserHelpers
  defdef usersusers((usernameusername))
    # ...
# ...
  endend
endend

RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..includeinclude((UserHelpersUserHelpers)) # included in all groups
# included in all groups
  configconfig..includeinclude((AuthenticationHelpersAuthenticationHelpers,, :type:type =>=> :request:request))
endend

describedescribe ""edit profileedit profile"""edit profile",, :type:type =>=> :request:request dodo
  itit ""can be viewed by owning usercan be viewed by owning user"""can be viewed by owning user" dodo
    login_aslogin_as usersusers((:jdoe:jdoe))
    getget ""/profiles/jdoe/profiles/jdoe"""/profiles/jdoe"
    assert_selectassert_select "".username.username""".username",, :text:text =>=> ''jdoejdoe'''jdoe'
  endend
endend
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  
    Examples:
    
      
      
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  


  See Also:See Also:
  
    
      #include_context#include_context
    
      #extend#extend
    
      #prepend#prepend
    
  
    
      #include_context
    
      #extend
    
      #prepend
    
  


  
  
    Examples:
    
      
      
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  


  See Also:
  
    
      #include_context
    
      #extend
    
      #prepend
    
  


  
    
      


1382
1383
1384
1385
1386


1382
1383
1384
1385
1386
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382# File 'lib/rspec/core/configuration.rb', line 1382

defdef includeinclude((modmod,, **filtersfilters))
  define_mixed_in_moduledefine_mixed_in_module((modmod,, filtersfilters,, @include_modules@include_modules,, :include:include)) dodo ||groupgroup||
    safe_includesafe_include((modmod,, groupgroup))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  

  
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  


  
  
    
  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  


  
  
    Examples:
    
      
      
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  


  See Also:
  
    
      #include_context
    
      #extend
    
      #prepend
    
  


  
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.
Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filtersfilters to constrain the groups or examples in which to include
the example group.Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  
    
  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  

  
    
  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  


  
  
    Examples:Examples:
    
      
      
RSpecRSpec..shared_contextshared_context ""example usersexample users"""example users" dodo
  letlet((:admin_user:admin_user)) {{ create_usercreate_user((:admin:admin)) }}
  letlet((:guest_user:guest_user)) {{ create_usercreate_user((:guest:guest)) }}
endend

RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..include_contextinclude_context ""example usersexample users"""example users",, :type:type =>=> :request:request
endend

RSpecRSpec..describedescribe ""The admin pageThe admin page"""The admin page",, :type:type =>=> :request:request dodo
  itit ""can be viewed by adminscan be viewed by admins"""can be viewed by admins" dodo
    login_withlogin_with admin_useradmin_user
    getget ""/admin/admin"""/admin"
    expectexpect((responseresponse))..toto be_okbe_ok
  endend

  itit ""cannot be viewed by guestscannot be viewed by guests"""cannot be viewed by guests" dodo
    login_withlogin_with guest_userguest_user
    getget ""/admin/admin"""/admin"
    expectexpect((responseresponse))..toto be_forbiddenbe_forbidden
  endend
endend
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  
    Examples:
    
      
      
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  


  See Also:See Also:
  
    
      #include#include
    
  
    
      #include
    
  


  
  
    Examples:
    
      
      
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  


  See Also:
  
    
      #include
    
  


  
    
      


1425
1426
1427
1428


1425
1426
1427
1428
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425# File 'lib/rspec/core/configuration.rb', line 1425

defdef include_contextinclude_context((shared_group_nameshared_group_name,, **filtersfilters))
  shared_moduleshared_module == worldworld..shared_example_group_registryshared_example_group_registry..findfind(([[:main:main]],, shared_group_nameshared_group_name))
  includeinclude shared_moduleshared_module,, **filtersfilters
endend# File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  

  
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  


  
  
    
  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  


  
  
    Examples:
    
      
      
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  


  See Also:
  
    
      #include
    
  


  
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  


    
      
  
  
    Returns the inclusion_filterinclusion_filter. If none has been set, returns an empty
hash.Returns the inclusion_filter. If none has been set, returns an empty
hash.


  
    Returns the inclusion_filter. If none has been set, returns an empty
hash.


  

  
    Returns the inclusion_filter. If none has been set, returns an empty
hash.


  


  


  


  
    
      


1281
1282
1283


1281
1282
1283
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281# File 'lib/rspec/core/configuration.rb', line 1281

defdef inclusion_filterinclusion_filter
  filter_managerfilter_manager..inclusionsinclusions
endend# File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  

  
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  


  
  
    Returns the inclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  


    
      
  
  
    Clears and reassigns the inclusion_filterinclusion_filter. Set to nilnil if you don't
want any inclusion filter at all.Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

WarningWarning

This overrides any inclusion filters/tags set on the command line or in
configuration files.This overrides any inclusion filters/tags set on the command line or in
configuration files.


  
    Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

Warning

This overrides any inclusion filters/tags set on the command line or in
configuration files.


  

  
    Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

Warning

This overrides any inclusion filters/tags set on the command line or in
configuration files.


  


  


  


  
    
      


1272
1273
1274
1275


1272
1273
1274
1275
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272# File 'lib/rspec/core/configuration.rb', line 1272

defdef inclusion_filter=inclusion_filter=((filterfilter))
  metameta == MetadataMetadata..build_hash_frombuild_hash_from(([[filterfilter]],, :warn_about_example_group_filtering:warn_about_example_group_filtering))
  filter_managerfilter_manager..include_onlyinclude_only metameta
endend# File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  

  
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  


  
  
    Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

Warning

This overrides any inclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  


    
      
  
  
    Returns the configured mock framework adapter module.Returns the configured mock framework adapter module.


  
    Returns the configured mock framework adapter module.


  

  
    Returns the configured mock framework adapter module.


  


  
Returns:Returns:

  
    
      
      
        (SymbolSymbol)(Symbol)
      
      
      
    
      
      
        (Symbol)
      
      
      
    
  

  
    
      
      
        (Symbol)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


637
638
639
640
641
642
643
644
645
646


637
638
639
640
641
642
643
644
645
646
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637# File 'lib/rspec/core/configuration.rb', line 637

defdef mock_frameworkmock_framework
  ifif @mock_framework@mock_framework..nil?nil?
    beginbegin
      mock_withmock_with :rspec:rspec
    rescuerescue LoadErrorLoadError
      mock_withmock_with :nothing:nothing
    endend
  endend
  @mock_framework@mock_framework
endend# File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  

  
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  


  
  
    Returns the configured mock framework adapter module.


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  


    
      
  
  
    Delegates to mock_framework=(framework).Delegates to mock_framework=(framework).


  
    Delegates to mock_framework=(framework).


  

  
    Delegates to mock_framework=(framework).


  


  


  


  
    
      


649
650
651


649
650
651
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649# File 'lib/rspec/core/configuration.rb', line 649

defdef mock_framework=mock_framework=((frameworkframework))
  mock_withmock_with frameworkframework
endend# File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  

  
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  


  
  
    Delegates to mock_framework=(framework).


  


  


  
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  


    
      
  
  
    Sets the mock framework adapter module.Sets the mock framework adapter module.

frameworkframework can be a Symbol or a Module.framework can be a Symbol or a Module.

Given any of :rspec:rspec, :mocha:mocha, :flexmock:flexmock, or :rr:rr, configures the
named framework.Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing:nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)
setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)
setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configurationconfiguration and mock_withmock_with receives a
block, it will yield the configuration object to the block e.g.If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

configconfig..mock_withmock_with OtherMockFrameworkAdapterOtherMockFrameworkAdapter dodo ||mod_configmod_config||
  mod_configmod_config..custom_settingcustom_setting == truetrue
endend
config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end
config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  
    Sets the mock framework adapter module.

framework can be a Symbol or a Module.

Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  

  
    Sets the mock framework adapter module.

framework can be a Symbol or a Module.

Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  


  


  


  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754# File 'lib/rspec/core/configuration.rb', line 754

defdef mock_withmock_with((frameworkframework))
  framework_moduleframework_module ==
    ifif frameworkframework..is_a?is_a?((ModuleModule))
      frameworkframework
    elseelse
      const_nameconst_name == MOCKING_ADAPTERSMOCKING_ADAPTERS..fetchfetch((frameworkframework)) dodo
        raiseraise ArgumentErrorArgumentError,,
              ""Unknown mocking framework: Unknown mocking framework: #{#{frameworkframework..inspectinspect}}. . """Unknown mocking framework: #{framework.inspect}. " \
              ""Pass a module or one of Pass a module or one of #{#{MOCKING_ADAPTERSMOCKING_ADAPTERS..keyskeys..inspectinspect}}"""Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      endend

      RSpecRSpec::::SupportSupport..require_rspec_corerequire_rspec_core ""mocking_adapters/mocking_adapters/#{#{const_nameconst_name..to_sto_s..downcasedowncase}}"""mocking_adapters/#{const_name.to_s.downcase}"
      RSpecRSpec::::CoreCore::::MockingAdaptersMockingAdapters..const_getconst_get((const_nameconst_name))
    endend

  new_namenew_name,, old_nameold_name == [[framework_moduleframework_module,, @mock_framework@mock_framework]]..mapmap dodo ||modmod||
    modmod..respond_to?respond_to?((:framework_name:framework_name)) ?? modmod..framework_nameframework_name :: :unnamed:unnamed
  endend

  unlessunless new_namenew_name ==== old_nameold_name
    assert_no_example_groups_definedassert_no_example_groups_defined((:mock_framework:mock_framework))
  endend

  ifif block_given?block_given?
    raiseraise ""#{#{framework_moduleframework_module}} must respond to `configuration` so that  must respond to `configuration` so that """#{framework_module} must respond to `configuration` so that " \
          ""mock_with can yield it.mock_with can yield it."""mock_with can yield it." unlessunless framework_moduleframework_module..respond_to?respond_to?((:configuration:configuration))
    yieldyield framework_moduleframework_module..configurationconfiguration
  endend

  @mock_framework@mock_framework == framework_moduleframework_module
endend# File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  

  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  


  
  
    Sets the mock framework adapter module.

framework can be a Symbol or a Module.

Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  


  


  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  


    
      
  
  
    Invokes block before defining an example groupInvokes block before defining an example group


  
    Invokes block before defining an example group


  

  
    Invokes block before defining an example group


  


  


  


  
    
      


2046
2047
2048


2046
2047
2048
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046# File 'lib/rspec/core/configuration.rb', line 2046

defdef on_example_group_definitionon_example_group_definition((&&blockblock))
  on_example_group_definition_callbackson_example_group_definition_callbacks <<<< blockblock
endend# File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  

  
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  


  
  
    Invokes block before defining an example group


  


  


  
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  


    
      
  
  
    
  This method is part of a private API.This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example groupReturns an array of blocks to call before defining an example group


  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example group


  

  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example group


  


  


  


  
    
      


2052
2053
2054


2052
2053
2054
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052# File 'lib/rspec/core/configuration.rb', line 2052

defdef on_example_group_definition_callbackson_example_group_definition_callbacks
  @on_example_group_definition_callbacks@on_example_group_definition_callbacks ||=||= [[]]
endend# File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  

  
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  


  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example group


  


  


  
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  


    
      
  
  
    Sets the default global ordering strategy. By default this can be one
of :defined:defined, :random:random, but is customizable through the
register_orderingregister_ordering API. If order is set to 'rand:<seed>''rand:<seed>',
the seed will also be set.Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  
    Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  

  
    Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  


  

  See Also:See Also:
  
    
      #register_ordering#register_ordering
    
  
    
      #register_ordering
    
  


  

  See Also:
  
    
      #register_ordering
    
  


  
    
      


1646


1646
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646# File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_managerdelegate_to_ordering_manager :order=:order=# File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  

  
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  


  
  
    Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  


  

  See Also:
  
    
      #register_ordering
    
  


  
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  


    
      
  
  
    Tells RSpec to prepend example groups with modmod. Methods defined in
modmod are exposed to examples (not example groups). Use filtersfilters to
constrain the groups in which to prepend the module.Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to includeinclude, but module is included before the example group's class
in the ancestor chain.Similar to include, but module is included before the example group's class
in the ancestor chain.


  
    Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to include, but module is included before the example group's class
in the ancestor chain.


  

  
    Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to include, but module is included before the example group's class
in the ancestor chain.


  


  
  
    Examples:Examples:
    
      
      
modulemodule OverrideModOverrideMod
  defdef override_meoverride_me
    ""overriddenoverridden"""overridden"
  endend
endend

RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..prependprepend((OverrideModOverrideMod,, :method:method =>=> :prepend:prepend))
endend

describedescribe ""overriding example's classoverriding example's class"""overriding example's class",, :method:method =>=> :prepend:prepend dodo
  itit ""finds the userfinds the user"""finds the user" dodo
    selfself..classclass..class_evalclass_eval dodo
      defdef override_meoverride_me
      endend
    endend
    override_meoverride_me # => "overridden"
# => "overridden"
    # ...
# ...
  endend
endend
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  
    Examples:
    
      
      
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  


  See Also:See Also:
  
    
      #include#include
    
      #extend#extend
    
  
    
      #include
    
      #extend
    
  


  
  
    Examples:
    
      
      
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #extend
    
  


  
    
      


1499
1500
1501
1502
1503


1499
1500
1501
1502
1503
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499# File 'lib/rspec/core/configuration.rb', line 1499

defdef prependprepend((modmod,, **filtersfilters))
  define_mixed_in_moduledefine_mixed_in_module((modmod,, filtersfilters,, @prepend_modules@prepend_modules,, :prepend:prepend)) dodo ||groupgroup||
    safe_prependsafe_prepend((modmod,, groupgroup))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  

  
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  


  
  
    Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to include, but module is included before the example group's class
in the ancestor chain.


  


  
  
    Examples:
    
      
      
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #extend
    
  


  
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  


    
      
  
  
    Adds blockblock to the start of the list of beforebefore blocks in the same
scope (:example:example, :context:context, or :suite:suite), in contrast to #before,
which adds the hook to the end of the list.Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full beforebefore hook docs.See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite:suite scope. Hooks with the :suite:suite scope will be run once before
the first example of the entire suite is executed.This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  
    Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  

  
    Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:See Also:
  
    
      #before#before
    
      #after#after
    
      #append_after#append_after
    
  
    
      #before
    
      #after
    
      #append_after
    
  


  

  See Also:
  
    
      #before
    
      #after
    
      #append_after
    
  


  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943# File 'lib/rspec/core/configuration.rb', line 1943

defdef prepend_beforeprepend_before((scopescope==nilnil,, **metameta,, &&blockblock))
  handle_suite_hookhandle_suite_hook((scopescope,, metameta)) dodo
    @before_suite_hooks@before_suite_hooks..unshiftunshift HooksHooks::::BeforeHookBeforeHook..newnew((blockblock,, {{}}))
  endend |||| beginbegin
    # defeat Ruby 2.5 lazy proc allocation to ensure
# defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
# the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
# so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
# https://bugs.ruby-lang.org/issues/14045#note-5
    blockblock..__id____id__

    add_hook_to_existing_matching_groupsadd_hook_to_existing_matching_groups((metameta,, scopescope)) {{ ||gg|| gg..prepend_beforeprepend_before((scopescope,, **metameta,, &&blockblock)) }}
    supersuper((scopescope,, **metameta,, &&blockblock))
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  

  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


  
  
    Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #before
    
      #after
    
      #append_after
    
  


  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  

  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  


  
  
    Examples:Examples:
    
      
      
RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..raise_errors_for_deprecations!raise_errors_for_deprecations!
endend
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  



  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  



  
    
      


1772
1773
1774


1772
1773
1774
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772# File 'lib/rspec/core/configuration.rb', line 1772

defdef raise_errors_for_deprecations!raise_errors_for_deprecations!
  selfself..deprecation_streamdeprecation_stream == FormattersFormatters::::DeprecationFormatterDeprecationFormatter::::RaiseErrorStreamRaiseErrorStream..newnew
endend# File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  

  
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  


  
  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  



  
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  


    
      
  
  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  

  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  


  
  
    Examples:Examples:
    
      
      
RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..raise_on_warningraise_on_warning == truetrue
endend
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  



  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  



  
    
      


1720
1721
1722
1723
1724
1725
1726


1720
1721
1722
1723
1724
1725
1726
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720# File 'lib/rspec/core/configuration.rb', line 1720

defdef raise_on_warning=raise_on_warning=((valuevalue))
  ifif valuevalue
    RSpecRSpec::::SupportSupport..warning_notifierwarning_notifier == RAISE_ERROR_WARNING_NOTIFIERRAISE_ERROR_WARNING_NOTIFIER
  elseelse
    RSpecRSpec::::SupportSupport..warning_notifierwarning_notifier == RSpecRSpec::::SupportSupport::::DEFAULT_WARNING_NOTIFIERDEFAULT_WARNING_NOTIFIER
  endend
endend# File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  

  
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  


  
  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  



  
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  


    
      
  
  
    
  
    Note:Note:
    Pass the symbol :global:global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order:order metadata.Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.
Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name>:order => <name> metadata to the example group.Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  
    
  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  

  
    
  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..register_orderingregister_ordering :reverse:reverse dodo ||listlist||
    listlist..reversereverse
  endend
endend

RSpecRSpec..describedescribe ''MyClassMyClass'''MyClass',, :order:order =>=> :reverse:reverse dodo
  # ...
# ...
endendRSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
endRSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpecRSpec..configureconfigure dodo ||rspecrspec||
  rspecrspec..register_orderingregister_ordering :global:global dodo ||examplesexamples||
    acceptanceacceptance,, otherother == examplesexamples..partitionpartition dodo ||exampleexample||
      exampleexample..metadatametadata[[:type:type]] ==== :acceptance:acceptance
    endend
    otherother ++ acceptanceacceptance
  endend
endend

RSpecRSpec..describedescribe ''MyClassMyClass'''MyClass',, :type:type =>=> :acceptance:acceptance dodo
  # will run last
# will run last
endend

RSpecRSpec..describedescribe ''MyClassMyClass'''MyClass' dodo
  # will run first
# will run first
endendRSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
endRSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
    Examples:
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
Parameters:Parameters:

  
    
      
        namename
      
      
        (SymbolSymbol)(Symbol)
      
      
      
        —
        The name of the ordering.The name of the ordering.
The name of the ordering.

      
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  

  
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  


Yields:Yields:

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groupsBlock that will order the given examples or example groups
Block that will order the given examples or example groups

      
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

Yield Parameters:Yield Parameters:

  
    
      
        listlist
      
      
        (Array<RSpec::Core::Example>Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>Array<RSpec::Core::ExampleGroup>)(Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to orderThe examples or groups to order
The examples or groups to order

      
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

  
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

Yield Returns:Yield Returns:

  
    
      
      
        (Array<RSpec::Core::Example>Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>Array<RSpec::Core::ExampleGroup>)(Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groupsThe re-ordered examples or groups
The re-ordered examples or groups

      
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  

  
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  



  
  
    Examples:
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
Parameters:

  
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  


Yields:

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

Yield Parameters:

  
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

Yield Returns:

  
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  



  
    
      


1694


1694
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694# File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_managerdelegate_to_ordering_manager :register_ordering:register_ordering# File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  

  
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  


  
  
    
  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  


  
  
    Examples:
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
Parameters:

  
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  


Yields:

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

Yield Parameters:

  
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

Yield Returns:

  
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  



  
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  


    
      
  
  
    Returns the currently configured reporterReturns the currently configured reporter


  
    Returns the currently configured reporter


  

  
    Returns the currently configured reporter


  


  
Returns:Returns:

  
    
      
      
        (RSpec::Core::ReporterRSpec::Core::Reporter)(RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporterthe currently configured reporter
the currently configured reporter

      
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  

  
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  



  
Returns:

  
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  



  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024# File 'lib/rspec/core/configuration.rb', line 1024

defdef reporterreporter
  # @reporter_buffer should only ever be set in this method to cover
# @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
# initialization of @reporter.
  @reporter_buffer@reporter_buffer |||| @reporter@reporter ||=||=
    beginbegin
      @reporter_buffer@reporter_buffer == DeprecationReporterBufferDeprecationReporterBuffer..newnew
      formatter_loaderformatter_loader..prepare_defaultprepare_default output_wrapperoutput_wrapper,, deprecation_streamdeprecation_stream
      @reporter_buffer@reporter_buffer..play_ontoplay_onto((formatter_loaderformatter_loader..reporterreporter))
      @reporter_buffer@reporter_buffer == nilnil
      formatter_loaderformatter_loader..reporterreporter
    endend
endend# File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  

  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  


  
  
    Returns the currently configured reporter


  


  
Returns:

  
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  



  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  


    
      
  
  
    Seed for random ordering (default: generated randomly each run).Seed for random ordering (default: generated randomly each run).

When you run specs with --order random--order random, RSpec generates a random seed
for the randomization and prints it to the output_streamoutput_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed--seed) to run
using the same seed while you debug the issue.When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  
    Seed for random ordering (default: generated randomly each run).

When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  

  
    Seed for random ordering (default: generated randomly each run).

When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  


  


  


  
    
      


1636


1636
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636# File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_managerdelegate_to_ordering_manager :seed:seed# File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  

  
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  


  
  
    Seed for random ordering (default: generated randomly each run).

When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  


  


  
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  


    
      
  
  
    Sets the seed value and sets the default global ordering to random.Sets the seed value and sets the default global ordering to random.


  
    Sets the seed value and sets the default global ordering to random.


  

  
    Sets the seed value and sets the default global ordering to random.


  


  


  


  
    
      


1622


1622
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622# File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_managerdelegate_to_ordering_manager :seed=:seed=# File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  

  
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  


  
  
    Sets the seed value and sets the default global ordering to random.


  


  


  
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  


    
      
  
  
    Deprecated.Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.
This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.
Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  

  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  


  


  


  
    
      


375
376
377
378
379
380
381
382


375
376
377
378
379
380
381
382
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375# File 'lib/rspec/core/configuration.rb', line 375

defdef treat_symbols_as_metadata_keys_with_true_values=treat_symbols_as_metadata_keys_with_true_values=((_value_value))
  RSpecRSpec..deprecatedeprecate((
    ""RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values="""RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",,
    :message:message =>=> ""RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= """RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                ""is deprecated, it is now set to true as default and is deprecated, it is now set to true as default and """is deprecated, it is now set to true as default and " \
                ""setting it to false has no effect.setting it to false has no effect."""setting it to false has no effect."
  ))
endend# File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  

  
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  


  
  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  


  


  
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  


    
      
  
  
    Set Ruby warnings on or off.Set Ruby warnings on or off.


  
    Set Ruby warnings on or off.


  

  
    Set Ruby warnings on or off.


  


  


  


  
    
      


1700
1701
1702


1700
1701
1702
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700# File 'lib/rspec/core/configuration.rb', line 1700

defdef warnings=warnings=((valuevalue))
  $VERBOSE$VERBOSE == !!!!valuevalue
endend# File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  

  
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  


  
  
    Set Ruby warnings on or off.


  


  


  
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  


    
      
  
  
    Returns Whether or not ruby warnings are enabled.Returns Whether or not ruby warnings are enabled.


  
    Returns Whether or not ruby warnings are enabled.


  

  
    Returns Whether or not ruby warnings are enabled.


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.Whether or not ruby warnings are enabled.
Whether or not ruby warnings are enabled.

      
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  

  
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  



  
    
      


1705
1706
1707


1705
1706
1707
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705# File 'lib/rspec/core/configuration.rb', line 1705

defdef warnings?warnings?
  $VERBOSE$VERBOSE
endend# File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  

  
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  


  
  
    Returns Whether or not ruby warnings are enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  



  
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  


    
      
  
  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  

  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  


  
  
    Examples:Examples:
    
      
      RSpecRSpec..configureconfigure dodo ||configconfig||
  configconfig..when_first_matching_example_definedwhen_first_matching_example_defined((:db:db)) dodo
    # Load a support file that does some heavyweight setup,
# Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
# including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
# any examples tagged with `:db`.
    requirerequire ''support/dbsupport/db'''support/db'
  endend
endendRSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
endRSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  
    Examples:
    
      
      RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  



  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  



  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862# File 'lib/rspec/core/configuration.rb', line 1862

defdef when_first_matching_example_definedwhen_first_matching_example_defined((**filtersfilters))
  specified_metaspecified_meta == MetadataMetadata..build_hash_frombuild_hash_from((filtersfilters,, :warn_about_example_group_filtering:warn_about_example_group_filtering))

  callbackcallback == lambdalambda dodo ||example_or_group_metaexample_or_group_meta||
    # Example groups do not have `:example_group` metadata
# Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
# (instead they have `:parent_example_group` metadata).
    returnreturn unlessunless example_or_group_metaexample_or_group_meta..key?key?((:example_group:example_group))

    # Ensure the callback only fires once.
# Ensure the callback only fires once.
    @derived_metadata_blocks@derived_metadata_blocks..deletedelete((callbackcallback,, specified_metaspecified_meta))

    yieldyield
  endend

  @derived_metadata_blocks@derived_metadata_blocks..appendappend((callbackcallback,, specified_metaspecified_meta))
endend# File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  

  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  


  
  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  



  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  


    
  
    Instance Method Details

    
      
  
  
    Adds a formatter to the set RSpec will use for this run.


  


  Parameters:

  
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  



  See Also:
  
    
      Formatters::Protocol
    
  


  
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  


    
      
  
  
    Adds a custom setting to the RSpec.configuration object.

RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  


  Parameters:

  
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  


  
    
    
    
    
    Options Hash (opts):
    
      
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
  



  
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  


    
      
  
  
    Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  


  See Also:
  
    
      #alias_example_to
    
      #expose_dsl_globally=
    
  


  
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
Parameters:

  
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  




  
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  



  
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  


    
      
  
  
    Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Registers block as an around hook.

See Hooks#around for full around hook docs.


  


  


  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  


    
      
  
  
    Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to exclude lines in backtrace.


  


  Parameters:

  
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  




  
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  


    
      
  
  
    Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to include lines in backtrace.


  


  


  
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  


    
      
  
  
    Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #prepend_before
    
      #after
    
      #append_after
    
  


  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Check if color is enabled for a particular output.


  


  Parameters:

  
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  


Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  


    
      
  
  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  


  


  
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  


    
      
  
  
    Sets a fallback formatter to use if none other has been set.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  



  
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  


    
      
  
  
    Defines a callback that can assign derived metadata values.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
Parameters:

  
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  


Yield Parameters:

  
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  



  
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  


    
      
  
  
    Determines where deprecation warnings are printed.
Defaults to $stderr.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  



  
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  


    
      
  
  
    Determines where deprecation warnings are printed.


  


  Parameters:

  
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  




  
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  


    
      
  
  
    
  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  


  
  
    Examples:
    
      
      
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  



  
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  


    
      
  
  
    Returns the exclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  


    
      
  
  
    Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

Warning

This overrides any exclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  


    
      
  
  
    Sets the expectation framework module(s) to be included in each example
group.

frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

Configuration

If the module responds to configuration, expect_with will
yield the configuration object if given a block:

config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  


  


  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  


    
      
  
  
    Delegates to expect_with(framework).


  


  


  
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  


    
      
  
  
    Returns the configured expectation framework adapter module(s)


  


  


  
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  


    
      
  
  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  




  
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  


    
      
  
  
    Use this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  


  


  
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  


    
      
  
  
    Indicates if the DSL has been exposed off of modules and main.
Default: true


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  


    
      
  
  
    Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  


  
  
    Examples:
    
      
      
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #prepend
    
  


  
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
Parameters:

  
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  




  
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  


    
      
  
  
    Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  



  
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  



  
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  


  


  
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  


    
      
  
  
    Formats the docstring output using the block provided.


  


  
  
    Examples:
    
      
      # This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  



  
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  


    
      
  
  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  



  
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  


    
      
  
  
    Toggle full backtrace.


  


  


  
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  


    
      
  
  
    Check if full backtrace is enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  



  
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  


    
      
  
  
    Returns full description filter


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  



  
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  


    
      
  
  
    Run examples matching on description in all files to run.


  


  Parameters:

  
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  




  
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  


    
      
  
  
    
  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  


  
  
    Examples:
    
      
      
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  


  See Also:
  
    
      #include_context
    
      #extend
    
      #prepend
    
  


  
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  


  
  
    Examples:
    
      
      
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  


  See Also:
  
    
      #include
    
  


  
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  


    
      
  
  
    Returns the inclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  


    
      
  
  
    Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

Warning

This overrides any inclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  


    
      
  
  
    Returns the configured mock framework adapter module.


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  


    
      
  
  
    Delegates to mock_framework=(framework).


  


  


  
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  


    
      
  
  
    Sets the mock framework adapter module.

framework can be a Symbol or a Module.

Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  


  


  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  


    
      
  
  
    Invokes block before defining an example group


  


  


  
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example group


  


  


  
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  


    
      
  
  
    Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  


  

  See Also:
  
    
      #register_ordering
    
  


  
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  


    
      
  
  
    Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to include, but module is included before the example group's class
in the ancestor chain.


  


  
  
    Examples:
    
      
      
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #extend
    
  


  
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  


    
      
  
  
    Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #before
    
      #after
    
      #append_after
    
  


  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  



  
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  


    
      
  
  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  



  
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  


    
      
  
  
    
  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  


  
  
    Examples:
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
Parameters:

  
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  


Yields:

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

Yield Parameters:

  
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

Yield Returns:

  
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  



  
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  


    
      
  
  
    Returns the currently configured reporter


  


  
Returns:

  
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  



  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  


    
      
  
  
    Seed for random ordering (default: generated randomly each run).

When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  


  


  
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  


    
      
  
  
    Sets the seed value and sets the default global ordering to random.


  


  


  
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  


    
      
  
  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  


  


  
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  


    
      
  
  
    Set Ruby warnings on or off.


  


  


  
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  


    
      
  
  
    Returns Whether or not ruby warnings are enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  



  
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  


    
      
  
  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  



  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  


    
  

Class: RSpec::Core::Configuration
  
  
  


  
  
    Inherits:
    
      Object
      
        
          Object
          
            RSpec::Core::Configuration
          
        
        show all
      
    
  
  

  
  
  
  
  
      Includes:
      Module.new, Hooks
  
  
  

  

  
  
    Defined in:
    lib/rspec/core/configuration.rb
  
  


Overview
  
    Stores runtime configuration information.

Configuration options are loaded from multiple files and joined together
with command-line switches and the SPEC_OPTS environment variable.

Precedence order (where later entries overwrite earlier entries on
conflicts):


Global ($XDG_CONFIG_HOME/rspec/options, or ~/.rspec if it does
not exist)
Project-specific (./.rspec)
Local (./.rspec-local)
Command-line options
SPEC_OPTS


For example, an option set in the local file will override an option set
in your global file.

The global, project-specific and local files can all be overridden with a
separate custom file using the --options command-line parameter.


  


  
  
    Examples:
    
      
        Standard settings

      
      RSpec.configure do |c|
  c.drb          = true
  c.drb_port     = 1234
  c.default_path = 'behavior'
end
    
      
        Hooks

      
      RSpec.configure do |c|
  c.before(:suite)   { establish_connection }
  c.before(:example) { log_in_as :authorized }
  c.around(:example) { |ex| Database.transaction(&ex) }
end
    
  


  See Also:
  
    
      RSpec.configure
    
      Hooks
    
  





  Instance Attribute Summary 
  
    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines which bisect runner implementation gets used to run subsets of the suite during a bisection.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The mode for determining whether to display output in color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The default output color.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Path to use if no path is provided to the rspec command (default: "spec").

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used to print details.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Run examples over DRb (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The drb_port (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Prints the formatter output of your suite without running any examples or hooks.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Default: $stderr.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The file path to use for persisting example statuses.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Exclude files matching this pattern.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    If specified, indicates the number of failures required before cleaning up and exit (default: nil).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Whether or not to fail when there are no RSpec examples (default: false).

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate failure.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    The exit code to return if there are any failures (default: 1).

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    The spec files RSpec will run.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color used when a pending example is fixed.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Returns dirs that have been prepended to the load path by the -I command line option.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Maximum count of failed source lines to display in the failure reports.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates if the --only-failures (or --next-failure) flag is being used.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Determines where RSpec will send its output.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to print pending examples.

  


    
      
  
  
  
  
    
    
  
  
  
  
  private

  
    Defaults profile_examples to 10 examples when @profile_examples is true.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Specifies which directories contain the source code for your project.

  


    
      
  
  
  
  
    
      readonly
    
    
  
  
  
  
  

  
    Indicates files configured to be required.

  


    
      
  
  
  
  
    
    
  
  
  
  deprecated
  

  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Configures how RSpec treats metadata passed as part of a shared example group definition.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Don't print filter info i.e.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Color to use to indicate success.

  


    
      
  
  
  
  
    
    
  
  
  
  
  

  
    Use threadsafe options where available.

  


    
  




  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    Adds a formatter to the set RSpec will use for this run.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds a custom setting to the RSpec.configuration object.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a after hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that defines an example group with the provided metadata.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a method that delegates to example including the submitted args.

  


      
        
  
  
  
  
  
  
  
  

  
    Define an alias for it_should_behave_like that allows different language (like "it_has_behavior" or "it_behaves_like") to be employed when including shared examples.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds block to the end of the list of after blocks in the same scope (:example, :context, or :suite), in contrast to #after, which adds the hook to the start of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers block as an around hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to exclude lines from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to exclude lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Regexps used to include lines in backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Set regular expressions used to include lines in backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a before hook.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if color is enabled for a particular output.

  


      
        
  
  
  
  
  
  
  
  

  
    The formatter that will be used if no formatter has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets a fallback formatter to use if none other has been set.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that can assign derived metadata values.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Determines where deprecation warnings are printed.

  


      
        
  
  
  
  
  
  
  
  

  
    Enables zero monkey patching mode for RSpec.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the expectation framework module(s) to be included in each example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to expect_with(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured expectation framework adapter module(s).

  


      
        
  
  
  
  
  
  
  
  

  
    Exposes the current running example via the named helper method.

  


      
        
  
  
  
  
  
  
  
  

  
    Use this to expose the core RSpec DSL via Module and the main object.

  


      
        
  
  
  
  
  
  
  
  

  
    Indicates if the DSL has been exposed off of modules and main.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to extend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds #backtrace_exclusion_patterns that will filter lines from the named gems from backtraces.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the exclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds key/value pairs to the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Applies the provided filter only if any of examples match, in constrast to #filter_run, which always applies even if no examples match, in which case no examples will be run.

  


      
        
  
  
  
  
  
  
  
  

  
    Formats the docstring output using the block provided.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns a duplicate of the formatters currently loaded in the FormatterLoader for introspection.

  


      
        
  
  
  
  
  
  
  
  

  
    Toggle full backtrace.

  


      
        
  
  
  
  
  
  
  
  

  
    Check if full backtrace is enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Full description filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Run examples matching on description in all files to run.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include mod in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to include the named shared example group in example groups.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the inclusion_filter.

  


      
        
  
  
  
  
  
  
  
  

  
    Clears and reassigns the inclusion_filter.

  


      
        
  
  
  
    constructor
  
  
  
  
  
  

  
    Build an object to store runtime configuration options and set defaults.

  


      
        
  
  
  
  
  
  
  
  

  
    Returns the configured mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Delegates to mock_framework=(framework).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the mock framework adapter module.

  


      
        
  
  
  
  
  
  
  
  

  
    Invokes block before defining an example group.

  


      
        
  
  
  
  
  
  
  
  private

  
    Returns an array of blocks to call before defining an example group.

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the default global ordering strategy.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells RSpec to prepend example groups with mod.

  


      
        
  
  
  
  
  
  
  
  

  
    Adds block to the start of the list of before blocks in the same scope (:example, :context, or :suite), in contrast to #before, which adds the hook to the end of the list.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns deprecation warnings into errors, in order to surface the full backtrace of the call site.

  


      
        
  
  
  
  
  
  
  
  

  
    Turns warnings into errors.

  


      
        
  
  
  
  
  
  
  
  

  
    Registers a named ordering strategy that can later be used to order an example group's subgroups by adding :order => <name> metadata to the example group.

  


      
        
  
  
  
  
  
  
  
  

  
    The currently configured reporter.

  


      
        
  
  
  
  
  
  
  
  

  
    Seed for random ordering (default: generated randomly each run).

  


      
        
  
  
  
  
  
  
  
  

  
    Sets the seed value and sets the default global ordering to random.

  


      
        
  
  
  
  
  
  
  deprecated
  

  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.

  


      
        
  
  
  
  
  
  
  
  

  
    Set Ruby warnings on or off.

  


      
        
  
  
  
  
  
  
  
  

  
    Whether or not ruby warnings are enabled.

  


      
        
  
  
  
  
  
  
  
  

  
    Defines a callback that runs after the first example with matching metadata is defined.

  


      
    
  


  
  
  
  
  
  
  
  Constructor Details
  
    
  
  
    Build an object to store runtime configuration options and set defaults


  


  


  
    
      


500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
    
    
      # File 'lib/rspec/core/configuration.rb', line 500

def initialize
  # rubocop:disable Style/GlobalVars
  @start_time = $_rspec_core_load_started_at || ::RSpec::Core::Time.now
  # rubocop:enable Style/GlobalVars
  @expectation_frameworks = []
  @include_modules = FilterableItemRepository::QueryOptimized.new(:any?)
  @extend_modules  = FilterableItemRepository::QueryOptimized.new(:any?)
  @prepend_modules = FilterableItemRepository::QueryOptimized.new(:any?)

  @bisect_runner = RSpec::Support::RubyFeatures.fork_supported? ? :fork : :shell
  @bisect_runner_class = nil

  @before_suite_hooks = []
  @after_suite_hooks  = []

  @mock_framework = nil
  @files_or_directories_to_run = []
  @loaded_spec_files = Set.new
  @color = false
  @color_mode = :automatic
  @pattern = '**{,/*/**}/*_spec.rb'
  @exclude_pattern = ''
  @failure_exit_code = 1
  @fail_if_no_examples = false
  @spec_files_loaded = false

  @backtrace_formatter = BacktraceFormatter.new

  @default_path = 'spec'
  @project_source_dirs = %w[ spec lib app ]
  @deprecation_stream = $stderr
  @output_stream = $stdout
  @reporter = nil
  @reporter_buffer = nil
  @filter_manager = FilterManager.new
  @static_config_filter_manager = FilterManager.new
  @ordering_manager = Ordering::ConfigurationManager.new
  @preferred_options = {}
  @failure_color = :red
  @success_color = :green
  @pending_color = :yellow
  @default_color = :white
  @fixed_color = :blue
  @detail_color = :cyan
  @profile_examples = false
  @requires = []
  @libs = []
  @derived_metadata_blocks = FilterableItemRepository::QueryOptimized.new(:any?)
  @threadsafe = true
  @max_displayed_failure_line_count = 10
  @world = World::Null
  @shared_context_metadata_behavior = :trigger_inclusion

  define_built_in_hooks
end
    
  


  


  
    Instance Attribute Details
    
      
      
      
  
  
    
  
    Note:
    This option will only be used by --bisect if you set it in a file
loaded via --require.

  

Determines which bisect runner implementation gets used to run subsets
of the suite during a bisection. Your choices are:


:shell: Performs a spec run by shelling out, booting RSpec and your
application environment each time. This runner is the most widely
compatible runner, but is not as fast. On platforms that do not
support forking, this is the default.
:fork: Pre-boots RSpec and your application environment in a parent
process, and then forks a child process for each spec run. This runner
tends to be significantly faster than the :shell runner but cannot
be used in some situations. On platforms that support forking, this
is the default. If you use this runner, you should ensure that all
of your one-time setup logic goes in a before(:suite) hook instead
of getting run at the top-level of a file loaded by --require.



  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


472
473
474
    
    
      # File 'lib/rspec/core/configuration.rb', line 472

def bisect_runner
  @bisect_runner
end
    
  


    
      
      
      
  
  
    Deprecated. No longer recommended because of complex behavior. Instead,
rely on the fact that TTYs will display color by default, or set
#color_mode to :on to display color on a non-TTY output.

Enables color output if the output is a TTY.  As of RSpec 3.6, this is
the default behavior and this option is retained only for backwards
compatibility.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_mode
    
      #color_enabled?
    
  


  
    
      


890
891
892
    
    
      # File 'lib/rspec/core/configuration.rb', line 890

def color
  value_for(:color) { @color }
end
    
  


    
      
      
      
  
  
    The mode for determining whether to display output in color. One of:


:automatic - the output will be in color if the output is a TTY (the
default)
:on - the output will be in color, whether or not the output is a TTY
:off - the output will not be in color



  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  


  See Also:
  
    
      #color_enabled?
    
  


  
    
      


903
904
905
    
    
      # File 'lib/rspec/core/configuration.rb', line 903

def color_mode
  value_for(:color_mode) { @color_mode }
end
    
  


    
      
      
      
  
  
    The default output color. Defaults to :white but can be set to one of
the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


350
    
    
      # File 'lib/rspec/core/configuration.rb', line 350

add_setting :default_color
    
  


    
      
      
      
  
  
    
  
    Note:
    Other scripts invoking rspec indirectly will ignore this
setting.

  

Path to use if no path is provided to the rspec command (default:
"spec"). Allows you to just type rspec instead of rspec spec to
run all the examples in the spec directory.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


118
    
    
      # File 'lib/rspec/core/configuration.rb', line 118

add_read_only_setting :default_path
    
  


    
      
      
      
  
  
    Color used to print details.  Defaults to :cyan but can be set to one
of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


364
    
    
      # File 'lib/rspec/core/configuration.rb', line 364

add_setting :detail_color
    
  


    
      
      
      
  
  
    Run examples over DRb (default: false). RSpec doesn't supply the DRb
server, but you can use tools like spork.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


128
    
    
      # File 'lib/rspec/core/configuration.rb', line 128

add_setting :drb
    
  


    
      
      
      
  
  
    The drb_port (default: nil).


  


  


  
    
      


132
    
    
      # File 'lib/rspec/core/configuration.rb', line 132

add_setting :drb_port
    
  


    
      
      
      
  
  
    Prints the formatter output of your suite without running any
examples or hooks.


  


  


  
    
      


236
    
    
      # File 'lib/rspec/core/configuration.rb', line 236

add_setting :dry_run
    
  


    
      
      
      
  
  
    Default: $stderr.


  


  


  
    
      


136
    
    
      # File 'lib/rspec/core/configuration.rb', line 136

add_setting :error_stream
    
  


    
      
      
      
  
  
    The file path to use for persisting example statuses. Necessary for the
--only-failures and --next-failure CLI options.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the file path


  


  
Returns:

  
    
      
      
        (String)
      
      
      
        —
        the file path

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (String)
      
      
      
        —
        the file path

      
    
  




      
    
  



  
    
      


186
    
    
      # File 'lib/rspec/core/configuration.rb', line 186

define_reader :example_status_persistence_file_path
    
  


    
      
      
      
  
  
    Exclude files matching this pattern.


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


293
    
    
      # File 'lib/rspec/core/configuration.rb', line 293

define_reader :exclude_pattern
    
  


    
      
      
      
  
  
    If specified, indicates the number of failures required before cleaning
up and exit (default: nil). Can also be true to fail and exit on first
failure


  


  


  
    
      


209
    
    
      # File 'lib/rspec/core/configuration.rb', line 209

define_reader :fail_fast
    
  


    
      
      
      
  
  
    Whether or not to fail when there are no RSpec examples (default: false).


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


246
    
    
      # File 'lib/rspec/core/configuration.rb', line 246

add_setting :fail_if_no_examples
    
  


    
      
      
      
  
  
    Color to use to indicate failure.  Defaults to :red but can be set to
one of the following: [:black, :white, :red, :green, :yellow, :blue,
:magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


343
    
    
      # File 'lib/rspec/core/configuration.rb', line 343

add_setting :failure_color
    
  


    
      
      
      
  
  
    The exit code to return if there are any failures (default: 1).


  


  
Returns:

  
    
      
      
        (Integer)
      
      
      
    
  



  
    
      


241
    
    
      # File 'lib/rspec/core/configuration.rb', line 241

add_setting :failure_exit_code
    
  


    
      
      
      
  
  
    The spec files RSpec will run.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        specified files about to run

      
    
  



  
    
      


1064
1065
1066
    
    
      # File 'lib/rspec/core/configuration.rb', line 1064

def files_to_run
  @files_to_run ||= get_files_to_run(@files_or_directories_to_run)
end
    
  


    
      
      
      
  
  
    Color used when a pending example is fixed. Defaults to :blue but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


357
    
    
      # File 'lib/rspec/core/configuration.rb', line 357

add_setting :fixed_color
    
  


    
      
      
      
  
  
    Returns dirs that have been prepended to the load path by the -I
command line option.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


257
    
    
      # File 'lib/rspec/core/configuration.rb', line 257

define_reader :libs
    
  


    
      
      
      
  
  
    Maximum count of failed source lines to display in the failure reports.
(default 10).
return [Integer]


  


  


  
    
      


451
    
    
      # File 'lib/rspec/core/configuration.rb', line 451

add_setting :max_displayed_failure_line_count
    
  


    
      
      
      
  
  
    Indicates if the --only-failures (or --next-failure) flag is being used.


  


  


  
    
      


197
    
    
      # File 'lib/rspec/core/configuration.rb', line 197

define_reader :only_failures
    
  


    
      
      
      
  
  
    Determines where RSpec will send its output.
Default: $stdout.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
    
  



  
    
      


263
    
    
      # File 'lib/rspec/core/configuration.rb', line 263

define_reader :output_stream
    
  


    
      
      
      
  
  
    Load files matching this pattern (default: '**{,/*/**}/*_spec.rb').


  


  
Returns:

  
    
      
      
        (String)
      
      
      
    
  



  
    
      


282
    
    
      # File 'lib/rspec/core/configuration.rb', line 282

define_reader :pattern
    
  


    
      
      
      
  
  
    Color to use to print pending examples.  Defaults to :yellow but can
be set to one of the following: [:black, :white, :red, :green,
:yellow, :blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


336
    
    
      # File 'lib/rspec/core/configuration.rb', line 336

add_setting :pending_color
    
  


    
      
      
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Defaults profile_examples to 10 examples when @profile_examples is
true.


  


  


  
    
      


315
    
    
      # File 'lib/rspec/core/configuration.rb', line 315

add_setting :profile_examples
    
  


    
      
      
      
  
  
    Specifies which directories contain the source code for your project.
When a failure occurs, RSpec looks through the backtrace to find a
a line of source to print. It first looks for a line coming from
one of the project source directories so that, for example, it prints
the expectation or assertion call rather than the source code from
the expectation or assertion framework.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


309
    
    
      # File 'lib/rspec/core/configuration.rb', line 309

add_setting :project_source_dirs
    
  


    
      
      
      
  
  
    Indicates files configured to be required.


  


  
Returns:

  
    
      
      
        (Array<String>)
      
      
      
    
  



  
    
      


251
    
    
      # File 'lib/rspec/core/configuration.rb', line 251

define_reader :requires
    
  


    
      
      
      
  
  
    Deprecated. Use #filter_run_when_matching instead for the specific
filters that you want to be ignored if none match.

Run all examples if none match the configured filters
(default: false).


  


  


  
    
      


322
    
    
      # File 'lib/rspec/core/configuration.rb', line 322

add_setting :run_all_when_everything_filtered
    
  


    
      
      
      
  
  
    Configures how RSpec treats metadata passed as part of a shared example
group definition. For example, given this shared example group definition:

RSpec.shared_context "uses DB", :db => true do
  around(:example) do |ex|
    MyORM.transaction(:rollback => true, &ex)
  end
end


...there are two ways RSpec can treat the :db => true metadata, each
of which has a corresponding config option:


:trigger_inclusion: this shared context will be implicitly included
in any groups (or examples) that have :db => true metadata.
:apply_to_host_groups: the metadata will be inherited by the metadata
hash of all host groups and examples.


:trigger_inclusion is the legacy behavior from before RSpec 3.5 but should
be considered deprecated. Instead, you can explicitly include a group with
include_context:

RSpec.describe "My model" do
  include_context "uses DB"
end


...or you can configure RSpec to include the context based on matching metadata
using an API that mirrors configured module inclusion:

RSpec.configure do |rspec|
  rspec.include_context "uses DB", :db => true
end


:apply_to_host_groups is a new feature of RSpec 3.5 and will be the only
supported behavior in RSpec 4.


  


  
  Overloads:
  
    
      
      
        
        
  
    Returns the configured behavior


  


  
Returns:

  
    
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        the configured behavior

      
    
  



      
    
      
      
        
        
  
    

  


  Parameters:

  
    
      
        value
      
      
        (:trigger_inclusion, :apply_to_host_groups)
      
      
      
        —
        sets the configured behavior

      
    
  




      
    
  



  
    
      


424
    
    
      # File 'lib/rspec/core/configuration.rb', line 424

define_reader :shared_context_metadata_behavior
    
  


    
      
      
      
  
  
    Don't print filter info i.e. "Run options: include :focus=>true"
(default false).
return [Boolean]


  


  


  
    
      


370
    
    
      # File 'lib/rspec/core/configuration.rb', line 370

add_setting :silence_filter_announcements
    
  


    
      
      
      
  
  
    Color to use to indicate success.  Defaults to :green but can be set
to one of the following: [:black, :white, :red, :green, :yellow,
:blue, :magenta, :cyan]


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


329
    
    
      # File 'lib/rspec/core/configuration.rb', line 329

add_setting :success_color
    
  


    
      
      
      
  
  
    Use threadsafe options where available.
Currently this will place a mutex around memoized values such as let blocks.
return [Boolean]


  


  


  
    
      


445
    
    
      # File 'lib/rspec/core/configuration.rb', line 445

add_setting :threadsafe
    
  


    
  


  
    Instance Method Details

    
      
  
  
    Adds a formatter to the set RSpec will use for this run.


  


  Parameters:

  
    
      
        formatter
      
      
        (Class, String, Object)
      
      
      
        —
        formatter to use. Can be any of the
string values supported from the CLI (p/progress,
d/doc/documentation, h/html, or j/json), any
class that implements the formatter protocol and has registered
itself with RSpec as a formatter, or a formatter instance.

      
    
  
    
      
        output
      
      
        (String, IO)
      
      
        (defaults to: output_wrapper)
      
      
        —
        where the formatter will write its output.
Can be an IO object or a string path to a file. If not provided,
the configured output_stream ($stdout, by default) will be used.

      
    
  



  See Also:
  
    
      Formatters::Protocol
    
  


  
    
      


964
965
966
    
    
      # File 'lib/rspec/core/configuration.rb', line 964

def add_formatter(formatter, output=output_wrapper)
  formatter_loader.add(formatter, output)
end
    
  


    
      
  
  
    Adds a custom setting to the RSpec.configuration object.

RSpec.configuration.add_setting :foo


Used internally and by extension frameworks like rspec-rails, so they
can add config settings that are domain specific. For example:

RSpec.configure do |c|
  c.add_setting :use_transactional_fixtures,
    :default => true,
    :alias_with => :use_transactional_examples
end


add_setting creates three methods on the configuration object, a
setter, a getter, and a predicate:

RSpec.configuration.foo=(value)
RSpec.configuration.foo
RSpec.configuration.foo? # Returns true if foo returns anything but nil or false.



  


  Parameters:

  
    
      
        opts
      
      
        (Hash)
      
      
        (defaults to: {})
      
      
        —
        a customizable set of options

      
    
  


  
    
    
    
    
    Options Hash (opts):
    
      
        
          :default
          (Symbol)
          
            
          
          
            — Set a default value for the generated getter and predicate methods:

add_setting(:foo, :default => "default value")


          
        
      
        
          :alias_with
          (Symbol)
          
            
          
          
            — Use :alias_with to alias the setter, getter, and predicate to
another name, or names:

add_setting(:foo, :alias_with => :bar)
add_setting(:foo, :alias_with => [:bar, :baz])


          
        
      
    
  



  
    
      


627
628
629
630
631
632
633
    
    
      # File 'lib/rspec/core/configuration.rb', line 627

def add_setting(name, opts={})
  default = opts.delete(:default)
  (class << self; self; end).class_exec do
    add_setting(name, opts)
  end
  __send__("#{name}=", default) if default
end
    
  


    
      
  
  
    Defines a after hook. See Hooks#after for full docs.

This method differs from Hooks#after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
    
    
      # File 'lib/rspec/core/configuration.rb', line 1967

def after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks.unshift Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    
  
    Note:
    The defined aliased will also be added to the top level
(e.g. main and from within modules) if
expose_dsl_globally is set to true.

  

Creates a method that defines an example group with the provided
metadata. Can be used to define example group/metadata shortcuts.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_group_to :describe_model, :type => :model
end

shared_context_for "model tests", :type => :model do
  # define common model test helper methods, `let` declarations, etc
end

# This lets you do this:

RSpec.describe_model User do
end

# ... which is the equivalent of

RSpec.describe User, :type => :model do
end
    
  


  See Also:
  
    
      #alias_example_to
    
      #expose_dsl_globally=
    
  


  
    
      


1177
1178
1179
1180
    
    
      # File 'lib/rspec/core/configuration.rb', line 1177

def alias_example_group_to(new_name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_group_method(new_name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:
    The specific example alias below (pending) is already
defined for you.

  

  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define methods like focus and xit, but we also add
docs for those methods.

  

Creates a method that delegates to example including the submitted
args. Used internally to add variants of example like pending:


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_example_to :pending, :pending => true
end

# This lets you do this:

RSpec.describe Thing do
  pending "does something" do
    thing = Thing.new
  end
end

# ... which is the equivalent of

RSpec.describe Thing do
  it "does something", :pending => true do
    thing = Thing.new
  end
end
    
  
Parameters:

  
    
      
        name
      
      
        (String)
      
      
      
        —
        example name alias

      
    
  
    
      
        args
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata for the generated example

      
    
  




  
    
      


1145
1146
1147
1148
    
    
      # File 'lib/rspec/core/configuration.rb', line 1145

def alias_example_to(name, *args)
  extra_options = Metadata.build_hash_from(args)
  RSpec::Core::ExampleGroup.define_example_method(name, extra_options)
end
    
  


    
      
  
  
    
  
    Note:
    Use with caution. This extends the language used in your
specs, but does not add any additional documentation. We use this
in RSpec to define it_should_behave_like (for backward
compatibility), but we also add docs for that method.

  

Define an alias for it_should_behave_like that allows different
language (like "it_has_behavior" or "it_behaves_like") to be
employed when including shared examples.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.alias_it_behaves_like_to(:it_has_behavior, 'has behavior:')
end

# allows the user to include a shared example group like:

RSpec.describe Entity do
  it_has_behavior 'sortability' do
    let(:sortable) { Entity.new }
  end
end

# which is reported in the output as:
# Entity
#   has behavior: sortability
#     ...sortability examples here
    
  



  
    
      


1208
1209
1210
    
    
      # File 'lib/rspec/core/configuration.rb', line 1208

def alias_it_behaves_like_to(new_name, report_label='')
  RSpec::Core::ExampleGroup.define_nested_shared_group_method(new_name, report_label)
end
    
  


    
      
  
  
    Adds block to the end of the list of after blocks in the same
scope (:example, :context, or :suite), in contrast to #after,
which adds the hook to the start of the list.

See Hooks#after for full after hook docs.

This method differs from Hooks#append_after in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once after
the last example of the entire suite is executed.


  


  

  See Also:
  
    
      #append_after
    
      #before
    
      #prepend_before
    
  


  
    
      


1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
    
    
      # File 'lib/rspec/core/configuration.rb', line 1996

def append_after(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @after_suite_hooks << Hooks::AfterHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.append_after(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Registers block as an around hook.

See Hooks#around for full around hook docs.


  


  


  
    
      


2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
    
    
      # File 'lib/rspec/core/configuration.rb', line 2014

def around(scope=nil, *meta, &block)
  # defeat Ruby 2.5 lazy proc allocation to ensure
  # the methods below are passed the same proc instances
  # so `Hook` equality is preserved. For more info, see:
  # https://bugs.ruby-lang.org/issues/14045#note-5
  block.__id__

  add_hook_to_existing_matching_groups(meta, scope) { |g| g.around(scope, *meta, &block) }
  super(scope, *meta, &block)
end
    
  


    
      
  
  
    Regexps used to exclude lines from backtraces.

Excludes lines from ruby (and jruby) source, installed gems, anything
in any "bin" directory, and any of the RSpec libs (outside gem
installs) by default.

You can modify the list via the getter, or replace it with the setter.

To override this behaviour and display a full backtrace, use
--backtrace on the command line, in a .rspec file, or in the
rspec_options attribute of RSpec's rake task.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


665
666
667
    
    
      # File 'lib/rspec/core/configuration.rb', line 665

def backtrace_exclusion_patterns
  @backtrace_formatter.exclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to exclude lines in backtrace.


  


  Parameters:

  
    
      
        patterns
      
      
        (Array<Regexp>)
      
      
      
        —
        set backtrace_formatter exlusion_patterns

      
    
  




  
    
      


671
672
673
    
    
      # File 'lib/rspec/core/configuration.rb', line 671

def backtrace_exclusion_patterns=(patterns)
  @backtrace_formatter.exclusion_patterns = patterns
end
    
  


    
      
  
  
    Regexps used to include lines in backtraces.

Defaults to [Regexp.new Dir.getwd].

Lines that match an exclusion and an inclusion pattern
will be included.

You can modify the list via the getter, or replace it with the setter.


  


  
Returns:

  
    
      
      
        (Array<Regexp>)
      
      
      
    
  



  
    
      


684
685
686
    
    
      # File 'lib/rspec/core/configuration.rb', line 684

def backtrace_inclusion_patterns
  @backtrace_formatter.inclusion_patterns
end
    
  


    
      
  
  
    Set regular expressions used to include lines in backtrace.


  


  


  
    
      


690
691
692
    
    
      # File 'lib/rspec/core/configuration.rb', line 690

def backtrace_inclusion_patterns=(patterns)
  @backtrace_formatter.inclusion_patterns = patterns
end
    
  


    
      
  
  
    Defines a before hook. See Hooks#before for full docs.

This method differs from Hooks#before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #prepend_before
    
      #after
    
      #append_after
    
  


  
    
      


1914
1915
1916
1917
1918
1919
1920
1921
1922
1923
1924
1925
1926
1927
    
    
      # File 'lib/rspec/core/configuration.rb', line 1914

def before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks << Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Check if color is enabled for a particular output.


  


  Parameters:

  
    
      
        output
      
      
        (IO)
      
      
        (defaults to: output_stream)
      
      
        —
        an output stream to use, defaults to the current
output_stream

      
    
  


Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


911
912
913
914
915
916
917
918
    
    
      # File 'lib/rspec/core/configuration.rb', line 911

def color_enabled?(output=output_stream)
  case color_mode
  when :on then true
  when :off then false
  else # automatic
    output_to_tty?(output) || (color && tty?)
  end
end
    
  


    
      
  
  
    The formatter that will be used if no formatter has been set.
Defaults to 'progress'.


  


  


  
    
      


971
972
973
    
    
      # File 'lib/rspec/core/configuration.rb', line 971

def default_formatter
  formatter_loader.default_formatter
end
    
  


    
      
  
  
    Sets a fallback formatter to use if none other has been set.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.default_formatter = 'doc'
end
    
  



  
    
      


982
983
984
    
    
      # File 'lib/rspec/core/configuration.rb', line 982

def default_formatter=(value)
  formatter_loader.default_formatter = value
end
    
  


    
      
  
  
    Defines a callback that can assign derived metadata values.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  # Tag all groups and examples in the spec/unit directory with
  # :type => :unit
  config.define_derived_metadata(:file_path => %r{/spec/unit/}) do |metadata|
    metadata[:type] = :unit
  end
end
    
  
Parameters:

  
    
      
        filters
      
      
        (Array<Symbol>, Hash)
      
      
      
        —
        metadata filters that determine
which example or group metadata hashes the callback will be triggered
for. If none are given, the callback will be run against the metadata
hashes of all groups and examples.

      
    
  


Yield Parameters:

  
    
      
        metadata
      
      
        (Hash)
      
      
      
        —
        original metadata hash from an example or
group. Mutate this in your block as needed.

      
    
  



  
    
      


1839
1840
1841
1842
    
    
      # File 'lib/rspec/core/configuration.rb', line 1839

def define_derived_metadata(*filters, &block)
  meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)
  @derived_metadata_blocks.append(block, meta)
end
    
  


    
      
  
  
    Determines where deprecation warnings are printed.
Defaults to $stderr.


  


  
Returns:

  
    
      
      
        (IO, String)
      
      
      
        —
        IO or filename to write to

      
    
  



  
    
      


162
    
    
      # File 'lib/rspec/core/configuration.rb', line 162

define_reader :deprecation_stream
    
  


    
      
  
  
    Determines where deprecation warnings are printed.


  


  Parameters:

  
    
      
        value
      
      
        (IO, String)
      
      
      
        —
        IO to write to or filename to write to

      
    
  




  
    
      


166
167
168
169
170
171
172
173
174
175
176
    
    
      # File 'lib/rspec/core/configuration.rb', line 166

def deprecation_stream=(value)
  if @reporter && !value.equal?(@deprecation_stream)
    warn "RSpec's reporter has already been initialized with " \
      "#{deprecation_stream.inspect} as the deprecation stream, so your change to "\
      "`deprecation_stream` will be ignored. You should configure it earlier for " \
      "it to take effect, or use the `--deprecation-out` CLI option. " \
      "(Called from #{CallerFilter.first_non_rspec_line})"
  else
    @deprecation_stream = value
  end
end
    
  


    
      
  
  
    
  
    Note:
    It configures rspec-mocks and rspec-expectations only
if the user is using those (either explicitly or implicitly
by not setting mock_with or expect_with to anything else).

  

  
    Note:
    If the user uses this options with mock_with :mocha
(or similiar) they will still have monkey patching active
in their test environment from mocha.

  

Enables zero monkey patching mode for RSpec. It removes monkey
patching of the top-level DSL methods (describe,
shared_examples_for, etc) onto main and Module, instead
requiring you to prefix these methods with RSpec.. It enables
expect-only syntax for rspec-mocks and rspec-expectations. It
simply disables monkey patching on whatever pieces of RSpec
the user is using.


  


  
  
    Examples:
    
      
      
# It disables all monkey patching.
RSpec.configure do |config|
  config.disable_monkey_patching!
end

# Is an equivalent to
RSpec.configure do |config|
  config.expose_dsl_globally = false

  config.mock_with :rspec do |mocks|
    mocks.syntax = :expect
    mocks.patch_marshal_to_support_partial_doubles = false
  end

  config.expect_with :rspec do |expectations|
    expectations.syntax = :expect
  end
end
    
  



  
    
      


1812
1813
1814
1815
1816
1817
    
    
      # File 'lib/rspec/core/configuration.rb', line 1812

def disable_monkey_patching!
  self.expose_dsl_globally = false
  self.disable_monkey_patching = true
  conditionally_disable_mocks_monkey_patching
  conditionally_disable_expectations_monkey_patching
end
    
  


    
      
  
  
    Returns the exclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1337
1338
1339
    
    
      # File 'lib/rspec/core/configuration.rb', line 1337

def exclusion_filter
  filter_manager.exclusions
end
    
  


    
      
  
  
    Clears and reassigns the exclusion_filter. Set to nil if you don't
want any exclusion filter at all.

Warning

This overrides any exclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1330
1331
1332
1333
    
    
      # File 'lib/rspec/core/configuration.rb', line 1330

def exclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.exclude_only meta
end
    
  


    
      
  
  
    Sets the expectation framework module(s) to be included in each example
group.

frameworks can be :rspec, :test_unit, :minitest, a custom
module, or any combination thereof:

config.expect_with :rspec
config.expect_with :test_unit
config.expect_with :minitest
config.expect_with :rspec, :minitest
config.expect_with OtherExpectationFramework


RSpec will translate :rspec, :minitest, and :test_unit into the
appropriate modules.

Configuration

If the module responds to configuration, expect_with will
yield the configuration object if given a block:

config.expect_with OtherExpectationFramework do |custom_config|
  custom_config.custom_setting = true
end



  


  


  
    
      


826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
    
    
      # File 'lib/rspec/core/configuration.rb', line 826

def expect_with(*frameworks)
  modules = frameworks.map do |framework|
    case framework
    when Module
      framework
    when :rspec
      require 'rspec/expectations'

      # Tag this exception class so our exception formatting logic knows
      # that it satisfies the `MultipleExceptionError` interface.
      ::RSpec::Expectations::MultipleExpectationsNotMetError.__send__(
        :include, MultipleExceptionError::InterfaceTag
      )

      ::RSpec::Matchers
    when :test_unit
      require 'rspec/core/test_unit_assertions_adapter'
      ::RSpec::Core::TestUnitAssertionsAdapter
    when :minitest
      require 'rspec/core/minitest_assertions_adapter'
      ::RSpec::Core::MinitestAssertionsAdapter
    else
      raise ArgumentError, "#{framework.inspect} is not supported"
    end
  end

  if (modules - @expectation_frameworks).any?
    assert_no_example_groups_defined(:expect_with)
  end

  if block_given?
    raise "expect_with only accepts a block with a single argument. " \
          "Call expect_with #{modules.length} times, " \
          "once with each argument, instead." if modules.length > 1
    raise "#{modules.first} must respond to `configuration` so that " \
          "expect_with can yield it." unless modules.first.respond_to?(:configuration)
    yield modules.first.configuration
  end

  @expectation_frameworks.push(*modules)
end
    
  


    
      
  
  
    Delegates to expect_with(framework).


  


  


  
    
      


799
800
801
    
    
      # File 'lib/rspec/core/configuration.rb', line 799

def expectation_framework=(framework)
  expect_with(framework)
end
    
  


    
      
  
  
    Returns the configured expectation framework adapter module(s)


  


  


  
    
      


787
788
789
790
791
792
793
794
795
796
    
    
      # File 'lib/rspec/core/configuration.rb', line 787

def expectation_frameworks
  if @expectation_frameworks.empty?
    begin
      expect_with :rspec
    rescue LoadError
      expect_with Module.new
    end
  end
  @expectation_frameworks
end
    
  


    
      
  
  
    Exposes the current running example via the named
helper method. RSpec 2.x exposed this via example,
but in RSpec 3.0, the example is instead exposed via
an arg yielded to it, before, let, etc. However,
some extension gems (such as Capybara) depend on the
RSpec 2.x's example method, so this config option
can be used to maintain compatibility.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.expose_current_running_example_as :example
end

RSpec.describe MyClass do
  before do
    # `example` can be used here because of the above config.
    do_something if example.metadata[:type] == "foo"
  end
end
    
  
Parameters:

  
    
      
        method_name
      
      
        (Symbol)
      
      
      
        —
        the name of the helper method

      
    
  




  
    
      


1750
1751
1752
1753
1754
1755
1756
1757
    
    
      # File 'lib/rspec/core/configuration.rb', line 1750

def expose_current_running_example_as(method_name)
  ExposeCurrentExample.module_exec do
    extend RSpec::SharedContext
    let(method_name) { |ex| ex }
  end

  include ExposeCurrentExample
end
    
  


    
      
  
  
    Use this to expose the core RSpec DSL via Module and the main
object. It will be set automatically but you can override it to
remove the DSL.
Default: true


  


  


  
    
      


149
150
151
152
153
154
155
156
157
    
    
      # File 'lib/rspec/core/configuration.rb', line 149

def expose_dsl_globally=(value)
  if value
    Core::DSL.expose_globally!
    Core::SharedExampleGroup::TopLevelDSL.expose_globally!
  else
    Core::DSL.remove_globally!
    Core::SharedExampleGroup::TopLevelDSL.remove_globally!
  end
end
    
  


    
      
  
  
    Indicates if the DSL has been exposed off of modules and main.
Default: true


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


141
142
143
    
    
      # File 'lib/rspec/core/configuration.rb', line 141

def expose_dsl_globally?
  Core::DSL.exposed_globally?
end
    
  


    
      
  
  
    Tells RSpec to extend example groups with mod. Methods defined in
mod are exposed to example groups (not examples). Use filters to
constrain the groups to extend.

Similar to include, but behavior is added to example groups, which
are classes, rather than the examples, which are instances of those
classes.


  


  
  
    Examples:
    
      
      
module UiHelpers
  def run_in_browser
    # ...
  end
end

RSpec.configure do |config|
  config.extend(UiHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  run_in_browser

  it "does stuff in the client" do
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #prepend
    
  


  
    
      


1460
1461
1462
1463
1464
    
    
      # File 'lib/rspec/core/configuration.rb', line 1460

def extend(mod, *filters)
  define_mixed_in_module(mod, filters, @extend_modules, :extend) do |group|
    safe_extend(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:
    The patterns this adds will match the named gems in their common
locations (e.g. system gems, vendored with bundler, installed as a
:git dependency with bundler, etc) but is not guaranteed to work for
all possible gem locations. For example, if you have the gem source
in a directory with a completely unrelated name, and use bundler's
:path option, this will not filter it.

  

Adds #backtrace_exclusion_patterns that will filter lines from
the named gems from backtraces.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.filter_gems_from_backtrace "rack", "rake"
end
    
  
Parameters:

  
    
      
        gem_names
      
      
        (Array<String>)
      
      
      
        —
        Names of the gems to filter

      
    
  




  
    
      


710
711
712
713
714
    
    
      # File 'lib/rspec/core/configuration.rb', line 710

def filter_gems_from_backtrace(*gem_names)
  gem_names.each do |name|
    @backtrace_formatter.filter_gem(name)
  end
end
    
  


    
      
  
  
    Adds key/value pairs to the exclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will exclude that group.
config.filter_run_excluding :foo => 'bar'
config.filter_run_excluding :foo => /^ba/
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_excluding :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_excluding :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_excluding :foo # same as filter_run_excluding :foo => true
    
  



  
    
      


1317
1318
1319
1320
1321
    
    
      # File 'lib/rspec/core/configuration.rb', line 1317

def filter_run_excluding(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.exclude_with_low_priority meta
  static_config_filter_manager.exclude_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Adds key/value pairs to the inclusion_filter. If args
includes any symbols that are not part of the hash, each symbol
is treated as a key in the hash with the value true.

Note

Filters set using this method can be overridden from the command line
or config files (e.g. .rspec).


  


  
  
    Examples:
    
      
      # Given this declaration.
describe "something", :foo => 'bar' do
  # ...
end

# Any of the following will include that group.
config.filter_run_including :foo => 'bar'
config.filter_run_including :foo => /^ba/
config.filter_run_including :foo => lambda {|v| v == 'bar'}
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

# Given a proc with an arity of 1, the lambda is passed the value
# related to the key, e.g.
config.filter_run_including :foo => lambda {|v| v == 'bar'}

# Given a proc with an arity of 2, the lambda is passed the value
# related to the key, and the metadata itself e.g.
config.filter_run_including :foo => lambda {|v,m| m[:foo] == 'bar'}

filter_run_including :foo # same as filter_run_including :foo => true
    
  



  
    
      


1243
1244
1245
1246
1247
    
    
      # File 'lib/rspec/core/configuration.rb', line 1243

def filter_run_including(*args)
  meta = Metadata.build_hash_from(args, :warn_about_example_group_filtering)
  filter_manager.include_with_low_priority meta
  static_config_filter_manager.include_with_low_priority Metadata.deep_hash_dup(meta)
end
    
  


    
      
  
  
    Applies the provided filter only if any of examples match, in constrast
to #filter_run, which always applies even if no examples match, in
which case no examples will be run. This allows you to leave configured
filters in place that are intended only for temporary use. The most common
example is focus filtering: config.filter_run_when_matching :focus.
With that configured, you can temporarily focus an example or group
by tagging it with :focus metadata, or prefixing it with an f
(as in fdescribe, fcontext and fit) since those are aliases for
describe/context/it with :focus metadata.


  


  


  
    
      


1259
1260
1261
1262
1263
    
    
      # File 'lib/rspec/core/configuration.rb', line 1259

def filter_run_when_matching(*args)
  when_first_matching_example_defined(*args) do
    filter_run(*args)
  end
end
    
  


    
      
  
  
    Formats the docstring output using the block provided.


  


  
  
    Examples:
    
      
      # This will strip the descriptions of both examples and example
# groups.
RSpec.configure do |config|
  config.format_docstrings { |s| s.strip }
end
    
  



  
    
      


1601
1602
1603
    
    
      # File 'lib/rspec/core/configuration.rb', line 1601

def format_docstrings(&block)
  @format_docstrings_block = block_given? ? block : DEFAULT_FORMATTER
end
    
  


    
      
  
  
    Returns a duplicate of the formatters currently loaded in
the FormatterLoader for introspection.

Note as this is a duplicate, any mutations will be disregarded.


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        the formatters currently loaded

      
    
  



  
    
      


992
993
994
    
    
      # File 'lib/rspec/core/configuration.rb', line 992

def formatters
  formatter_loader.formatters.dup
end
    
  


    
      
  
  
    Toggle full backtrace.


  


  


  
    
      


876
877
878
    
    
      # File 'lib/rspec/core/configuration.rb', line 876

def full_backtrace=(true_or_false)
  @backtrace_formatter.full_backtrace = true_or_false
end
    
  


    
      
  
  
    Check if full backtrace is enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        is full backtrace enabled

      
    
  



  
    
      


870
871
872
    
    
      # File 'lib/rspec/core/configuration.rb', line 870

def full_backtrace?
  @backtrace_formatter.full_backtrace?
end
    
  


    
      
  
  
    Returns full description filter


  


  
Returns:

  
    
      
      
        (Array)
      
      
      
        —
        full description filter

      
    
  



  
    
      


945
946
947
    
    
      # File 'lib/rspec/core/configuration.rb', line 945

def full_description
  filter.fetch :full_description, nil
end
    
  


    
      
  
  
    Run examples matching on description in all files to run.


  


  Parameters:

  
    
      
        description
      
      
        (String, Regexp)
      
      
      
        —
        the pattern to filter on

      
    
  




  
    
      


940
941
942
    
    
      # File 'lib/rspec/core/configuration.rb', line 940

def full_description=(description)
  filter_run :full_description => Regexp.union(*Array(description).map { |d| Regexp.new(d) })
end
    
  


    
      
  
  
    
  
    Note:
    Filtered module inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include mod in example groups. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups or examples in which to include the module.


  


  
  
    Examples:
    
      
      
module AuthenticationHelpers
  def login_as(user)
    # ...
  end
end

module UserHelpers
  def users(username)
    # ...
  end
end

RSpec.configure do |config|
  config.include(UserHelpers) # included in all groups
  config.include(AuthenticationHelpers, :type => :request)
end

describe "edit profile", :type => :request do
  it "can be viewed by owning user" do
    login_as users(:jdoe)
    get "/profiles/jdoe"
    assert_select ".username", :text => 'jdoe'
  end
end
    
  


  See Also:
  
    
      #include_context
    
      #extend
    
      #prepend
    
  


  
    
      


1382
1383
1384
1385
1386
    
    
      # File 'lib/rspec/core/configuration.rb', line 1382

def include(mod, *filters)
  define_mixed_in_module(mod, filters, @include_modules, :include) do |group|
    safe_include(mod, group)
  end
end
    
  


    
      
  
  
    
  
    Note:
    Filtered context inclusions can also be applied to
individual examples that have matching metadata. Just like
Ruby's object model is that every object has a singleton class
which has only a single instance, RSpec's model is that every
example has a singleton example group containing just the one
example.

  

Tells RSpec to include the named shared example group in example groups.
Use filters to constrain the groups or examples in which to include
the example group.


  


  
  
    Examples:
    
      
      
RSpec.shared_context "example users" do
  let(:admin_user) { create_user(:admin) }
  let(:guest_user) { create_user(:guest) }
end

RSpec.configure do |config|
  config.include_context "example users", :type => :request
end

RSpec.describe "The admin page", :type => :request do
  it "can be viewed by admins" do
    login_with admin_user
    get "/admin"
    expect(response).to be_ok
  end

  it "cannot be viewed by guests" do
    login_with guest_user
    get "/admin"
    expect(response).to be_forbidden
  end
end
    
  


  See Also:
  
    
      #include
    
  


  
    
      


1425
1426
1427
1428
    
    
      # File 'lib/rspec/core/configuration.rb', line 1425

def include_context(shared_group_name, *filters)
  shared_module = world.shared_example_group_registry.find([:main], shared_group_name)
  include shared_module, *filters
end
    
  


    
      
  
  
    Returns the inclusion_filter. If none has been set, returns an empty
hash.


  


  


  
    
      


1281
1282
1283
    
    
      # File 'lib/rspec/core/configuration.rb', line 1281

def inclusion_filter
  filter_manager.inclusions
end
    
  


    
      
  
  
    Clears and reassigns the inclusion_filter. Set to nil if you don't
want any inclusion filter at all.

Warning

This overrides any inclusion filters/tags set on the command line or in
configuration files.


  


  


  
    
      


1272
1273
1274
1275
    
    
      # File 'lib/rspec/core/configuration.rb', line 1272

def inclusion_filter=(filter)
  meta = Metadata.build_hash_from([filter], :warn_about_example_group_filtering)
  filter_manager.include_only meta
end
    
  


    
      
  
  
    Returns the configured mock framework adapter module.


  


  
Returns:

  
    
      
      
        (Symbol)
      
      
      
    
  



  
    
      


637
638
639
640
641
642
643
644
645
646
    
    
      # File 'lib/rspec/core/configuration.rb', line 637

def mock_framework
  if @mock_framework.nil?
    begin
      mock_with :rspec
    rescue LoadError
      mock_with :nothing
    end
  end
  @mock_framework
end
    
  


    
      
  
  
    Delegates to mock_framework=(framework).


  


  


  
    
      


649
650
651
    
    
      # File 'lib/rspec/core/configuration.rb', line 649

def mock_framework=(framework)
  mock_with framework
end
    
  


    
      
  
  
    Sets the mock framework adapter module.

framework can be a Symbol or a Module.

Given any of :rspec, :mocha, :flexmock, or :rr, configures the
named framework.

Given :nothing, configures no framework. Use this if you don't use
any mocking framework to save a little bit of overhead.

Given a Module, includes that module in every example group. The module
should adhere to RSpec's mock framework adapter API:

setup_mocks_for_rspec
  - called before each example

verify_mocks_for_rspec
  - called after each example if the example hasn't yet failed.
    Framework should raise an exception when expectations fail

teardown_mocks_for_rspec
  - called after verify_mocks_for_rspec (even if there are errors)


If the module responds to configuration and mock_with receives a
block, it will yield the configuration object to the block e.g.

config.mock_with OtherMockFrameworkAdapter do |mod_config|
  mod_config.custom_setting = true
end



  


  


  
    
      


754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
    
    
      # File 'lib/rspec/core/configuration.rb', line 754

def mock_with(framework)
  framework_module =
    if framework.is_a?(Module)
      framework
    else
      const_name = MOCKING_ADAPTERS.fetch(framework) do
        raise ArgumentError,
              "Unknown mocking framework: #{framework.inspect}. " \
              "Pass a module or one of #{MOCKING_ADAPTERS.keys.inspect}"
      end

      RSpec::Support.require_rspec_core "mocking_adapters/#{const_name.to_s.downcase}"
      RSpec::Core::MockingAdapters.const_get(const_name)
    end

  new_name, old_name = [framework_module, @mock_framework].map do |mod|
    mod.respond_to?(:framework_name) ? mod.framework_name : :unnamed
  end

  unless new_name == old_name
    assert_no_example_groups_defined(:mock_framework)
  end

  if block_given?
    raise "#{framework_module} must respond to `configuration` so that " \
          "mock_with can yield it." unless framework_module.respond_to?(:configuration)
    yield framework_module.configuration
  end

  @mock_framework = framework_module
end
    
  


    
      
  
  
    Invokes block before defining an example group


  


  


  
    
      


2046
2047
2048
    
    
      # File 'lib/rspec/core/configuration.rb', line 2046

def on_example_group_definition(&block)
  on_example_group_definition_callbacks << block
end
    
  


    
      
  
  
    
  This method is part of a private API.
  You should avoid using this method if possible, as it may be removed or be changed in the future.

Returns an array of blocks to call before defining an example group


  


  


  
    
      


2052
2053
2054
    
    
      # File 'lib/rspec/core/configuration.rb', line 2052

def on_example_group_definition_callbacks
  @on_example_group_definition_callbacks ||= []
end
    
  


    
      
  
  
    Sets the default global ordering strategy. By default this can be one
of :defined, :random, but is customizable through the
register_ordering API. If order is set to 'rand:<seed>',
the seed will also be set.


  


  

  See Also:
  
    
      #register_ordering
    
  


  
    
      


1646
    
    
      # File 'lib/rspec/core/configuration.rb', line 1646

delegate_to_ordering_manager :order=
    
  


    
      
  
  
    Tells RSpec to prepend example groups with mod. Methods defined in
mod are exposed to examples (not example groups). Use filters to
constrain the groups in which to prepend the module.

Similar to include, but module is included before the example group's class
in the ancestor chain.


  


  
  
    Examples:
    
      
      
module OverrideMod
  def override_me
    "overridden"
  end
end

RSpec.configure do |config|
  config.prepend(OverrideMod, :method => :prepend)
end

describe "overriding example's class", :method => :prepend do
  it "finds the user" do
    self.class.class_eval do
      def override_me
      end
    end
    override_me # => "overridden"
    # ...
  end
end
    
  


  See Also:
  
    
      #include
    
      #extend
    
  


  
    
      


1499
1500
1501
1502
1503
    
    
      # File 'lib/rspec/core/configuration.rb', line 1499

def prepend(mod, *filters)
  define_mixed_in_module(mod, filters, @prepend_modules, :prepend) do |group|
    safe_prepend(mod, group)
  end
end
    
  


    
      
  
  
    Adds block to the start of the list of before blocks in the same
scope (:example, :context, or :suite), in contrast to #before,
which adds the hook to the end of the list.

See Hooks#before for full before hook docs.

This method differs from Hooks#prepend_before in only one way: it supports
the :suite scope. Hooks with the :suite scope will be run once before
the first example of the entire suite is executed.


  


  

  See Also:
  
    
      #before
    
      #after
    
      #append_after
    
  


  
    
      


1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
    
    
      # File 'lib/rspec/core/configuration.rb', line 1943

def prepend_before(scope=nil, *meta, &block)
  handle_suite_hook(scope, meta) do
    @before_suite_hooks.unshift Hooks::BeforeHook.new(block, {})
  end || begin
    # defeat Ruby 2.5 lazy proc allocation to ensure
    # the methods below are passed the same proc instances
    # so `Hook` equality is preserved. For more info, see:
    # https://bugs.ruby-lang.org/issues/14045#note-5
    block.__id__

    add_hook_to_existing_matching_groups(meta, scope) { |g| g.prepend_before(scope, *meta, &block) }
    super(scope, *meta, &block)
  end
end
    
  


    
      
  
  
    Turns deprecation warnings into errors, in order to surface
the full backtrace of the call site. This can be useful when
you need more context to address a deprecation than the
single-line call site normally provided.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_errors_for_deprecations!
end
    
  



  
    
      


1772
1773
1774
    
    
      # File 'lib/rspec/core/configuration.rb', line 1772

def raise_errors_for_deprecations!
  self.deprecation_stream = Formatters::DeprecationFormatter::RaiseErrorStream.new
end
    
  


    
      
  
  
    Turns warnings into errors. This can be useful when
you want RSpec to run in a 'strict' no warning situation.


  


  
  
    Examples:
    
      
      
RSpec.configure do |rspec|
  rspec.raise_on_warning = true
end
    
  



  
    
      


1720
1721
1722
1723
1724
1725
1726
    
    
      # File 'lib/rspec/core/configuration.rb', line 1720

def raise_on_warning=(value)
  if value
    RSpec::Support.warning_notifier = RAISE_ERROR_WARNING_NOTIFIER
  else
    RSpec::Support.warning_notifier = RSpec::Support::DEFAULT_WARNING_NOTIFIER
  end
end
    
  


    
      
  
  
    
  
    Note:
    Pass the symbol :global to set the ordering strategy that
will be used to order the top-level example groups and any example
groups that do not have declared :order metadata.

  

Registers a named ordering strategy that can later be
used to order an example group's subgroups by adding
:order => <name> metadata to the example group.


  


  
  
    Examples:
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :reverse do |list|
    list.reverse
  end
end

RSpec.describe 'MyClass', :order => :reverse do
  # ...
end
    
      
      RSpec.configure do |rspec|
  rspec.register_ordering :global do |examples|
    acceptance, other = examples.partition do |example|
      example.metadata[:type] == :acceptance
    end
    other + acceptance
  end
end

RSpec.describe 'MyClass', :type => :acceptance do
  # will run last
end

RSpec.describe 'MyClass' do
  # will run first
end
    
  
Parameters:

  
    
      
        name
      
      
        (Symbol)
      
      
      
        —
        The name of the ordering.

      
    
  


Yields:

  
    
      
      
        
      
      
      
        
        Block that will order the given examples or example groups

      
    
  

Yield Parameters:

  
    
      
        list
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The examples or groups to order

      
    
  

Yield Returns:

  
    
      
      
        (Array<RSpec::Core::Example>, Array<RSpec::Core::ExampleGroup>)
      
      
      
        —
        The re-ordered examples or groups

      
    
  



  
    
      


1694
    
    
      # File 'lib/rspec/core/configuration.rb', line 1694

delegate_to_ordering_manager :register_ordering
    
  


    
      
  
  
    Returns the currently configured reporter


  


  
Returns:

  
    
      
      
        (RSpec::Core::Reporter)
      
      
      
        —
        the currently configured reporter

      
    
  



  
    
      


1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
    
    
      # File 'lib/rspec/core/configuration.rb', line 1024

def reporter
  # @reporter_buffer should only ever be set in this method to cover
  # initialization of @reporter.
  @reporter_buffer || @reporter ||=
    begin
      @reporter_buffer = DeprecationReporterBuffer.new
      formatter_loader.prepare_default output_wrapper, deprecation_stream
      @reporter_buffer.play_onto(formatter_loader.reporter)
      @reporter_buffer = nil
      formatter_loader.reporter
    end
end
    
  


    
      
  
  
    Seed for random ordering (default: generated randomly each run).

When you run specs with --order random, RSpec generates a random seed
for the randomization and prints it to the output_stream (assuming
you're using RSpec's built-in formatters). If you discover an ordering
dependency (i.e. examples fail intermittently depending on order), set
this (on Configuration or on the command line with --seed) to run
using the same seed while you debug the issue.

We recommend, actually, that you use the command line approach so you
don't accidentally leave the seed encoded.


  


  


  
    
      


1636
    
    
      # File 'lib/rspec/core/configuration.rb', line 1636

delegate_to_ordering_manager :seed
    
  


    
      
  
  
    Sets the seed value and sets the default global ordering to random.


  


  


  
    
      


1622
    
    
      # File 'lib/rspec/core/configuration.rb', line 1622

delegate_to_ordering_manager :seed=
    
  


    
      
  
  
    Deprecated. This config option was added in RSpec 2 to pave the way
for this being the default behavior in RSpec 3. Now this option is
a no-op.



  


  


  
    
      


375
376
377
378
379
380
381
382
    
    
      # File 'lib/rspec/core/configuration.rb', line 375

def treat_symbols_as_metadata_keys_with_true_values=(_value)
  RSpec.deprecate(
    "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values=",
    :message => "RSpec::Core::Configuration#treat_symbols_as_metadata_keys_with_true_values= " \
                "is deprecated, it is now set to true as default and " \
                "setting it to false has no effect."
  )
end
    
  


    
      
  
  
    Set Ruby warnings on or off.


  


  


  
    
      


1700
1701
1702
    
    
      # File 'lib/rspec/core/configuration.rb', line 1700

def warnings=(value)
  $VERBOSE = !!value
end
    
  


    
      
  
  
    Returns Whether or not ruby warnings are enabled.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
        —
        Whether or not ruby warnings are enabled.

      
    
  



  
    
      


1705
1706
1707
    
    
      # File 'lib/rspec/core/configuration.rb', line 1705

def warnings?
  $VERBOSE
end
    
  


    
      
  
  
    Defines a callback that runs after the first example with matching
metadata is defined. If no examples are defined with matching metadata,
it will not get called at all.

This can be used to ensure some setup is performed (such as bootstrapping
a DB or loading a specific file that adds significantly to the boot time)
if needed (as indicated by the presence of an example with matching metadata)
but avoided otherwise.


  


  
  
    Examples:
    
      
      RSpec.configure do |config|
  config.when_first_matching_example_defined(:db) do
    # Load a support file that does some heavyweight setup,
    # including bootstrapping the DB, but only if we have loaded
    # any examples tagged with `:db`.
    require 'support/db'
  end
end
    
  



  
    
      


1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
    
    
      # File 'lib/rspec/core/configuration.rb', line 1862

def when_first_matching_example_defined(*filters)
  specified_meta = Metadata.build_hash_from(filters, :warn_about_example_group_filtering)

  callback = lambda do |example_or_group_meta|
    # Example groups do not have `:example_group` metadata
    # (instead they have `:parent_example_group` metadata).
    return unless example_or_group_meta.key?(:example_group)

    # Ensure the callback only fires once.
    @derived_metadata_blocks.delete(callback, specified_meta)

    yield
  end

  @derived_metadata_blocks.append(callback, specified_meta)
end
    
  


    
  

