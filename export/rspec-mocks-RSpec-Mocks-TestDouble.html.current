Module: RSpec::Mocks::TestDouble
  
  
  
Module: RSpec::Mocks::TestDouble
  
  
  


  

  
  
  
  
  

  
  
    Included in:Included in:
    DoubleDouble
  
    Included in:
    Double
  
  

  
  
    Defined in:Defined in:
    lib/rspec/mocks/test_double.rblib/rspec/mocks/test_double.rb
  
    Defined in:
    lib/rspec/mocks/test_double.rb
  
  

  

  
  
  
  
  

  
  
    Included in:
    Double
  
  

  
  
    Defined in:
    lib/rspec/mocks/test_double.rb
  
  


OverviewOverview
  
    Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and it is provided for cases where you want a pure test double without subclassing RSpec::Mocks::Double.Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and it is provided for cases where you want a pure test double without subclassing RSpec::Mocks::Double.


  
    Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and it is provided for cases where you want a pure test double without subclassing RSpec::Mocks::Double.


  

  
    Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and it is provided for cases where you want a pure test double without subclassing RSpec::Mocks::Double.


  


  


  








  
    
      Instance Method Summary
      
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.
This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.
This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.

  

  
  
  
  
  
  
  
  

  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to respond to all messages.Tells the object to respond to all messages.
Tells the object to respond to all messages.
Tells the object to respond to all messages.

  

  
  
  
  
  
  
  
  

  
    Tells the object to respond to all messages.

  


      
        
  
  
  
  
  
  
  
  

  
    Override for default freeze implementation to prevent freezing of test doubles.Override for default freeze implementation to prevent freezing of test doubles.
Override for default freeze implementation to prevent freezing of test doubles.
Override for default freeze implementation to prevent freezing of test doubles.

  

  
  
  
  
  
  
  
  

  
    Override for default freeze implementation to prevent freezing of test doubles.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a new test double with a name (that will be used in error messages only).Creates a new test double with a name (that will be used in error messages only).
Creates a new test double with a name (that will be used in error messages only).
Creates a new test double with a name (that will be used in error messages only).

  

  
  
  
  
  
  
  
  

  
    Creates a new test double with a name (that will be used in error messages only).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns true if this object has received as_null_object.Returns true if this object has received as_null_object.
Returns true if this object has received as_null_object.
Returns true if this object has received as_null_object.

  

  
  
  
  
  
  
  
  

  
    Returns true if this object has received as_null_object.

  


      
    
      
        
  
  
  
  
  
  
  
  

  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to respond to all messages.

  


      
        
  
  
  
  
  
  
  
  

  
    Override for default freeze implementation to prevent freezing of test doubles.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a new test double with a name (that will be used in error messages only).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns true if this object has received as_null_object.

  


      
    
  


  Dynamic Method HandlingDynamic Method Handling
  
    This class handles dynamic methods through the method_missingmethod_missing method
    
  
    This class handles dynamic methods through the method_missing method
    
  
  
    
  
  
    

  
    

  

  
    

  


  
Raises:Raises:

  
    
      
      
        (NoMethodErrorNoMethodError)(NoMethodError)
      
      
      
    
      
      
        (NoMethodError)
      
      
      
    
  

  
    
      
      
        (NoMethodError)
      
      
      
    
  



  
Raises:

  
    
      
      
        (NoMethodError)
      
      
      
    
  



  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74# File 'lib/rspec/mocks/test_double.rb', line 74

defdef method_missingmethod_missing((messagemessage,, **argsargs,, &&blockblock))
  proxyproxy == __mock_proxy__mock_proxy
  proxyproxy..record_message_receivedrecord_message_received((messagemessage,, **argsargs,, &&blockblock))

  ifif proxyproxy..null_object?null_object?
    casecase messagemessage
    whenwhen :to_int:to_int        thenthen returnreturn 00
    whenwhen :to_a:to_a,, :to_ary:to_ary thenthen returnreturn nilnil
    whenwhen :to_str:to_str        thenthen returnreturn to_sto_s
    elseelse returnreturn selfself
    endend
  endend

  # Defined private and protected methods will still trigger `method_missing`
# Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
# when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
# so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
# ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
# bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
# https://github.com/jruby/jruby/issues/1398
  visibilityvisibility == proxyproxy..visibility_forvisibility_for((messagemessage))
  ifif visibilityvisibility ==== :private:private |||| visibilityvisibility ==== :protected:protected
    ErrorGeneratorErrorGenerator..newnew((selfself))..raise_non_public_errorraise_non_public_error((
      messagemessage,, visibilityvisibility
    ))
  endend

  # Required wrapping doubles in an Array on Ruby 1.9.2
# Required wrapping doubles in an Array on Ruby 1.9.2
  raiseraise NoMethodErrorNoMethodError ifif [[:to_a:to_a,, :to_ary:to_ary]]..include?include? messagemessage
  proxyproxy..raise_unexpected_message_errorraise_unexpected_message_error((messagemessage,, argsargs))
endend# File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  

  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  


  
  
    

  


  
Raises:

  
    
      
      
        (NoMethodError)
      
      
      
    
  



  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  


  

  Dynamic Method Handling
  
    This class handles dynamic methods through the method_missing method
    
  
  
    
  
  
    

  


  
Raises:

  
    
      
      
        (NoMethodError)
      
      
      
    
  



  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  


  



  
    Instance Method DetailsInstance Method Details

    
      
  
  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  

  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  


  


  


  
    
      


36
37
38


36
37
38
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36# File 'lib/rspec/mocks/test_double.rb', line 36

defdef ====((otherother))
  otherother ==== __mock_proxy__mock_proxy
endend# File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  

  
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  


  
  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  


  


  
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  


    
      
  
  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  

  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  


  


  


  
    
      


23
24
25


23
24
25
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23# File 'lib/rspec/mocks/test_double.rb', line 23

defdef as_null_objectas_null_object
  __mock_proxy__mock_proxy..as_null_objectas_null_object
endend# File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  

  
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  


  
  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  


  


  
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  


    
      
  
  
    Override for default freeze implementation to prevent freezing of test doubles.Override for default freeze implementation to prevent freezing of test doubles.


  
    Override for default freeze implementation to prevent freezing of test doubles.


  

  
    Override for default freeze implementation to prevent freezing of test doubles.


  


  


  


  
    
      


67
68
69
70


67
68
69
70
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67# File 'lib/rspec/mocks/test_double.rb', line 67

defdef freezefreeze
  RSpecRSpec..warn_withwarn_with((""WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests."""WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests."))
  selfself
endend# File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  

  
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  


  
  
    Override for default freeze implementation to prevent freezing of test doubles.


  


  


  
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  


    
      
  
  
    Creates a new test double with a name (that will be used in error messages only).Creates a new test double with a name (that will be used in error messages only).


  
    Creates a new test double with a name (that will be used in error messages only).


  

  
    Creates a new test double with a name (that will be used in error messages only).


  


  


  


  
    
      


9
10
11
12
13
14
15
16
17
18


9
10
11
12
13
14
15
16
17
18
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9# File 'lib/rspec/mocks/test_double.rb', line 9

defdef initializeinitialize((namename==nilnil,, stubsstubs=={{}}))
  @__expired@__expired == falsefalse
  ifif HashHash ====== namename &&&& stubsstubs..empty?empty?
    stubsstubs == namename
    @name@name == nilnil
  elseelse
    @name@name == namename
  endend
  assign_stubsassign_stubs((stubsstubs))
endend# File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  

  
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  


  
  
    Creates a new test double with a name (that will be used in error messages only).


  


  


  
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  


    
      
  
  
    Returns true if this object has received as_null_object.Returns true if this object has received as_null_object.


  
    Returns true if this object has received as_null_object.


  

  
    Returns true if this object has received as_null_object.


  


  
Returns:Returns:

  
    
      
      
        (BooleanBoolean)(Boolean)
      
      
      
    
      
      
        (Boolean)
      
      
      
    
  

  
    
      
      
        (Boolean)
      
      
      
    
  



  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


28
29
30


28
29
30
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28# File 'lib/rspec/mocks/test_double.rb', line 28

defdef null_object?null_object?
  __mock_proxy__mock_proxy..null_object?null_object?
endend# File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  

  
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  


  
  
    Returns true if this object has received as_null_object.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  


    
  
    Instance Method Details

    
      
  
  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  


  


  
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  


    
      
  
  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  


  


  
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  


    
      
  
  
    Override for default freeze implementation to prevent freezing of test doubles.


  


  


  
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  


    
      
  
  
    Creates a new test double with a name (that will be used in error messages only).


  


  


  
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  


    
      
  
  
    Returns true if this object has received as_null_object.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  


    
  

Module: RSpec::Mocks::TestDouble
  
  
  


  

  
  
  
  
  

  
  
    Included in:
    Double
  
  

  
  
    Defined in:
    lib/rspec/mocks/test_double.rb
  
  


Overview
  
    Implements the methods needed for a pure test double.  RSpec::Mocks::Double includes this module, and it is provided for cases where you want a pure test double without subclassing RSpec::Mocks::Double.


  


  








  
    
      Instance Method Summary
      
    

    
      
        
  
  
  
  
  
  
  
  

  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects.

  


      
        
  
  
  
  
  
  
  
  

  
    Tells the object to respond to all messages.

  


      
        
  
  
  
  
  
  
  
  

  
    Override for default freeze implementation to prevent freezing of test doubles.

  


      
        
  
  
  
  
  
  
  
  

  
    Creates a new test double with a name (that will be used in error messages only).

  


      
        
  
  
  
  
  
  
  
  

  
    Returns true if this object has received as_null_object.

  


      
    
  


  Dynamic Method Handling
  
    This class handles dynamic methods through the method_missing method
    
  
  
    
  
  
    

  


  
Raises:

  
    
      
      
        (NoMethodError)
      
      
      
    
  



  
    
      


74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 74

def method_missing(message, *args, &block)
  proxy = __mock_proxy
  proxy.record_message_received(message, *args, &block)

  if proxy.null_object?
    case message
    when :to_int        then return 0
    when :to_a, :to_ary then return nil
    when :to_str        then return to_s
    else return self
    end
  end

  # Defined private and protected methods will still trigger `method_missing`
  # when called publicly. We want ruby's method visibility error to get raised,
  # so we simply delegate to `super` in that case.
  # ...well, we would delegate to `super`, but there's a JRuby
  # bug, so we raise our own visibility error instead:
  # https://github.com/jruby/jruby/issues/1398
  visibility = proxy.visibility_for(message)
  if visibility == :private || visibility == :protected
    ErrorGenerator.new(self).raise_non_public_error(
      message, visibility
    )
  end

  # Required wrapping doubles in an Array on Ruby 1.9.2
  raise NoMethodError if [:to_a, :to_ary].include? message
  proxy.raise_unexpected_message_error(message, args)
end
    
  


  



  
    Instance Method Details

    
      
  
  
    This allows for comparing the mock to other objects that proxy such as ActiveRecords belongs_to proxy objects. By making the other object run the comparison, we're sure the call gets delegated to the proxy target.


  


  


  
    
      


36
37
38
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 36

def ==(other)
  other == __mock_proxy
end
    
  


    
      
  
  
    Tells the object to respond to all messages. If specific stub values are declared, they'll work as expected. If not, the receiver is returned.


  


  


  
    
      


23
24
25
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 23

def as_null_object
  __mock_proxy.as_null_object
end
    
  


    
      
  
  
    Override for default freeze implementation to prevent freezing of test doubles.


  


  


  
    
      


67
68
69
70
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 67

def freeze
  RSpec.warn_with("WARNING: you attempted to freeze a test double. This is explicitly a no-op as freezing doubles can lead to undesired behaviour when resetting tests.")
  self
end
    
  


    
      
  
  
    Creates a new test double with a name (that will be used in error messages only).


  


  


  
    
      


9
10
11
12
13
14
15
16
17
18
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 9

def initialize(name=nil, stubs={})
  @__expired = false
  if Hash === name && stubs.empty?
    stubs = name
    @name = nil
  else
    @name = name
  end
  assign_stubs(stubs)
end
    
  


    
      
  
  
    Returns true if this object has received as_null_object.


  


  
Returns:

  
    
      
      
        (Boolean)
      
      
      
    
  



  
    
      


28
29
30
    
    
      # File 'lib/rspec/mocks/test_double.rb', line 28

def null_object?
  __mock_proxy.null_object?
end
    
  


    
  

